%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96dev Copyright 2007 Radical Eye Software
%%Title: master.dvi
%%CreationDate: Mon Jul 14 14:23:44 2008
%%Pages: 33
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMSSI12 CMSSBX10 CMSS12 CMSS10 CMSY10 CMBX10 CMR10
%%+ CMCSC10 CMR17 CMTT10 CMMI10 CMMI8 CMBX12
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t a4 master.dvi -o master.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2008.07.14:1423
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 10 2008-01-18 13:31:24Z herbert $
%
% PostScript prologue for pstricks.tex.
% Version 1.03, 2008/01/01
% For distribution and copyright, see pstricks.tex.
%
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin 
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ] cvx def } def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
%-----------------------------------------------------------------------------%

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 7 2007-12-29 22:21:13Z herbert $
%
% PostScript prologue for PSTricks algorithm parser
% Version 0.01, 2008/01/01
% For distribution and copyright, see pstricks.tex.   hv@pstricks.de
%
%-----------------------------------------------------------------------------%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 7 2007-12-29 22:21:13Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.00,  2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def systemdict
/pdfmark known{userdict /?pdfmark systemdict /exec get put}{userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put}ifelse

 /burl@stx null def /BU.S { /burl@stx null def } def /BU.SS { currentpoint
/burl@lly exch def /burl@llx exch def burl@stx null ne {burl@endx burl@llx
ne {BU.FL BU.S} if} if burl@stx null eq { burl@llx dup /burl@stx exch
def /burl@endx exch def burl@lly dup /burl@boty exch def /burl@topy
exch def } if burl@lly burl@boty gt {/burl@boty burl@lly def} if }
def /BU.SE { currentpoint /burl@ury exch def dup /burl@urx exch def
/burl@endx exch def burl@ury burl@topy lt {/burl@topy burl@ury def}
if } def /BU.E { BU.FL } def /BU.FL { burl@stx null ne {BU.DF} if }
def /BU.DF { BU.BB [ /H /I /Border [0 0 1] /Color [0 1 1] /Action <<
/Subtype /URI /URI BU.L >> /Subtype /Link BU.B /ANN pdfmark /burl@stx
null def } def /BU.BB { burl@stx HyperBorder sub /burl@stx exch def
burl@endx HyperBorder add /burl@endx exch def burl@boty HyperBorder
add /burl@boty exch def burl@topy HyperBorder sub /burl@topy exch def
} def /BU.B { /Rect[burl@stx burl@boty burl@endx burl@topy] } def /eop
where { begin /@ldeopburl /eop load def /eop { SDict begin BU.FL end
@ldeopburl } def end } { /eop { SDict begin BU.FL end } def } ifelse
 
@fedspecial end
%%BeginFont: CMSS12
%!PS-AdobeFont-1.1: CMSS12 1.0
%%CreationDate: 1991 Aug 20 17:33:47
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 31 /Oslash put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 64 /at put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-62 -251 978 758}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B17498276F99362748F6E97327D
7CDA3F5773E01FAD12B7339D4A0993D40A82FA42AAB119589F1D7D60A8AC7A96
BF8C5A08AFE6D427A6FDDEA2FEF0B8ABC37C6DB62C8B4074CD6C385419CC66E5
A4B4C5F902900090EBBDF7AB524205CD9DD9D8B9CB522B8EA97203F0E8FAF683
09750B6C8286AB341F9C240CC02CF7F3E153C3498F16159862CD74C0B6341D3D
57184AB9036EBA94B432D0CAC32240DD569E639B4ACF0BEF07EA19DDF0606551
C8EC84A7A67F3C3F58D3335D7273B51CC2602B63B900D24A6D5A8E766D49EEB0
693796781F0781FF13C5592AA9E071E39034E0742E804ADF14422A734917F0FA
8973A1B9269EA354F8AC75B7284AF48B69529167E55922A20C3106EB6C559E97
7CC1A491C3B41AF834804590554742E742A09A5228F71DAAB9BA2BC3F00FD5C3
B4821FEEDC8B65732409A9C4663FD4C4BC7C864D71F6A6D354ADF71675042DA1
31DC2859AE00363B3EF589B4DAB98D3515FE8176041A332A5647DA8FB9718975
9D0103074531756594D5DD1AF3A9A20F1BE203E28D24DEDA7801AD1CDF96906E
E7049115872C82DD177C3BD765F72E7C15A90CAC968198A38EBA25054D99E7DC
A349E6502C98F894994EF7A0AEED79D1F12EA1B18BF8BC3B5806141C82B201EA
0275585110EA202D7A253F1D6DB449FF2B25F7B8385B1427453717DB07ACC21A
9F5D5DF4AB9D3497C382B1B9761FD0693533650CF014F5D56201767E4CD18A44
A4D912E1A90EF1BEBA702F806652672ACE37D40B4705A4725AC38A8B7D706E84
6D22D811AFF8C8F465D585778EDF77B600F65E332849ECE66FB0EE108B30103C
BDEDE7AEAD0E3A72472B218310D9228AE0BD49120DF3345B692104A1005370C9
63E30D9DEE76920C1DD9E440A959C2148FBF38C8732543AC1D5FB8DCB5F335F9
9B51C2352DA027A275853AFBA622985A9DE20C726A01AE0946576074CD7F21BC
529A9E3A178E0710FD7E4C36ED23AA32444C0069B7D61CD5AFC6384302928BD0
8390F41888E773A99EFE7001F548F7F3B264B872F83895AED1C9D404EB8C2A8A
D820E29206A2F3ECE98FFED3FD2208B5885F8EDBD2BC4D574BAFBD4307419FE3
6AAEF7D5599CCD6ED8FEED017BC4192389E4A7FA210C0FD0BBA4DBA154013BA3
6AE8579B6A5D0A0F5F156747EEFA9FAADC318EBC8F2658BAFE50B657F48DD585
9631F1C4BB842AED97792A0FD9E2319578FC839C34BF7E2D98E7D3DF729D0D8A
2834952E451FB2B5C135732E995D6FD2C4EB6AA240105F2DE03BD8F828760017
974F35E6B0E79471961515745770F337DD319B737E88A279A683610288991FF7
81FFCEFFAB0009ABA973690D377553787E64B11152AC858663870C8E61AADC54
B60DBCC7D039A0E96FFF01A8CA29B4A06260297F2F8CF985FD75FCE7888EAA92
97FD2E2E83828DFF6F1B0D926BBC9816A034C1034DD3E1941CD2468049AFF2A6
5C635B4FC3D1557BA9508379A570D0A16F9F5B4D2247B6C0FAD457CC727C0331
E4C66A9CD33B195051AC39389B0799FC81F87D431BB286F8C5DD4D9EF4EAAB06
96711E615659B53FF3E331CFC653DB353D85D7085558AFD8330D3610A11397C6
3EFF7D43BEC9876A929ECC179E9336F1D0F6B2F71A074776644C7871CECB657A
AFDF154641184F5B45665EE8ED657C9752F1FDF75BF69EFA4CF549A32216FF42
55EF7F49DC251AF893469C705DB466708C336D38512E6C539563DC6880DCC0A5
CEB72B7137CDCF668CEBA06788F7D12703F4B8A7F086E77889563AF216C29834
884F8B524811BB195436B192385518865DB7682A52324AE6929F90F79E42A491
C676E3F634EC0D063A1D438D72B7FFC5A16E3FDF982D55FB123498CD89C4D230
A293D7B51DF8FBCA0FF96A9D7AA3725A4AC83187AE6AD64D93441C0050876E40
82B01E5BA6973C7E7E7428DB96A25EA1B099A3067A7B8DA1941361FAEE567131
AB3805E2D9926F8024BE2D4728E38FE74E9ED0104AF51231FE8FB5B9F237A800
09C4479DAE812C1E4C713379C8F575A3580141A8F3C33B0096065FCB82BFDB14
57AAF58C11A6744207038E7C9288EF884A0ED18708493BE1CE418151A680E8C6
CA9409A61FF9ADBEE00425902AD333908C8A3DFC24FB596185A0E2037428BED4
A3B5E5AD09BCB4FE6CC9CF776B239DF38E7E47360EE5CF46E28461233FC1C20D
852CFFED8D2CDDDB484BCEE3A7228D808A42CB4017CFF74D1E125BCC7B727179
5B770503D331AF8A69DDEFF6EF0190C878920B5777327B2EE1A7F077BF68EB71
20EEB9C50FF0B3BD486BC0C9E428CCD45DA01DEDB0B0151ACD81FAF136E55D23
FB189BB9256064B60D4E3062BA52DAFF2D79ADDA0EE025396AEB5BB4218F8099
1E65F175B052661A7FBE9F726513B5B3CD1B8B8B29BB20E85FF881E0AE5C4463
085A15D4C4243FC45ECB15DD8F0647E650A42CCA33FFB79905C1BF34FAF36CA5
6532813D357E15DDAFDC242C6EF36E1CAD7F95C22EABB5539B4801F71E4FBC0A
3E5EAA0B4FA4C9652CC515CCA8BC5C95EFAAC003C9F2F9B3428799BB79438072
B904878B057094AE2FC69079F07BF214B253F9280CC914127BD45FBAE28CE3E5
4C65CF33C6823CBA32AF0D752305D569509195AFE86475BCAD45C4E09EB6E441
BF1A0A40AEB0604DD3BF5E67841E892890FA1FC6F28F4803C0D752949B6FE565
D0B58DCA4E39609342EB9383897C061AB2479B553D11B38ACBFC4A7CE4162DD1
6574CCCC2C3C0412E3D2A32EBA11EBF1228A71C32A44BADE8C786E2E03689B86
A01E2C50EB328674AE5AB0E1ECF899755C433D4E76FECCCE2396B0690F48EA1C
037E4F562C8D365C2CB6BCE512857277554E6F0F74CC503F765B3AC1354DDFF5
5199F424E95956301960B4312BE86EB1E0FA85144E276B303A582B47D0ED04F6
5030EB68AC68F145B9D14D22C74144EB04A255EB3201E53C3502F5650410E846
21322D47D71783E9E77E25A32C873A42A9D41BF9B97E6E144FEA4917B3E8E36C
EF6CA062B4F8DB6A62DA8BC9DBE97786574A1944D05C17A305AB6D00AB3CC015
A5772B65D974E02A6F05A2BD53233C4FEBDB8094079FC0F18E70FD2C2F2799E8
3D6E71192638BCFCC03EAB1535AFDFF8439F58249C3F9F7F96D4014C8F49B775
A8740BAABBEA1D44A02605407EF13BBD8CEEC4793131009CB1FE2C7964E494E3
7A17EC8E74E23B167E22A26B0F7CDD59F0C0889A5F458C097AC42BBE921990A0
DB728CB3862C3E7556807540C4422B0A8C9D03EC7BA5AFFBAD5317CD75CDA9F1
52ED478D46998E97E3FC04493EAEDCFB74272C10B58FC92D343B2B1E5C1D8327
01537FF98200116A623B187CE728A3BF9AB36C424861F92161A214A7B1A163EC
F7C39FCCBA198DDDF70977452F95A78A00E20061184ABC1F3B0CF783E240934A
FC275C4ED1F296145B2C5B6000100B1D662E2D05DD5219E4B7DA0D48C99C2FE9
F6C38C1B038F52D67FEB72A48993680267208021EE924D1C86AB2BACA15D7D5B
55DA05BC48F1C7D45EF9CC55FA735D32D16667DD17C1F8A2E345888680E272B0
12C1A2F7D4DE86594AD3805C6DFC74DDF809CB41C3D92D4ADAC3AF8D34920CEE
B3CDC3857BEDDB65CA530633F0036EBBB888B5B88BF185A9684139AB5638C2E7
1BA4330FBAEEBD79B802EF67DC77C730207442288A1A40A9B699B6D26C15089B
EAD477F81A804562A0E80D8F599D95F736A60C4D168777C58ABAF48509781CB3
F3370C9AE43B6349D7A41093F639D26AEA7232168FBAEC7DD60DB1372B5511CB
6F78C72EF42736A0649686F22F2A097A5A633E32DACE93E9012844C89D90AC99
2711579BB4CE32AF685A08D10474C42BFC4553937344CA6414E26E7E23BA90AC
CC9A69B68C9E78315880B783D5E05C027B8AB6455ADA553CA48B06D603A2BB60
DDBB09F58A322457DCAA9DBEA99F055245B4B2DB941DFC66440ED24402F6DCAD
77E3FED4DED52BE4F1DCBF11C0CCF349A57A54865A31447654E23D7DA7C7F96A
4D6DC47A0F6A5DAE5099EF428E1598F7A02E8C72EC58003A9682D8039D07DE02
962AF95D5CCBE2F08282BEE9BE52D919FCEA9FB8B8785680D634AF1880A2634D
27C6912BE0A72022DF1253C52259AD72E608A33E965782119CBA05DACAF28545
0FA342570BF6C7FBC3622BD65015C3D8787F16DB4AC476A6D6CE85AB4071D4AF
674DBF3D2F43675F50F0A300152AB3CD3F039501AE39F03AD26DBAB4D2669732
78E99A2645CA60A3372EC0958738DA4E464F540188869A589BF0A2179D6F9226
73B8959A08E45F4CC52ED72BF3758E96BCCA18B722216C4C422EA5C5E334E007
13503BAFA742B40AE41B476F1D1C8FA53A183DAFDD0DD0EF870063C1A9FFF664
E7190DB7A194009E9D5FB2A73151CEBAA6953728D378C5BB6C9C20F4AD4FB19A
0B2CA472E86A419A1F438190687DB225C0E50E1B68D57006ABEC68DFDA1DBDB9
11857CE0825D5C3F32E515AC43C4E807A86DDFF4457AD28BA3F44776CE6BAE14
ADB21DDDE4249F889E5E3B1BA1CC50B5D9EA66C36C5FD1172855767F53085E82
DC8B77AB4B861654DB4682608EF7A9F58EA1261CAC1C41BFFFE71F84B3F753FC
80AA8C88C47ED3941467700C0FA2C721989B5DB7E9687EED05EDA06D4C3A9F8E
730C1112BDD3D9157F16929E289600AC26E1FAA2FBD8A39D0A3FA7F1671460E7
E2059616EE6BEDAADFBD53B8543F2658AECBAD1AAF57F1709DA643A0BEE4312C
8805C67C0C577AE1F81CEB5B66C4FCB50E57022B36D9C6DC98D35EC67BF96CA7
8C8903258AEADF0FEC660434203C45FECCF3F2A90993DA830D28C34EBA87AA2B
0A3DB439DE0DDCF65BA30348E46947A86DFA63408A5AC52AC6F047640629711C
C3C01BFC1C929455E3D222818310C3E8DA1E523D9A837C04F3E4FD1B5FDD0483
88329646C3851DFD705B8D7685086F520B0E21F535C5D3A22BF2A1C54E512405
E10A992730C0AC11CEEDE189162238D156E608B8226C4449CFC0141AEEAAB339
2DC62CF00986B16366BCFA118D8C72CEA689172C7B174945CBEDCBCCDA09D30E
CD229D4FEC36ED2DFEAB0B03F2580C10434C4D1A1BD5E4017056D1F78184CC20
92F2631BC734313D1C83238105916A514209F21F7753D5FAFBD466B5C0341736
20C8E4F4507807075AF6769DD8F6CA096548E8C72B6AFCC72B14948410AD78B9
9FCBEEA0D88E3B35470AAB224C8EAF97C4657B0CB58CB5AB9F619234E35B238A
BE9CFE690B0F5DCC57C6B5630772C12FF1B7483B4C8A053A9DC3359852613D52
0523B89F823C4C02FC6D24519F3060CBDD75C666B18C2B6827684F9898728B57
2C70DBCEAD6FFBD822A02662E63DAD7929EAFA36220188017ADAC050B4550B32
99B5ED3FC170C9B181CA023C7486797D82CE13B0218B0A58A0C56D6426A38C3B
838D6763B4429763149213275977A342A3BA7B8AA41DEBFE00051499F1D01213
44AE1235B156F465A4C0408E92808C134C52DE453C66828A1A59D9CC704FDC7E
C69383DF185B5C2660B1181138ABB803F8355BC0F219C2E187C2796ACA103A3E
01DC677CB7B5B3AA79F649012FE8CF107416B83959E230D56DFD132574D6AD9D
E8A03AA493D6FBFD6320F2A789552F8992910ED561A7AA28F47A8ECD01A2213F
4653D156AD07D2B6C78F737264FEBA2C1C80D402DFC9802EB29963CFFBC9F2BA
DDB6482D7DAF70BF91DC2997481B19E3BC1222196A020D36A66DC4A28213711F
DD6FFBD0614012EEB03CEECA12CF8C600B95D9E8E0B411591BA5370D577639D5
FD3E304B06E2F0B4DA065192AC5D9BC399141D40409994A8F5B9F7B9D146A41A
D2797CE748EBAC564D6916C837EBA2B1B1736788C5CF40A58DD869866B8BC9F5
512A3F5993390008C5F064A49F8C03BCB2CC58F557075A7233314802A6FE4FC0
A55497A766A7217C1CE577E774A6D6C8725C325455AA8E8DBFA887347DBFA5E7
549E7261256CC89ECDACF475BBA6F9FCEA8A6085C995324346E098D6CBD325B9
528D96391D47E8EB1A9263C60C2397C81FD88A88854535DA3F9B4F579A44B9B7
EE9DDD2AF176343870C17DC5462658FD27662EDD23A0B43FDC4CD7CB8A8F588D
E3607A5D6A458732E30903652088A27962F51B6BB0BA76A5621246B35C43B660
3AFCA8388488BF09391F0ACEDAC7EF5C3AA49869946CAA9F939EB8FD5BB64FCA
6089C89F9877E7C2DEDE4E871A714BD9069F950527890A5FD98AF9E7F632934A
4E7F598808136676EFFDF8F0C381ACCBFD3978BEED51551528A857255F1828AF
CA72A358FCA86E237DA4FF3701B7F434DCAD96FAB6063D411B21979850C45B76
8301C47AC9B4902E2508157754236B17D747C3FB00AA6330730C816FA0F4831F
883E483619783727C7BE34001F3B87E76BB07E62F6731E42EF31529B23A140D4
410F80AE4770099D933171C6FC8695CC7E6D7462ED194C79D5220CC8D3DE0A78
8BDB9A78FA61B7B4DDC6293361592F98CCA6B63B67D5B9C517FF05E87971BC28
99CF787F501CCF437DCFB48D52E38B4CB6AB8C141BFE8F9FC5B969FA7DC7DDE9
0CC03D0DCBE6BE26B103EB93680104520B3895B3D3D9D0C87E1526116D508D0E
F87AF4E0324B07C9499F5087B1E4D7EA50ABFE03E131F3F1FCC8F367B9765EFF
A0A53E9C8B509C019A2375ADDCDF5294B43A1D2447B9D0184B6DE75F1E8866BB
88AD15590D82A8A9F5152D06EF361701F5B59210A39F6A20D10DB171C353632D
34D113B9DC5E65C200250DA8D0279E0C10186D1DF25FB5A3D7C0DB43B35D3B3F
EA04F012E3085D0CFB0D9964F0F4EB1539FD7B664770D84B1D2FC68720B15813
AC61592C8EB903E84C813A20A1753518F75C6CC60E4531672B2838655E2A77D7
DA26E15A05BED7BDB658866D8842305B2E0350174D7545CEF545D47AF8692D67
B449CE2EAB192BF608B901083C35CAB8E00365D017EB0BE5E0A39D8E463CC26E
1D7A42A09D7029301EA9DBC76FBCEFF69D92FCF40E79516252EE52D14BC1527E
7151F2912D1133B189493A5508165CAD85FEFF00E945474DBD96896C6B1861C7
9933C40D7E67E4320A3F73283C218083F733962A3E0DAFDA173498A00101B632
80084CD60F7B067996884CC8BC875E408984D8ADCA914C86BD959FF8BEE2A509
9915AEC9CB53124B19367065B5668BBDC7FB94AF26F4983DCFA4D6FF56F89F56
58CFF49BD7750BD5D2715EF6624E8CD23B8646940AF92C7FEDFC7BAF1C216134
CEC60EE7EDD3736DBA03B2598F6D58AB1AA8A754FF3C07C6120FBFEB97243248
CC2EE915EE987841AF34A0EBDE8F6F641F644421A3C8D640FF9A46F3FFECFC00
E7766D1C7A6014F390335A3C9FB7AF3617B28A3D7C7C35F7D68183B22E7E2DC1
8630CFEDF1E1CD4EA1DC3FFCAE5B2887658239F6B8525FFBB11210FC5C128773
B71D80CA796CE134799CAE3CE596C1F5DBCA75C60045A85821C88C11FA0A5EC0
9BD18CF10047270196358A9AD421729E633DDE15BB1A8598FC58F7E0D7B1D523
410D7A6C19F03B60E27DBFF6B1C39E5F1BEB49779C93F6FB694AA3020E202DA4
FFDF8EB0B49A3DFC4BF019858B1E9D43D1E9634EF8137A21C91F4FC6BCA440E4
1AACB21E6337ECD30794C03F152C0BEE8715B6533642DD094691501645B42363
505871DF48E5E691055312BD8865CE4A5C450D114AE4CF25B20D23A84E933D3B
96B2A97A622F6D6E9A8D69F6CF52AE5E06BEDB5DF03520BAD6E10EAAD009A306
4849B13C2DA6CC86882DFE30835AA706326DB069F5BF6C995C76CCA49F9FE1B1
E5E96177BDB2C1537623FADB069D3A03241414C6024DEFFA936223EE270CC519
0A2546D046E8FC242716C092FDBD28B0FD53C6F2D39260AEB76C5B2A9EA08C3A
56DFF5BE2BDBA7177C4510263C2E8134C83B7357819CAF548DBBC4DB378184B8
F28ED114DFFC18F4E7EFE007694AF7FCBBE4AC0AD90A81BDC8F22FE75E3ECB9B
9A55BA5E588C88EF09B917A7A506CDB6E4E53A9DFC6B6ECEECD4A28C249EA2E4
93E93113E8C88B7869547A0DEC7706496B88185CAAB98CC9983FCA04B1267BE0
18D86F0C241EDEC933497072C4E1E2E4A3685B301A4399B64088C0584221B8DE
11FAFDCB6575372CD2BCED62A2BBB056B1976CB5AD8CC5B0F58757AD92ED60CA
2C2868B957C09AFEB6BF5DF228C7DCDDFE9E8AEC6CEBDE31DFD8D34C5B5AD81D
EF0C6A99B98A3222087EAF62B3E558A36FBC818C0041068B19A06FD1C04F45D8
B9764428A03C5092E2690EA34AF3CB6D47E569D234EADBB41BA2195F4F63D01B
B86F6DF64DD58244E35EC48112BC5E537D22CEA482E5424B6447909FCDE64790
14B577CC9435A597E9443DB5E5839E948FF1B5A6290AF098E54C024D892050F6
20C709F323083090A8F49D363D13CB2E598003510F7564EA2AAE8EAA58D5A56F
55599B47989B04F07CD8F3438829C883A954A7001AF774F47607AB5351BE9618
AFA0528A1883EA55D29089BB1966ADAB500B8DC6FFD43CBF87D8323AD18464B8
E2C7AD5A8F420593A0091ABE10232C5BF58CDC7B4A75D03ADC0BB36D463885DF
775D2EC59785D575E5AAB4ABCA5FBB626ED5E0B77D57D2E018DDA89CEA2C65A5
1F178C00C6B3E12C31694A74381D8510237C1C455DA614C6CBCA566C2C5A4F11
A03EE1EEEB4CBAE2775397D29618F7ECBA3A7DF2A18A33F217C6B034B5D3D5EE
83E112E30497683F5CD39EC18BFFC46CDC97632BD2F90BE29F20E39B449E4A89
3356B9B61AA54D5113D8AF21FE90053527706071A95AB52ADC4070F868C2CBD0
EAF7292DC582921EAC2396FA0F4C6C28DDB4C366C80CC778D022C3A5AA104DDB
12F35F4823636D20327FC20D848AA544BDF017495881156EC8FB557C8C1816B7
4A14EC28983AF33C039F721C655D02D15DB5399EDCA7260D7AFDE32DF4AF2FB6
5A7E07F01270468E2C81FBB637C890608A0146389CB4D50BC559ADF43CEC274C
E4647278F1BE57742DCAE594039796AE18A45A3E20BB6EDAEDF05BAB96F688BC
8BC0FC096B106401494DA8B1409FDC6F8FE40E9782EE02425E9F9136C986E413
CA21B032E2088C175602C899F2DE87FD2568D432995B2A2458E5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 67 /C put
dup 70 /F put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 107 /k put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE286E8AD0
B5E912DD767E50C4167D21BC96C4C4144434BD16E87E391AE6408526233C59E5
A0F2630F6482E177AE63358E0151231B7CA8172876DBFFB4945B46751A295BD5
4591A4BD170D9B5ED4F67B1D9B4FD1132E6070B076B471D16E7DF4F61393D0A2
320EC5ED75CDD5DF823F8EA02F039B78862894CB8D41113997B79227424EF776
41B4C6FAA6030AC84CAAE7DCECA3510D0844EB45B4D65A24EFCA3379ABA0C157
BD676B34E81413B9DE0A63B733BF42BCB69AC2041ECC824D592B04114C31C972
63A72CF5BEA74478E2D84D93331E33645D4B79EB1931C874AB70539738909041
17118332E8E1A529BE10BB580342870F0E7497AC93DD2F36F766D61763CBF902
F94ACCC92F6419CA628CE21CD6BD6E173F5A8CA4327D9E1C188B14056C2933ED
3BFFC7AAE2A93BD26B5D73C2348262A87F55F943AA9687A2087EC8E0C596EAD8
20526C95758AF26301097EA9299333356162820ED70C1074B945D254B0F31D2F
27F809B9E48C41157ED7AEC64F2E6A08C11C4DD6A97ADE3305F831425BFC152B
9CF3326B8D791BF066787BDC8A15EA12A86CBE4D67470EB1FFFC585B16646F2B
85C2A310C7DB03A324CE930BFF0ABAD919FB02138AD5BFD4E7B70AD869E351D4
D1F6842ADE703A502C9223B77E68D126E57641A5A4BFA36D1AA701E04535AAEB
0C76C80A273B1DF7EF1CCC0EBE81AF81859A22B8DD8FF26AD44CCFC590A81819
53F87B978939C283448C95AE3AE71654FA9AD10E8BBD09DAAC794B154901BEC2
5FED5470E5CAF9C112C8F94AAD3BABF4169BA7138D00B18B46E5BD735A3E881A
8E035FDC2DF95E106309348AEFA8CD9BE8318622082D9AD0FC77F052E14C3865
7A16D45D3975CB3BE2E038BDE3BF795018B10C2C6B8AB2FA5D1B1F0747190D60
E6D74683447657B386D68F5BC9D2C92BAD8BC304D055B6530978B77F1D2E315C
2D0B0B72EE787479AE0486AB506930D4E6DB2C7458A701CFD5CDB020DB788E5A
249DB7965E9E31599CF9894AACCF1DEAECD2DFECEDC395306BA90E4093FE14AE
731114ACC1588B4C6C13B68C7F9202EEDB6374C9F3198D9DFCEBA19618875481
195534E9C54F2230A1B925C936D35EC6A3A3A3799484E0B4160DA97E056A44C5
64D8C85EB58B8D999BAEA310F459351125B1742CDC8CAEF6753860B3F7ADC89B
7A1EC55F5EF94CBC1B7E4B320D56401F4BB0F48952D0A1ED9ACE2B22A25D83B1
35C09E76F2EC5286CA16FC8A0BEBF9D2980F26F57ED985745699747B7471522D
AAD66FBA2BDEEF44B5D9836DE91456F7F563F06714B1A8F49CD036E897E104A3
0EA7EC63A98C4216C0651E399F425744F23055996A1D9A01318FC13719C0C723
56D06B4ED1FEDCB96C7C3099E965D5EB4DF1C1EE02CE5D24328A32CECF2EA59E
1DA00B10D6F8431B99DEC87A3760A4658465206B136D72554D28964325C5D476
4934220BF94D1166CC1272600A867278F660E76FA504A9FC3D6CBEE70FACD742
1056186E451E2FEAC7F2E9CDC06B71D36E0D462359663CB2D516F02D4075461F
C743AFBEDB840E014CDCB4A0E60F13C9B057E3E869C404F5900300C4E4E2F9A8
4FBDD6DE14C723FF4232B0D3C7AD9C4B1F08CCA602F74BD64B21F33CF9953DEB
13CE6308350968F0CB9A822328104DC1F99C4AD114CBEB7F8F0D58C81AF6AC5B
46B2C9AECFFCD87F1E015247B2B93FEFCE431F6EF4C3CA0C1A9857FF41092948
D1D77483F36B40F27C1C0F63B980E1DDB0F6666393248BE4D2DB8E9D867EB1A7
B956F9FC832D39E5870D25E8860A27E1DB1E5DE4B9D0FE618F9067796D0E7235
B68CE7BEA8CF3C8C58CC8AA07FC180A2EF5342F4200BD99CC0165E9B48AA3D58
60A7122C00C0E21A326F29CB5D75BC85B45328399BA1B77919348A1BB1BCFF3D
05A7E91A0286B43EC0C9B43F0DCE62E3EF16A54E3F9375417A0B1757FB5531ED
54380A91A1895295EE30C85DD4447CFD91989A008FB4C6DB33D5FFBBAD203906
2FDDE1CC64755ABB86EA9938BF9C81D371E2B2D113BD1934F8659ACC572C69AF
86DA95B93B08748D560C6DE5A3C563885F265CA9E3C97ED9CD659AE3125C31C1
949EF697E091D6061D2CB3C4744AB524303565D4FB92283C66CD9B72B9310098
02C2455EDCFFA86694A36635E818EB35A3045BFECFC2E0792ED0A3A8A3379B17
99FF9B94469072077CE0BA02EE679C254C3D243E8FAC1C3F42DB3BECAF6A0DFD
C7F8A18DD4F24EC1205EDC732E5AD1FEA9EA438E5D9CBDFBB863E4FCA55436C2
1C4C0855A8B364CE154E2883A0BA198C2AE1FC235D3037BA087098C9FEFC2979
2BEFE39BBC28861672F5A29B3F3DDC8079D17841785FC8A4B4C0A120E7916D87
A3735C99197E5926DF1D7858AB864EEDE03A28C717E704C7B744413B9AB432F5
0CD0EBB95BC8B56BA115DF504CDBB0B5FD4ACACC6EA7D36607C2A378FE35609C
D23D4F3A1A46FE4173567739975744FBD76AB34A93B270DE72644C44728D69FC
DD78A1A2AF6A8FDCCB03D6C84593CFE663015539E9728F11F70A5420FA35EEDA
DC5D1F631E6DBFE23EAA4E5DAD6E2FEAFD281F43FB26E0C21583F1D89B08B313
529C2D269BDF69899057B9579A0B03DF3F88ACF89DE8BD3EC0B9B85325F89A5A
1B172DCF00896C572F225260F8C3F8B5D44CD35F6B09E8C221ABFF6391E81AAA
10C8C6431D308714641276F5D71C2FCACAA87C741977B1924D10F3E4B6115802
5996D4FF7753872CBCCE41CAB45D50FA4368B99A99922959A16FA81BFAB1ACBC
2E924E44F9ABA64E5D66AA87D74765FA135F605F0F57F821991C9DEE289E490E
A0F3E8B81817849A16600514F5C3CCB9E3C0559F66A664B11422D6BE727A09C3
A611595EF9BB11CD768DEC71E8F72213086ECCA7D0F960EF467C75997001BCA9
655F33601ED60824A288F5B23EF44A27412623EB0E1D988D0015EBE9A39EACDD
2BF394250D0CF4B7AD19D82F8081587BBE4D0624A6108064EE546D89B9A61660
25036E8F5C0B159547D8D9B0031E819855EE588E439D0CB1B67D4DD335137629
3AF7F0FFDE6B38A6402ABD46FA8A9E88A076800B0EFE306459C8DAE447EA97A3
B868C13426249730672C67829B5D3446D63B5E3E536B3CF48E29153E837B5D3D
317A87B4F440BC72F4350141C60066D9EA3BDBFF40DD64D9A3722467E454226A
C4035E73F2153448133B70616CD42139330B6ECF857FFB30FDC90FC418290707
6B42CB348B98FB49117A2F1034369B4D0854394D2A29BD63A66A6E02946A8BA0
1344F9445B5638C28D207B2EA5E40CDF7B3F18D2FE45B8A8ADF870557F602E20
80C8BD5172B12CD28F6C6DAC47FDAEBC3C36D322DD7FB5CFD60CEA081544AF51
DFD2545E6092782CB940FBF1272056B6408A58D9EFC0A4C1B4E2AC1C542C8F25
783579964F8138DACF1D07C46753D38102D447A7D43F08C00B31129D93176628
EAD07BFBA2510CC842D79576C1C4E150743EE81668A87CF88E49E8F7B03F4DE1
7545F1ED0073DD2E23BBC6744E90D25670C2A17F9562C87A66E4CC95C39E3A8D
59F8A088AC26209305563EB8A54C1CCDEBE8053D07D6011E4BEE0D7E9466FC55
D1C8624BBC7F5FEF81E4D610ADEAF8FE73605C12AE849FA1DB1948670F1F191A
04948847C17F090389E29449E5853CC27AACFF7FFE4BF8BBFEA260B3C9C230DE
885C2161EE8DE8B2F77710CF695B26645D3CB0EE31E0C061EBECACFF62854883
6B7ACCE40EC01259B7CB7107E1AA85461923601292B3AD31A1E97B6DF6447020
59DE7B4FC13E05052DD6F0F5FD387F2045365D53044F7F9555DA7542C72C1548
693B2F92F78288FB808092CCF9495F256DCE0AA877F2EE918F1F924B30AF274E
F9FB11ACE339F36E0DAA222956E199F7F6DAC75B2642307EF3AA43CBBAEA907B
1770F3F48899EFACB7CD25528E6A00D688700651335E2F4B3786D1FF12248DA6
8396361191B9838BE167CD6FC79E59F69C614C4FC821E7ECC2D4583FE751B751
BBC4F8E45387164160B5ADFC7718A4F50CA78FF6A6FB29D4D5340DE18815709E
F216D8B995605001B70642208E92E7F699E22B748E2FB2974490F2AD0160C0E1
9E9668FC583C4324BF447615D70C6C3A43143F5EF462337E9578D7246EBAA90F
31DA2372E54638677FE4B1D174A3064D4CE8EDEDA456ADC88452A81EFA214A95
6BB8658D0D51D572CAB39A03A6669D91ECCEE09BB11514455DA31B9C07CCCC2A
9A08BEB8C05B16159F32
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.1: CMMI8 1.100
%%CreationDate: 1996 Jul 23 07:53:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 114 /r put
dup 115 /s put
readonly def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
5250011D19E9366EB6FD153D3A100CAA6212E3D5D93990737F8D326D347B7EDC
4391C9DF440285B8FC159D0E98D4258FC57892DDF753642CD526A96ACEDA4120
788F22B1D09F149794E66DD1AC2C2B3BC6FEC59D626F427CD5AE9C54C7F78F62
C36F49B3C2E5E62AFB56DCEE87445A12A942C14AE618D1FE1B11A9CF9FAA1F32
617B598CE5058715EF3051E228F72F651040AD99A741F247C68007E68C84E9D1
D0BF99AA5D777D88A7D3CED2EA67F4AE61E8BC0495E7DA382E82DDB2B009DD63
532C74E3BE5EC555A014BCBB6AB31B8286D7712E0E926F8696830672B8214E9B
5D0740C16ADF0AFD47C4938F373575C6CA91E46D88DE24E682DEC44B57EA8AF8
4E57D45646073250D82C4B50CBBB0B369932618301F3D4186277103B53B3C9E6
DB42D6B30115F67B9D078220D5752644930643BDF9FACF684EBE13E39B65055E
B1BD054C324962025EC79E1D155936FE32D9F2224353F2A46C3558EF216F6BB2
A304BAF752BEEC36C4440B556AEFECF454BA7CBBA7537BCB10EBC21047333A89
8936419D857CD9F59EBA20B0A3D9BA4A0D3395336B4CDA4BA6451B6E4D1370FA
D9BDABB7F271BC1C6C48D9DF1E5A6FAE788F5609DE3C48D47A67097C547D9817
AD3A7CCE2B771843D69F860DA4059A71494281C0AD8D4BAB3F67BB6739723C04
AE05F9E35B2B2CB9C7874C114F57A185C8563C0DCCA93F8096384D71A2994748
A3C7C8B8AF54961A8838AD279441D9A5EB6C1FE26C98BD025F353124DA68A827
AE2AF8D25CA48031C242AA433EEEBB8ABA4B96821786C38BACB5F58C3D5DA011
85B385124DFAE11BA4AB27032F02AB84277DB8B54826D07DCD09A8DE68CCAED4
02A359F787D50D94E89A1455BCD79336971E0B3FD70D95BC07E808A9E52AC2AB
4808A2B164FE81BD29CF03CA3A0C2608B58552A873773B2F55A8BFE1053592CB
A892676B6DA9674B25070915BABBCC8B04F33C521921034EAF181192226F9D6C
7E16E739FE44AF5464287DBA7503422947743A7EDEC7AC4B7ED2CC29FC64BDEB
CABBA67A2B8220AA197474913380D62ADB738401B7E45F5370F1F45B76F89925
0626FEFB1F2DAF5EE01BDBFD557A3F84B991450644BB93598E09BD0163BE6011
1089442492E7EBA18BB655DC1585CEED31450F348A2F012D72DF36AA22BDD1DF
826A434E76A7854AEB4E61FB1CF00659E215BC573D326E2699D382D8725CC0BB
5A0D0320360B09157A46F0E1304092EC28A7154D32AED2DB389A91FD041A53D6
DEC004A5B411630B973D68AF26112255E6B7F4F5D944400E7C5ECEF2F9878561
12C05D0AC149C338B6CE12127296A9A74483FFEED251FF9064C8E2C27C59DF84
1FD995A284CA7E0300BFE7B15811C3F811AF5EEB0AF96CF43B491A8550A9AC16
A941D8599DE53502AC6218003D2AB43B2198341BB32D8649A6959C4ABDE7710A
AF9E4F708996D4F7E3B6BA0F09C9B077621701589D9F04BC0FA80768E597493C
5C741BD85AA6A454A4425E287A2FC2082F6DBD94877AE354A344295F65DCB1EA
FFAFCC48A2365228250A026AF152F894A2C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.1: CMTT10 1.00B
%%CreationDate: 1992 Apr 26 10:42:42
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 36 /dollar put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 56 /eight put
dup 58 /colon put
dup 60 /less put
dup 62 /greater put
dup 83 /S put
dup 92 /backslash put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 123 /braceleft put
dup 125 /braceright put
readonly def
/FontBBox{-4 -235 731 800}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8232429ED8B7CF6A3D879A2D19
38DD5C4467F9DD8C5D1A2000B3A6BF2F25629BAEC199AE8BD4BA6ED9BBF7DABF
D0E153BAB1C17900D4FCE209622ACD19E7C74C2807D0397357ED07AB460D5204
EB3A45B7AC4D106B7303AD8348853032A745F417943F9B4FED652B835AA49727
A8B4117AFF1D4BCE831EB510B6851796D0BE6982B76620CB3CE0C22CACDD4593
F244C14EEC0E5A7C4AC42392F81C01BC4257FE12AF33F4BFEA9108FF11CF9714
4DD6EC70A2C4C1E4F328A1EB25E43525FB1E16C07E28CC359DF61F426B7D41EA
6A0C84DD63275395A503AAE908E1C82D389FD12A21E86999799E7F24A994472E
A10EAE77096709BE0D11AAD24A30D96E15A51D720AFB3B10D2E0AC8DC1A1204B
E8725E00D7E3A96F9978BC19377034D93D080C4391E579C34FF9FC2379CB119F
1E5BBEA91AE20F343C6420BE1E2BD0636B04FCCC0BEE0DC2D56D66F06DB22438
452822CBEAF03EE9EAA8398F276EC0D92A7FB978C17805DB2F4A7DFBA56FD6AF
8670EB364F01DE8FCAFBAF657D68C3A03112915736CEABAA8BA5C0AC25288369
5D49BD891FABEFE8699A0AE3ED85B48ACB22229E15623399C93DE7D935734ADA
DA7A1462C111D44AD53EA35B57E5D0B5FC0B481820E43222DB8EFCD5D30E15F9
BA304FA879392EE0BCC0E1A61E74B3A1FC3A3D170218D7244580C7AA0DC65D19
741FA5FE6F8CBF60250ACC27454BBF0897CA4B909C83A56672958752ED4B5E79
E18660764F155E86F09EFA9F7685F2F5027EC85A775287B30E2069DE4E4D5712
E7D033481A53A2702BA7542C71062173039030CF28D8B9C63B5596A9B42B33E7
D922944A38713383D3648A4AF160A3B0C8F3379BA4372BE2E7EA49AABA75AEEE
C5DDE1D8BF68483C3D21271280ABB91D54CC819680322EAB72E1250A760BC8DA
726405EFE420635B5B7F0B48752C06083E92BDE06401C42A2C528C8A60381227
CEBEF0C9440DC034DAD9C19FB27A350233112B0A339366B7373CE058456E0E1F
139E2DCAA12133B5B6017B0E08E776403F967AF719E0161CDFBF8BBE8490F57E
53C78E97517EF7FB7C00035AE6AB011371D3602FE623A0D5048190237FCBB03D
303C29DA7F6131895D51B25D1A18AFED94F23C439B95A48FA01DA34B5C399EC8
874F529E4AF6303E2C5FA2F74A1935932332501DB49755B7D83FF14DAD2DEC1B
8ACF68A7E4A95223D31B5D2BD10C724ECCC392E98C29986B14D002EBFFC08628
185D92C9EFC1AD7582D711094C0C8B3F1C892370DE073A17C2694E1EB881D533
DC0EEA9B46CC864A36B6E79CC31E5DA986C798E92A93581479A70FAA733D5737
B98F9FBE7654D08BA42B16F8AA06CE5A52DD44840A2CC7D834B3522092360A33
43249D4A6D0DEEA52009D911F1D4C0B03618829C831C20F846FF188746BFC6F6
50D695D48940D0CEB6EFA6CD05424D67863CD8974074F7C7DB644FD190223410
D0D04C0335C84BB0A55EE31B2C3E03ED61EB20D1D6F2D59923FD71790CFAFB19
08140AF489F3FEA5DEC9409A93A56EB309AFA668551700A6A51231708105699C
DF6369ABDDBF40B8B35C4598F9D3BC8930BD71ED5F841E98B6AFE907F8F9A729
5B8B62C2AA656388145B7E236C8CB54F83A077055DFFFFBF1CC4EF367FF08C12
5C13E241EDF2F36467511EA7C12C1F974E42BCB15CB4283FBB50790293FB18CD
6EB571C54B17129D2C9D8D4CD91438496D7F8C8C76D2502BDB72A313860BF117
10119FB26EEF89CB6C1BE98CD87EBDDBE2A1399E8687A90677C02630C6B4D035
FFB258FE67A2DC07DB9BCB57F1F3968F4874D5407C10823B90C01776D7269577
BC07041B903BF631036247C5F7145C7A6CC161432BFD0C3BA60B67F5261361DE
3875523CDFFF0F3EB24CEFF6A3B2D4B1A3BEE1389805124020C9965067149D5B
364451C058073F7AFFACC514035BDBA9B18F88BC06A543E90C419F75C574B0AE
E9002C1F658833963A90B3EE6F470E862A0B9407C3DDF91FCCB04926B712F6FE
648CA825FB57D0735E12C671945DF06DE47BE02AA76BAEABA8C655269765A1DB
15204C2A1B7F7E29FC746131B56AB9DEAA8F7730CB200E310CCB8DB9A53504D0
72D9E3552118220B35150227BE4A3E166619A0945C5BF892C8ACD09D53BED676
932E0B839E2DFBE3AFD512FB39EF4048435424BB0579D0FAC484C6AC81B349A2
5524619ED3DFF8909E6FB911E77F147FE06FB709D50B3DFC388B4DF66397BD06
B8379167CE68E5CDBD1ABCA1A62017D0A285384F7EB956EC002CC60A5B22FA7F
ACC193A9B085EBA7DD980ABF1BB5298998C6A585D7C10FA0C79C86B6D4695599
75E5F789C5E5C4BA2ED519BE9E298EDC406303A0AC7EA9C4532FEDBE72C6BE05
13FAE70AD44F934E3619DC7583872E25EE38E63BD039D99B1271A2957F45B38E
5C1CC6A596BE245DFA6E38A91250DD92A62FCDFE5161394164082AEFA0A230AC
1F2E978234043A1B8727D64A9043CBEEFCDB413A71A431CF35BEC7A6429EAE10
3221982DC26F2D0A0ED5E52770E48FFCEE305C72DAF7FDA390D5DEC9C34A6AA7
B1D50119D72399EF8291343405D3BF343ED43463C34AC43ADB79F72A000E6FB6
E57E3DA2292E7815B6EE68DC71AC72E2773B45B0599D505958BC4770240905C0
2F52891C949947A7761CC00D1C3CE6CF60E7CF65580BCF31E3AEB54378CA33B5
549ED5B3557BF068536DAFD93CA46CE3E20A698A34E2D6FAA5C3AD3F887DD56A
A352B3AC5C96ECEA9973F9906142C36221EE2592BDC52BAFF805D1ED47C6AE3F
3C073F1FB90CDD832704151E4402557FA184773E264C082D287824D5BBA397D8
30DA734071358133A5D52E67A00AA48F96232254C0C6736F1924B7ECCA2EE501
837314D67F8E9227E172731D9AAE9C202C8BFABC88B29D4FB10698693F5A9C0B
70AE81F34DBC7BCBC7EAF7F4DFA2AA84A82F9EB91B208084633BF1A1337A083D
AEA90DD219B0F9A5D802DDFF9B104DC1B243400C782AFD6CBDF3F1B0485D32A3
13B3D13BD0DE1BA262C6106E6BB282DF1C8E20BA2BD1F521D8B202D800F484C2
DAE0EB97F04DEF1B1977910CFCDF5A39D5601FBD330197BEE704D00F2A3B0EB3
E09C14910B4A2EA8C0EB1EB052F32AFFB02F1A61226D80CB096A6B15C3A8106B
C35361E39EE242A6199928A3ABFEC76130B7604A357F979D0D096DA68A04CA40
DF577075B25F132863E3BBF42420C7184EDB5BEDE23BEBBF27DFABFF03459989
256142A653F2F238E9B8BC28FE87C8F51D1E5D22D907873E6E0340B1270E17D6
E945DF3DF86B110818183556E10C7B701EEAA4AFBB11370DDA0AEE454EB55419
C7137B1B85B1D7B7C4E96299F63AB03594649B246A525D41B1EC3FE1AA4AF914
7945B1920B300D7A0988A81DCA3B23274FCE10242CC36B69DEBAF961C48C39AC
B5CA3906621947959203AE63879092B80EEEF35AFE0A37AF07E01D60682C4F60
CE6A1D7385F027275CE8F23BA95DC78AB745D0492D0B981DC24BABED5E8CCF4E
9295A524E4E12A15FDFD46B8B70702F6BC7F59213A7E11141136EF0903897DD9
7397023FCC39820DA264140F196AF0AE3CC9393CBCA5447070B78B24C46B9359
B3645078AD817278209E73722CCD108CC8D6C331E08887B0C53925BAD39F6E5E
D31FC8DA6AEFC5A34566AB5CC6FB0D742F9FEDF0269BF129ACE9B5D303B13F3E
5BB1A2C445ED30C6B98BCF76AB1C6B3B3CAA8C22FC1A2ECB39C234EC17AE0EA2
A7E1103753F38DDA13312C4385FA83A6352E810024706A3D545FE4F36CC2912E
36CD4364051C6A9419EA61DC36DC2167177A2C86209F6A0D15EAFF0A20F836FE
82CC393E3E1B2B7A4089213B9A6D29A16B7957D32F0A152E3643260F8BB42CD5
0F295B7B4AB2C47C4B598EC394F15441EAC2A04FF63BAED23C3D1DE1612FB29E
052DB6DF6016699D3FD3E42F2B26ED4F88EC64BACDE46A783995EAB7B7D675EC
C9A8D3D5168C6BEC09886DFF729D4467C7A3DA6C5E18BF9962163602993EA6FB
8D78A88B7A6CFC3124C610964EDE99825EA96CFE40717E543FFF2C1C420D5ECA
B440E276978D90357CE6036B245306E21CAEAF0F6598811AB88387EFCC7B90D6
3B108E9B9949B458CB21EC6CD67B42D1E0A73A28810008FE2729747742E8D889
D1E34851EB5217CF0B17CC6D0ED0ED38E96F74593823FBD05CFB4B7751087939
9274F52E35787235F41D70F0033389C6CC9BFA85A3A2F2DE870B6320E1C257B1
8C32EA2F7B48E0F9CA620AD053F6680A1AE475C26B2926F76945D25BD40690AC
28D9842116CC472D7BE66A4E778D9CDBD42BD609B5F738F429A14F52AB915F91
2412BF62C4AAFF5D5E69A6C23C35C8158912963FD8B7C3E01EE52CBCBF646D46
84AC46304048E4F95FC803DD9F321E5BC17124DF1BCE1DF10CCBDFCD369147F6
DB1797403041A46BA519E9FA01176A91469EA7789370440063A0689935A12C68
7AD02E53EFB5418B084E23CFA8CD6CA147FAE2F43E3F5F7946932460DBF826B5
E50AF1B8515E852A8FADA67546A136F8088197DD8B98AFED949894744C7E995C
DB4022343808BE2ACFE1B71C11DC5B758484D5BD57169D50C4CA5E34D693A461
EF89F40EE2F085DDCEA346A6A65D727469142F266837D11C5F9A4E7C967CF2CD
DC349C55A9F3D7D0D9995D88C24E1F7A2A3D6EDE9B193D7F01625AC361715C19
38952B89489DB501F655D5E7A3ACBC0331D7791769B3C4D1B608FB4FE9557A16
C22776F4F5782BD88C39A3A86EA9B9F1EAF9313C7177AA02E90FD516C2454C72
F943C29D7CF494823508BC35751E51E2C60B6D7F29F4943B0217F087E9C1CD37
C26D6569EBA882FE6BCC97FF99CC8DB799558C5912BD8938E0FA6EF160C066C5
895AE6BA202A565A0EEBB816AB354D16C321C299FEB464FDB9AA8946C0946545
71934726713F986394A0FE2BB2603AE595334E90B55027276D5647615472E16B
D445556B94243AFBE5332317365FAEC52E9EF3DE3E4454A6C9654078D03C80FF
AF3357B4F7D23CF51B12C7B62EB48F220DD88C4AA364831863A498689E997D2A
00E8DB7B7A7995CA88445E5EBE5DF5BF1B6FCDE39B9D9F4D5B4D9AF8BEFB9164
C88440D9BF2DB7E3C897681E2DD0FA007337FFABB2FD5DCBD48C392E84833429
1B94C5EF2B19C47369BE1523CF191C451A2CC4456EE7FB2D0CDB2A8072E7ADC7
5B301C601F6075254E157917E9CE2DD3E1514A53F131B2EBA9CFC0DABFB52AFA
7260E78757EDED49278B081DB2D2F030A517DB42F010333FD6E7393DA2E4487F
10F3DC1B94CF56EDBC7E1D855E588798540F1C2E7E24B8DDD8556038A843DBC6
E440A64125B43C73CF8EC8CBF5B433B694387BC14F376B61726C9280DCF573F6
A2EA0A7C97D805F9BF3F9779BA9330DB04B83EAF6E6FF201628B503CFE9EF63E
3B2AF45540DFD0E601AC94A46380AEB790848E99457F21377F2BD8C95ED05148
D86A18DA3E345B3792C1F3F12C8AE5525E87A5AAAAD05850CD82F3BD8F6B9A2A
20B4F1C728FB6537B7A5A4C778E2999D52409DC3677010AF2C2AFD5E96EBE978
9B89FD1287CA014C8D793B178DE0C3A311B3141A7A50ACB80C627BA78631FE02
EB99B414C4FF79B3EAB4927955A0303E99575123FF347D04A32AC8B04EB9176A
D2B6EDC40E5B210F3C232802AA354A0D6ED1DEB1BA073FD7CB1B2B323BB37188
B2E08227D12B88035089B5478CAAD3D6339EC069253A72D5620982D4F86A2C2E
922D7F0DA8EE340A31A162C6199EFD70B3726BA5371BABDAD5F4902F8385BAE6
08267093D5C1F14E693BD57C7DC882A0EBD7BF55EF6AF1856373B26DF9EF0D60
94EE94EB399C2C9AB699978EF72E898642C89B909E61315594D5DA11647CC6F1
DCF305CE178B69B77733609E7044B8849E5CA5DBB6B3BFC696275BA4673901F1
052C03439131AAC4E641D7EBE715AFA69CF5A7BBE40B7ADBB35E2F9FDD47DDD8
499A8D00EC37D9F461D8E55A64F0F8ED0CE1030B3F199EE252EC5AEFE63ADC96
888CFCF0A3C014F342F2CBA9791AD46877FC4F76681634B09283BCF3E65C31EB
45E2516B441370C572DDCBE9F879775FBE6B3001623825E1E3357B27DD1CC00B
1673E15BC457A811B0210137347589C2B7EBFF7D0A406BD1BACBF5417CD2F59F
6C7F1A281DB99E80D98A2267B49D789DCF3C525E980DD677C1C5C84BF10BF285
1623B7B395D4E2A4328B5F1B60C962C14AD1AECC6BA26323066AC989D1255126
56B3DF30EBCB287E9CE94421B6D42ECD6B694E0273A9B13E4C2DB96857156114
7F5672F218336DCBC4ED308ED49E4EEA2760CA25DAB38B9AA60E0AD40713CB89
30FA984E0449E40A7674B418E279575D85554B4A1DBCE5737479615D7B26E006
3F2FAC06F165F43197E12883747B74D424F0E60F20AE54A92F83BD956C6CB132
0A62985F49B63A62152F9CBCFA0D904E1C047A27CEE7B395389EED834BBF4E54
2EF4CFB9D5E68AE5DAFE44E18EC4F767E4A191739C0643F80E49A0E411B5CCC6
12F6A25391C90BE2152EF2601DC897B2DAF554ADE803D2EEF565D320122B3DCA
7EA25E225764C03B6E9F6EC42FFB59E5C87A3B8F7BA8EC9A6C5DC3F4D5D08C04
A3A651D2C92674DC5D834438583F310B939A3559BDEEDB3AB2254E7A9C8D57EA
B9661CD17079ABEDAAE5A2CCBB08F70AD14C22D35E4E32516A789798A83AC723
32002E1549F1F5095739DE6030DD235AB23CB539BEE9C81911B95E7843F84F71
24F0AD3C4E6A52845F97D44B43D3328280B5A803D54951AF67283ED996130A24
7A32C080E8206B1830523C6886DD11E45756F44459E7DE5228E1EA7A69F5F297
72FC5726C0DF5438B94F7739A5FF53D78FF6137588838806728D2FFF33396214
76BB8634EDA49A5AFE9CC6DD5F64C20A5FC27FB06879E3BBE5134A26A191D914
07DB5A7812BEC8DC1351DC7BA58338D71425962998422C3ECBFBE1396E483916
39E7E762D770C584A73B38F62D8CC5F38CD63EB1AE2CC0BD6CFB323F9ABB82F4
564CAB0A82B91914806961C28176A96ACE2A9D03D659F0BE42DDBA8FBAF4D043
30D7F9B5CEC967E54ADBCD5222DC771D3E0E829D05ECB7C0B004628EB2D50678
7E04ED1267A07BD12FBD63D3CF817890B10E07EEA70EC8CDE5F2D8E7A54ED04F
A7C313A6833E5A70AAD8437E0F45F959CF3B32A2BD668B48A674CCEB7C7660DF
3A068028B3949675E65AE01A9CA59A012EECBFB99F19162731EF270AB209A55B
659D8536DC277D05FFEC1979E614BE944A8298D8C3B06D793148A8090A86CA5E
7578C89D1759022E90966244666CD180635BB2294B5D6971ACFCAFDF73F04E28
BB9F37DE64709252871EB90764F5640DA208B74D77F8D7C1671BF61DF261CE1A
EE797D04D87E6D6EBD23424C7E2E8C6A87221C8942D4F8E1476798CED6523231
5581BDAB8562A51F48CC869C99AFE4BC07E01F74AD18AF07945FC2CFE4648B61
96081439608F44C35AF4A0C243C02D714506B0E71A8788F40C0A019822DBB389
29488571A5A64F6C6CB514E84CF29488EE0F83D1864F33C0877481838D089AD5
C0C99D5903FA447255A9FAAC1552763A94CF2EDB257AD00ACA51DE5A80B388B8
28EA39B1D8164CA7C3D44B449424228A0512CF04C75A473A0C6C62AAC81F97C3
C55CAC1BE865D9295065B732287DD9026DB89CB969A3E2DC9363410D047CA7C0
F8FCE3C2B22343A0FFF79669C569BEED63342C36F7956BF3C07ED2487A9B22E7
09BABD6F53B9643FD82365D9948132EF4A428D0368B9D6FE2316E0B777F0E771
612C135E10FD66F19C3A12405A44BC47352B94C18698EA1D615C2043B1E379F2
B171B316A95B0832B41D6ABC3BA93CE09A8D4C151776540E6206B075B47317DC
2081EACFE7384E0555AAC64E42766B0E9BE4EF32BEFEF14BD1B3E7AA872F5B8B
7A70FFCFA5542AF65EADE92C3F202F8AC99B5D7CE5C59587F71922D1FB3E9A82
D0A11E0E23148EBCEE75C86C9643D3943290B50A87B921F4435C392502EF068D
1797F4C298F90BFF1EA27396463767C23C96F2CDDD561D6BBA33C7D02B7378B5
FE92E48F39526BAB0C2946859C5453C8FFDDE3C120D989A23D71DF59AAF95D69
94B1EF5FDF61F0A16B391C64B4A61535D6FE035A17BA560D5E160CDD04A5A8B8
93147C177926B555D5711D84D2754B21B7C670D52CC2B99CF7035091088FD5C3
640E1E54DFADA22D6FF99C336F209D90C573A7CEE690F4474D014D7433AFC272
15A88657D85C4B545699AE3429BD9EFB6A68D256F53949FC9E364FFC5B668DBA
B3F36EB338991937F9FFFA3A22B50C1342EEA60AD40116B72A0B4821BC955F0D
98D60B90616AF135AA8406742827CD1871AB08DE158DEC23BD2FAD2E68B6B71F
6489D532395FB2806909C696D9791AF1BEBF488D176500F15D4E77723F0F73C1
67018AD301FF94F75C7327C9C85FFCCA1ECB5E9BECB838525A6824454C2866D4
D713A3E9DC3C6131D45138BF411F6C0DB8197421C561048589EDA895C6BD01C0
F063D48D8CD1E32986C56AEF1CABD446B0373FE88FAE7C9347C626F8EC959C33
C609D69E7F42A5C117DFB7FC4258FF0EC2DF5EA3965FB7D0755C45CC727521A6
B3DF60D88F93225945F1D2B19E74D42ACBA8FEC61C0086313700ADFD14083CEF
C442A721FDFBB985FAB1414A737B260ED3E20F742B9F227D65F0F563E95050E1
6F911DD78B52232109CAA6A44791AE9215C5A9EE99644EA33AC158B7D8EE966F
381E07437D0D70E5FC5CE944CE451010180EED5D5B1A8E80D0A3CA9A39417C1B
53FFADB6E3E3AFB26AA5A1798528C621B5764B87D3C275BC635620F3C77295F4
8DBC19AD1F0ED5DF491B34B02EB6A5A0C3DAF9A1432E4D3A817F9D23128D86AF
141F8BEA00EDB09B7975CB84BEFD3193571F68361EB70F1E2B1A233EFDD16C98
F58A77E7005EDBEEC6A73ABB110DC55993B7C3A01FA0BF9C46997512CA58D81C
A7BB5D7C5AE114A2529292B3E76550046E16A6137839283B8AF87D22C0D1D340
A228995307029702805091C4659B54F08448BADCCE7E055C49A8482842587106
39B0F197D7B8B4A7F2936BF17F579CC0E7581309B6C0FB0F65328F6EEDDB9319
89E01C10B8F95B79BD0DE38805A6C53464CACD5C63D766FE9554FF0F2588B4E3
CD4BCF6D843CC2D1DBE748548B41FAC4CA73FE3376E166F7F43A6A91176C3218
1296B10B8AB53F60C9511B4FC1A74E8ABFA30AFB6D9D38084499B9CBDF1CBC2A
E18D64B9F4B71643789C2C13A6E86AC6F31BF2B3C3B164948ED807081EC6E734
728AE9392271D16622BF720F2E20201147812F2B9292CFAAA028C7D4E99F2E53
F93A89ADA3F41B67C99735628D369727F0EEBE37BD36299D124A767745231B3B
B325F9D24C7454596FA8FC22DA22C4BD8DFA348706802E50F0D031B1EA086A98
F9697A147B649F96E33B1549FB63BEA01B80D80F13E0719BD0CCD00CB542123B
01F56B2FCA1CB099DEA16DD4D7D7AE8B86B1180AEA20E7F1546F31339C6EB240
99CDEEA112252CF386F489B14A2B953D676C39FA8F8856180E887CB76B923928
3D34453D6B93EC1E842D1FBF8F582C4B7F0F03C852879BBEBCB192318FC7DE1E
324341DE14CB2750CDE31D144380FDA9287D9A803ADDAF8B95D77A5306AE59A8
7916CB5B4C1BA5E91CF5123E48B3F6F1FF7C1F581E2384CF77E2772A2B8915C6
6541761A9573CC362B30D0DB0DCEF3892C8E05FD3137664165CDCA31A6A81683
0EBF242F9AD5BEF47678D6C41828D6043CB4A0EDABFB4D17D8AFDA6E4A0E0759
36EEEA85
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 65 /A put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B37E3B28A576
63AA7809F0B8718E326C6FF69921143563A570EA8AF7342034B9C0AF96ECC80A
0897C2DC69B2685B5723ACF1CC40504C46BB76141A96756BAF384E760D78173D
7543502AC8CBB741528DDD3671B012CA2D08B4B58D76A1050EC68CE5F04081E9
15B1682695AAC559E1B6AD6D2485935D192764852E8AA3B02DF1284673EFD8D5
68157A281D4E7D4DFF9EB233853325705E5C4A199B5A5E863A58685A305F9F75
D3B1D2CA142051424558FA7C785DACC1054AA37773B48E5B704DE133E788A868
8CE5B4674EF1368CCDFED8B77751B00C9E869F7EA17ECB9BDE26BD219D42E644
E76A6CE535C49F7066AC68531DBCD7D4249E95CC1AB45A19E71B31AE887214BB
970FE9EC54A35E5AE50DBBE23E9C630949B0CC89EB94063D18267BE054409B00
873E0027BC79252FAD424C46C772C9209821C81E047793F7165882AAB33A17C7
BE5773541EF5A62ED656FC6C355A54393726FBF3CF738A2D60D97F0027B1617D
97E1C031D804C677083F76CD92F404E336EC4FC0098099DBDBE20AB4CBA355FF
EDC6364E708F85A2275EE5E6A5F519D300882AFDBC273CDA2B6EB4F1FB600CCB
7FD33720D685A8A97560800C1FDAD3A192BB95DF4C13280176CABA40E06F6E41
71B4D121ABD0A36AA591AD769CA3A69B2E9724AD347294B90AC06B0E5A0BECD2
79C20C3F537223EEB8C870303CEF675BC1C16CE5CAA30AE9999BFA3CE2DBC17C
B38F7F30DE138780C8E30999A03F2F7D9E211E27BB71D6346F1087DA7EF48459
DE3BC6849FA225A7C686AAF0B953E30B23FBCDBDF4F26A8AEBF40EAC48386E99
C95D0D322A619A51E0B7E1F91694B43B2AFFAB3CE1413A75DF7B9F903A006846
9542DEE3D32E169F3BE6202EEA186FA6210E30AA92F4A545AC42C9FC5A23E68B
103A96BBD1CADBFADA7A4AA94631FF01B7BB3BC8949972B64794500E58CD7FE2
2D06702169CB2A71AAD58AE010D2D8F388E3C62D9A8EE8AC13EB1F7AEAB11AE1
1EC91E96A8451571433FBA74F7763F96B3ACC966AE2CE6A3EA631BB4330644AA
7A80972354B2981AED664BEA8CFC3FE35A0D88EFB8FF859B1E6483FA77B8B776
A60808257FB1C74C7F7C15EF0800E67E5109E5AF418B6AB2CC77080FE59B508B
4242C3CB75878FC439EB4004710C70A431196CEE15E3B87C43AB25F6B6988111
E85F2D8FAAE4A7A3AD2701FC6047E74EAA81934FE399BB055DE128C4A8654119
705A7D274F1DB4021E8AD1D4C342B63CF76F3FC9BDAFA2ABCC3D235C85B39B01
AA9DA31E9F9F21EA5377827E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.1: CMCSC10 1.0
%%CreationDate: 1991 Aug 18 17:46:49
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMCSC10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 120 /x put
readonly def
/FontBBox{14 -250 1077 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A30EB76029337
900ECFB1390CA5C0C3A04528044F266BA17BE487C79B94FAC6D6484684C5BFEA
87BCCC77D40AD11552035E95E3007126418ED49B68468B38A14E88E68A267B98
076F1C9769A5AFBC285E5B158EAC9F926F1D6C0B8F1D57D9C31D25AE27123518
9D2CD92E5689E0213089BD268DA5E47525CB8EABAA4B78A15AEA34705889AB3A
FFB8953B5B3482E52BFA0940630ADF8C0AC2177D907324299EE980E850F203CD
B627962F43D5A678C44243CDE97853BDC6AB45FD5C09AD274DAF89929F583CC9
CCC24BDFC68B92111055ABA5F26D2DC67C70906F71C2957701D65AE746A60C30
40E6CB24B97FCDAD0487AE38A201FBF0E41BABD2181981A71940F1E707F91E5D
C8CA50CB16D8702D188E56D014D92F76CE0B52ABDB9110E32438D2BBF3E6A40B
7B005F10BB437812CAC6ED2996F7606DC962C4FDE207FF322782C343DF44CEC5
FF06A55C630C20E9AE1B0D1C5673753C43BA0767D65D1B451CC6380D8BB3C4DC
81E8FD8AA79BE993218686F29D3CD925566DD587F541A0DA1B1CC3BCEA2E6C7D
5E1016F6917A871F1BBAD96AF9E867735017119A381FCF33EB2D3E1E7093FD90
CDB0CED4818CFD9E201A03430CEC713620BE0D3254158931FB657C6AD4B2482A
0E7D070D7497892E9E942DF58E88CAF0C8221BF36BF7C435BF2C683A4A2EF4CB
E85820A8AD3486155A40143011BA9D76297F46DEF69ECA4596D6E4CAABF84091
22A96A4BC78A8DD072FEB759A68A44BE1164638B6D952147EE3C628F9A022060
1D1941E73310943FA782532ABB1116532AD67AEFE0758C051241E301C7E13A98
6447EB0180BF6799814BEA4DC0F727D0A40B7BC3B1269CDE174453D6A3C4479C
146001CF717DE25AC1BE5AEA5F2F1C17719251C429D3AED19EF8CC452EF46206
6FE4498BD6565F613B96FDD9E383F3B22FAA57F9906BD530034036C10E07E691
C36065F8F04058ABCFF1DF3633B0453A833D13CFF3C7D44655FAB581E9970A93
BB7E7F16AC4A48CB5F0CA3A08AADC8FAE8E75605152C9980A4072FA022634703
E7C311894659E4E42074A88CA8B759A48039E7D4B18397C1DE04F0BF82EB3FD6
0E69D792F12BB80207B34D38EB640A708A000519A9D74E595AB4E4BA72DF6B55
2D6280EC93DA7CA5F756B4595AEB8A63D88FDA6C758BD181F452E316D755CBFD
0A2F30E5EA1EE6B3091D7342BEAF85857872C107B668422691BD9F7CD20CC3BD
3A657F78013DEDC819CE7A12B222BCD656999FB32D462C2E384E36DEC5621007
617E7616FF71E88690DB1BA5D1571485F5FE2DAE4A69DF2A5DB8F7C9A90D9BEA
F41EAED29E54A87FA555AD4BC428968B9D6C11978B4372E2038C6C72FA19DC7F
099BCACB940F8F60827A1BB3082A433FAC63F64DC98DFD209EFDD6433ACF81E3
8116AB4443A30B2FAC331A4C8E1B3307D1C0291C5158F8EAAD8DF9A58977326E
D1E441ACA44F9E63B5B27DC13E0840B345BB1DA7DC626A6D85A5BBEC8C32AF78
F2E69B8421B84F637D4981EEFBBB19BD0FA10D8E2E3F25A171A839BA5FB4698C
56A4EFBA6BE73A471AEBB3EC239254E949D4FE73A6E1B87AF7664AAF0D769DD0
3EAE4876504363D0A2C6682F21C422D9D29CEA4A082B0A5B98878FC496114A42
947012DAB0CC56FE96FB8489FCBE3AEC130439A7C884B42637A059CB1D765DA2
7F1F1E7F638C91E45F5F46F7E7CC61350642BBF626A539EF2C24A1E243041003
3EFBC71F7D8FEB86085837D28262901F8A8DC66B5B1DE9E4F7F2272E6DB75D9B
28624D860A56611CE84DC45C6EEEFB7A9F0142E910EE0D22C284818DEE0330C0
17BEFD71CB2004950A90BEBDB453BF0197CBACD846654A3D6F4165757D9057AC
C936459F43C65AF2419F5CC5900AEDC9B6509C7A077D207E5A496DBFE2085012
164A3320C3910C49DF0E41C4267C70391D253473465FF050DB47C216E3192BD3
111B470C95A75E7749315FCEC3038484FDA276B6740909966FC21C94BF5F65F6
A9CFA7AED0FFCB2F2266108C72635B1831D7D23A5C2C03C5D78221F658C0E3B3
2F6B46318289FB6FFCEBF758DB39E05240BD0806DA48E1CE9F58C5C15749B030
FB1D9E8ED86D786F63F400B23ADC1C07BE208E33FB792D34FA58877F0A2BB554
D44ADD7920537BEFFDA1A0B05051F1172361FBBE6B8F3E93B3D10D968E429F12
8C38499C0DC46F0964723C38775B3E168744F72D6AE89D4D6628ED7D736D6FDC
573B032BF30FB0C7677F327F7105694F623156AB19CE1F2799E6C150EAD335C8
5ED54124F3D28677DC3DC0387321D948CD556AFACB82FC2B788DE61EA25D374D
42C9A6F7FD79395117D7A797F5C5C81F2E2A56E52BFF11A63E8A766BADB851DC
35B2813181709FA81ADB0A75F38C4D72F3AE8E08F770D394796953920F57D44F
BE3DC509B8D579D8328499041044A274D815FF808C4B2E30202055C6D2A0A53E
22C57D4C3E895348C2BC189D010CC62BB4569AD6B7AD97175DAB155B401AD287
95CB3484EA324BCCA26F11D472BDB4928B36050CE7575052845851FA4D8ADA7B
ACECEC287204DE699E041ED51DCFB4651ECDC2FAE06BB7EA0EB2F2BE6BE838BB
EEF296096EC95B3A4391791F1C8F0DEF93378C1292A5F6D8E62329FB0A667F34
D001A9E24F8441CDD197CEFD9862C96AC34F8F4D62C676C35990EBFD8FAE5ECE
5ABDC9BAA75CD36F1D7D3A3B7D112053474C082A6B5C66BC2FB82B9DCA71B847
27DC72E9D4838C786B8932476F5157D87325E904E43A13C977F3E260B0542681
81868618D8FF1D29BB1CADD3700DA382BA4C1AF50582834B5D5976EA56F2CDC4
3029A11CA03649E6694A2EB00935E4D024108196E328010AA262EFECB64D43EE
E4BD56BFDBA51C74D946EE7D8AD6AE5879E40EE31F4EBFB15640449173B7E872
D6F0EE3B636CE0EEE3DAFC4805A35FF1E88758EE8E3BF8AD9EBF8FDC699BDA03
25CC18FCF35F5D0F4A2ED4DCC13166F90D20B914990C765C0114B48AFBCF94D4
F2CB223CD260DDEEE1D4204B671DB3EC5A683500393B1D9E3253F4C3B26D3D43
3CC7472C61EFED1EB673F7BBD1ECFF6D8315FF054AE874BB0D12C869A28FEC55
EA812D07674237DF6CA1E4D39A934FE6CC7CC5A826B16EB11503F63FD0C6388A
453A2C7916DDA5FBF7B5254977CCA87E881F4185AFD0996E2A05745C1BB0C6FA
A90CA644132339D35EEEEC5DD2928730333718D4C3350E7BDFFB0E9C8A9E2C1D
7FD0A3C50E9E3FB942F215F8C28359B5C5DC6A280E619622671E55606C5CE5A9
EA26E875CE62C573C1512187914D00BB29B3DF8E7E266C4540C38937F4A5817A
89A33361C0DD3E5C708CDA0AF9285293B9E0B6D67E120F8DAFB1F4452DB01234
A8ECD8495B324ECB6EF58EA2F5F641F4B29131397AC76F521A588B568B8523F3
ABE4C28F2D611E9543F5E30F613D20C51452D7754BBF76C6ABD23BC86708F297
5197E73721A52DB086CE5B727694E64C8CCB27F0F6E53D0DE30C0D8E503FC7B7
61FC180412549A25F7FC46F8E1F91E625C377662FB4ECB0AB707C14442EE9DB2
7EABBC2263573C0F1243EA32396AE1D76CD7A3B6094048C95CAD1F1DBDC11A34
1047693B6A5AA39AD223439D91C6BEEA8FB5170C09FF3FD12228FABA688F050E
C23A911CA2B15CA9B5CFDF20429D92E8CE04017489347A8AEBE389D00F416E19
FE361F891577CE5312C222E7F9F63A0B777E5BA3D91DC3606CBD554189859FD9
EDB5832875B9830975B087E28F621B6F1107465C79758C2A500CD06EE2E89F37
E2EA1D1C639C3CA67FF7F39B181F938327A502F858DC00947454D68ABFE4CDC4
7E6B3170AB2B0D10CCA52EB5B05E7F7E598AF467A6D97B38
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 127 /dieresis put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AEBE7F8967630A40E00F8C1
3054F2BE2768682E50D0B43E3CE3897D9EE7257E77F9894CD4395C21585D16F8
AEFE05217ED4F0371C96EDEC11B2330ABBB5A7964685AF858407C63473931277
82533214A55E3D1AFDF27146CC5D6F0214A6AA8EF53CF7C8124DB0C04FD8E749
DBA0FFB2C835C9A1809435FEF402FE317FAB705146DA13AADA0A332A2D13DB4C
F161032523F50D95766B92722E0EC4D4FC70E03D37FF16DD1DFC964B4C2760B3
971946EAA6DA151BD4CD48E55E625906298C0EF964EB110B540C82CE4A83C0A4
567FE859EBDFE766B5F569BE4F25923AEFDB5E6050B8620A70BB1321CCEAFDAC
D080AF068F7A1CDE18315BD694C60B1DC71E563345AE867EC3032919647C526C
614C58D6AD766FAE21383E28B5CC356AFE8A65CFEDCFE66AA08577F57FB33DCD
70B95DAA2BE74370ED1126C83BBC77655DC7D7D4A7FEA88C6605EDAD56033F0B
B99D37280B3EB6A6DC32BA46287CFBEE3C2D73A30763A21D9A03ECA611A34219
2EC9F9B1C9EBE707DA44DCECCE04B87550B6AF57B2298C0AB3CB983A5FB15357
E21C166E3EDBD89612C4160EB0AE054CB123309213CADA601A8A708EF3D3BDAC
55C32A58B5020AE5DD50FFC2FCDAB71779792C3FDE557188B2EBF31BD69CC0DA
47DB2C9C08882B8A495A463B8D71340866FB55664AA7D6B3A86051FE90274823
6E801CEF6ED56E80B6967AA7EBEB8C0CD3982B0E923FA3E4D63E53E308B8A5AA
AEEF347AE1DDD001FA38AE1A3440C563E7FFF8F30D9B4F4EE73688DCCE5E5D50
4EF495A6B5D5A019C09AE05B9BA0D7E90197A12DC144FF69C587FA522DD0A91E
73100D8E90B10BCB7312F18C3C49C00E43520534F99C00A9EF47FDFE2F05C317
E60CD8763C0CA2B566F5FA87B4BE7F900EA5F395E31FCE983C46C6D4CAD42205
8750BC7E6ED2745A0749FAEBCB3A0C69A2301C9022FE64C5080623B6559C78E2
6D5A59E299CFF9AFA6C18C7F507F5D8CEA076E5EBC13013EF138455277594047
40EDC76E9C2189AD99A9FA33ADD11F46BAD8154825C9B29A6A2A01004FE50719
9363F1904E950F101C3386F7575B977E89096ED5A2FCB481EC493BB58736EA22
CCBDBDB5C7ABF5E62A4C48223B66FE6A198AA935139F711B26BFCAC3915932AB
AECF883FE2A1C17F05A532B39DED76659E03AF367F94186303E55D037D23057D
5F9BC005179F8025EF11DED9FAD5A9DC7395D2F0B853CE16A5BC3786DCAAD13C
FE695C2D910864587185025B080F90B492DC132DABC4DFC240592B5E8A98533E
05288385EA1126F69077E286A1F220A7B0FF0C8B19399A87455EB47D2924CA57
EC727F6F4CE608854F30895FC2D1A719D41C6C889BDC520B44C56CF9DE04686C
2C5567686AB06C9D801280ADC14A84946806233C4B39B2B969E6F97BC1322774
9B3F20115E814C7868FFD7CA78513FEE0C051874D83F9207145ACD7960CD8805
A90F740565BE8E0C674BE0CD98426FCD7D3D959838DBABB86D6A7513B5E8701A
6961305A9B3DE47D162ED3C09D7DC44282A2CE20A83722C0B6AC6788AFF80564
4218D4CC5E5D005A86A6B2CA7050B483392B2645C6CB40BD159684AD3CB55AB8
1E4ADD8B7EAC389C0D69CB5EFEB22AB9AA388992BFEAEC90252BB3CEFD92C270
5243746A96CF48467E38CAA7B5C72A03EC41A83432B86AA36691BAC9AE2585DF
D3EE0693A65F96725CE1CFB2B8187B7445D768539772FFA5271F0320199A7ED6
13064CC8DA8E77391B82DD1267EEC8A7C71D3FB17F045B0BC73D45D080CCC5AF
4BE0919868BDA75C92B1450BA6E433663C1E836D8D00DB3E1A4EDCE6998CAF1E
01D535183A7E102ECF039A479FC1D223BFCEC1F5DB64CDCDCA0377325378324E
8FAA4116CCC9A3704EEA3E2EBF0CAFF85B68366B3DD0C64DE26486AB3D1FFE9E
8E87EA9BF165AAFD780CFE55B524920845A492B53DA117F9DF2CD483AF644C7E
B82ED04E0CD7FDC0BD63BD9195BF3F9A36CA9E9FCED9D2EAAB8D82623D802914
9DBD12866C2825EFBF5604876BB5BBE36A92BD8BE9639E68B321EA52AD8CAF59
C04A56BD0CB3C0838C802DD63F0AED05A3BF1E501E5CA0A0C38343396C8AD7C7
7FB14B600A1BBD27946216B049CDC0A44FB456A5F26F0D1507B4C0357BCA962C
0E9325BF282C0C47135181CCD47F58CD5F18CA13DD8BE37C79E24950C5AA1986
25B4E53BD750DA41DE280B5AC046AF3B98D156686CD9E5BCCE2EB4BE9E769553
112630BA1830359D30CD669724CEEE10F56ED195FF0CF3715C6A03AACC2C50C5
7323945067C5C18E587D81929ADCEDF36538BB7A269C600D0F9C50477F6E1915
60D3D70B7ADE277DAA04D4169B4F2D1B026E1BC5FD22F33F53018792DCE0C5F9
949EE7E11370D325D3EF1B6602A5AF771459CF0B4C83117C047DD5C9B45A8569
67364D3F7780FC6231218935738627124C938689E3AF6AF93E7D332129F15D94
0AA78BD4667FC16450E067876847E6855A8E7ABF9C99D1911CD6771D067BF9C8
0CC1184AD1CE56697D09143BDC041E1B1B327CCDE79BC7B2A8B334422A1F3775
7C3D2904A4459BC98E16B1E87D09D39D4127FBD6DF788EC14EEECB18D0109727
822DCB96D84EF9B5A51B037D576CBA9A6106743186B1EDDADD7F72D4B5CA2DC5
1A417CF910F3D5561A0E0F46365D1EF1D60E88788A2668844F57DAFF0384A16B
7F839BF9F57260D7241841E8DAFEBFF899163AF1E3C81A4325E41C42698406BE
34A19A4C94BE3B78C99E5B20A11CB6A3B56DA5C90A89468900211F3F9393290C
A52E9087D5FB6D104B9D3B63E3D611323C16ED46E75811D17924B7A85EBDC3CD
DB4497816698F620D5C9C8C6DC33C1FB2BBB59F1995BADAC2187D9D6BFF8F119
C207DEF0F8EC4C52E59E4081E65DEDB7588990AE8D98E1D9A1F8B5777FB28191
55DE6D5A690EC89174964D2524E480CD061D091412D47C21B3CF20DD9690196D
6852E634B592F0E970808E79ADBB1C5DE8A252FB848E43D283139A485667F954
55296B6105804044F9A0ECE545225BE0887E32CCB10F2A08F46207AE14A73E6B
F3ED672360316C5339C128EEDC581B74D0C4F6BEFCEEF24CD37D8D77817AF9A2
ED03708616548BBC2FC0F91073A7C860C002C837F57C3ACAFC79116432688EC1
5549D9F3A7A225BF06666767B1E0B09680BCE3A2B5C7A33D35F0C2696D847C24
0C52ACB9FE8ABFCDBC04859A10133B9FF972B38A61A75EB286DDB17321E727B2
82766C73C139E2980D5AE879C5453E0D68641AE7307DB530AF0AD84372979E9B
3B62D5B09AC8CA7AF91FA78CCAEBCC2F3D704E45178801897EB544360BD3C84A
F19EA31C4A46D76450004F514698B92E3AA3CCBAB17A41A8205F3B33B17E0C30
14265D820FC770865D5BC80FA83DD972579AEBE0205E6CCE038F95FBD8ADC72F
D3DC88C2D479D0583D9FF635CC27BEC967FF7D0DEA24C84AD6E0547FAE4AAC51
20811C786764A67272770A97750C5AF0675E08B7675D41F42FABA9D93B2C0C3E
56137A3639C6A8BDFAD2D70215513484E0B2C625244D994256CA5014DCA6BDA3
FCA351A40B81DD522CC3454D3DE6802F87451423391DFFB23C12CFED60F928B0
10FD4A39E80336EE496B2855B58A9E2536249976CF638DFF557886518E2EA51B
48B814953643A3FA18562F14E5846975895AF77F6A3630204270644A047FAAD1
961A13F3302FB7E836D28E68DB712306D453CB0923E8D3AEFC04F198376E777E
ED24E2113887A5FDFD89239FE6166971FAAC5FF14D05127D2DEEB6A6B0FBC74B
768D8410A634A63CC31B9AD36A3221166F9975DF7AB2E16132EC62BD0A2AD69E
A1AECAB65F850E26BF29AB0A8DA35B5038E0F3F7FE9771549C50130DB3A2E6CA
A1BE8BA10855796FED0F185DEF3948EB9D54C8A2FF50887B62D3F3E63DDF461D
9B33D39D2ABAC7648602A44520E1C6403F80CC79154CDF2F548DECE1C1A52605
362B159A1111CD89E38C609AB786617C7CE6D8721F9304ED835B8E78342E9E11
F913B8E7E25331E5FBFA296E871F43947D638044EB15033AF6C376AEB94FB360
EAD1C07128509ACFB8DEE88DB355A0DB19217625842596C5BB27E4CAC1D1542E
66A6096145007775369588D2C68DB4602B64EC3580B190B2E5C53CFFF0C3D3A3
C8A6D3F0BFAFA15B3D7D3372D36D27F6D7C92DACA8A02F36C003B327476240A5
31075572D339FB9A3FD14F716EC8F23482D6A8A3B81DC902D5F2FCC9F18CE6BD
F3BBBB46C08F94AC7D323F708B4B6A6FF41535CD19C9077EB188980807A264FD
1B52071F210ACEFBC5A467EE27873002E09FF8F559DFD3298D0347D66F60C00F
2EB83EB7EDA419F5E3903DFB3AE78A8492DA45A164C8C6E608A461C327D16E00
BF1EB9D63B56EC617A7C21C50681442EF95339D0020BC5C816FF6EBCACFFEEA7
6430086D809EEBE4F3C0703CB9DC2E92B74879F21F7DD37ED2BD96150A9E4D67
39240B088E49200476652F7F03C52120BCDF2389817787E9D13849785A749ABC
13811CE210CDBE05EDE862FCFB3285256D83F091363FC7B126F417A1DA70CA2C
131C1379F91C97B1FECEC6BF2CEA2D85ECA284F598D8143D2A1D2406BD18FC8A
6085CF56EE4D3ECC59D8E7148D15D8A6FA3D6366E20B1B4A9D1552581AA98D0E
6655861AE6F3FB3754B4240B4A32F022F8C30A3D2875A8A2055CD31F74B3D19D
F762997697C47EA2AE1A5C52674F47F273771780232527112F8CFD9FE828CDD7
AEABB91355FFDE03669EA9758FCB884A029637406B99933CD4328B455CB48905
1E27C748C11EEEC68984A1DDCB8C49252054CB95FDC0E260EA018D911C3539CF
510B17A23A95BF8E7C7B7DAF7EA0A15BCE529C0E1D992A1B614AD042F57F4756
E07BAB9AC1A493D25E4C1CB44D29EF898FAF5022618C4666C1A0B803189B9BC5
10E1BCA7A0400474D412C51FF2D9734F1B58EB9683BDD7A26C7CE1FB32F121B3
27CDCCE771744D414267F3DF4D31E5ADD6FBED50902F74C47FE75C11646037E7
40F9667FBA43606C24E7FEEE69E95A687C5241805D80C87BA07CB5ED2582F191
A15E5623C23150F3BDFB2586E2FC2A02188ED7CE889EB4C2ECA368931AEF4815
4C23F38CA936E8C922B1614BF821BFADB7F86FD69B35DE0A04C7E278E67E2BE4
3562F66701D02D20DF5AED5521BE8B78AA3C332D3FB5A17CD9858E03CCD0E92A
E995E0E7C96AEC1DBB3FBFDFED715EF03F29CDA7FDAD249585FACECA52C2D7FD
F407D83FF2AB278D93181C8A2B02C8A974F406DD402B9B19CAE5BE3F23D6907C
9A9B48A4183B217AE44F098D9EEFD1DFBA60B400DC9ADBAAA6E702386DEAD33F
E27E1958962BB0E4950C93F34B8E24173863B6B23605A4DDD788B1CB3DC40BB6
EEABF7596120592423679F51529AE8E8CCD9D7B82A8B9D8338A6C936F9394FD7
6FD0F7EC2BF11AB8D625309B5E2FC8425967BD0E3F1D3F2C7B994FB22CE87006
A13A1F228B0C7A7A97B8E3BCF1F23361AD7051405440B7BB1AF84B470DA0F241
2CF50B5D559B49EC95E9C67D3024F5150271A840A0A5859A3285C348ADE6955A
5C0F0EAC26FCCD5C1B03485400F3BD9A4754D500C3BFC5E704AD704D9A0A49AB
A7087E7142390925AE169445CD936D3A24721F87AF7C7CA444BB277749354268
52C59E7E06A91998F59467D0FAE2FE041D2EEEA53704090B278680DA4C32E5B4
EFB6B7E4773D59343094FC89672AF5DCD5260E3CBE5F7FDAC1B0B2A056E7D535
46CECDD09C9B918D594405582CB33C7AD93BA075F51282DBA385E756A04289E9
C1C80924785664B0F1C89036A8682E75D8A089C2D6BE1BB191A46928F2DE28DD
FE9202B583AA8BD6406506D823CE47BFBCAFE3ED6092B9A9364927E7C3683874
1A6D1087F4E1B6892B9CCEB0BA3C804479461F8636AD255AADAC3460B7F45D51
7FB29F5250A09B68519AB3B9E4F053AD7AB30AE42355FFA654787FA9BB4F019A
07DB2078A8E4308F895AA29C0EFA1C84B3B1D23F96EA042E3AFBAFCC8235A9AF
ED7BA974BC88062416DC311C563EDBB61DBF0EEA15A43F8B16A304A594B3CE4A
C8A4F948C5BB44812D4CAC9E45102F2DAB19C226FDC5E831C5509F0803C6F0A6
BE17DB0BD1E6767CC4779D89E192BD6356B82B516AA63554E8165B18160F7869
2F213E056B3E09BD751ECED637C2E11673ABEABB33A0EE9020EE14DE435D3C55
61840B41A17B943B1AD26E9642488729F0B463535B09A27669DD846D7897E36D
3330DC32F3B7F51D897513E3E632C051533756EBB9806E905FC2068817AA4BAC
FE18C960B43AC700A581BB10280995E23BFFB5FB79C86AF6D7F57808D362A6ED
AD3CE9D9EACB3DB491155A9AB20815E11498069993E533F19AE2F25824DD9FE7
19ACFEBB87EFBEE78CD256E538CA14ECB3F036836000061C8B9059502FFE2360
D53A6C472895E900FCCD1EAD6738F16983F3C093927EAFFF48A46C0E59E90CF4
69C707F6E953CD02D783DE79E4719C746B744CF4549F5905020ABAF51D78EDB9
B529C1DBA46754A8CA1D1ABB96051D7370E4C53AC3F6B32274E66021C78E661F
9E1FE51313DE0C51C2491A8C4DF7EB27AD47C39F9FDF2E4D6E2C0F1109CDE29C
A734E2AB3185616AA274290FC96C02B7788A1B409B41AD4BC74A11847E3C5A9D
B99FFE3167824CBC89A7C7784557D4D620089EA0FF68A36755BA5BEC4263C0D3
19E633DE40600630EADD25DE73EB1F43C885C10C6ECB78D1B6FBA5CFBD967150
A802A40EF858D07AE34F1F339AD4CC2E34C5EFE2D4D24C91BFEA320C250B7C65
7FCDB174BCB19054A86BDE70C237BD1BBFE33B003609B9D84614BCE423C4CA38
E0D7D7B5CDAC2C86149E0763BB4C01C1264EE1E0F12962930A746707CCFA02BD
C226D29D4FBA1F413C161568C014835CE49A705DA24D0BC58367330959B752A1
9B85E68E2F1F491CD2E945CD4BDFF8A181BFBCF89946413AC378508CE62550F7
5DE249ED8A257FE75BC6CAC4C41C969356F18BC77CABD0031B9778B4C8C6E16A
075007B17E6647965DDFD06B3BAD5A37B8CC18CEB3C5E8E0D904F4792E29DC51
EF741603FADC1C5AFEB962D4EB90E558635203308EDBC66C0A23920995AFA825
B8F0827F64F89F0C87C0BF411CF7DF20874B3C3070A125122185EE4191873401
BFC9F54FF37B929513C0A910DE2ED1F1D14ECC4CE7ADDC8D98A5AB28356E4CB0
B04AADBCDF87CCA0AE5F71E5445C7748506F731E5B760BB69266DAAC9110B9DA
2677050CB3197FE431C2D84E3597E2CE1C8458B2251330E23FCFFA319ECEA62A
65D5E233E52E5AE988F81EA652EC8CA46E9B5957D4744886EE1579FF9747B0CA
EF7A9C38CD9C3A14077882734788AF2DFA5A3E836B5CB6EDBFD64FFD23151484
6C60FF606E812B9E33ED223414AF1987F6DCF2A061394097C8F953DB5D0DEBCA
E00F1C92A4C45E3318DB7F16AF6A8E23168510782B96C5FD51170A4278CB491B
1528089B539EA290784B661E5EE8A182C6F1D586053AA2F94635E7277CD902C1
4F21CAA33CDF40130BBA0EB4271A1AF7FBDC0FFDC9BF127EFFF32BC116068D24
C58A8D1C3B41E75D9E0822E261B28E32A1F8961CD2FD163A8FC281FB74E26C3E
1C6CD272EE0594E37D38A86C8933C563FDE6B1D4E7734100408EF1C8ADDD9347
3FA0986A4F3E9E6921ADABE0FB24CFF4E4D780153FFC60E260129B6C77BEE2D1
985E86CACD9127810CDF428371BA5EAB0248054D24155523BDA4AB1183C0D245
A3216BB7FE4C71668915BF78BC45BC87E0EBC6263C04DE1CE73668E8D0CE39E1
5BA69D16423D2485E2862A898D257FFCA692E2756F79334B705675AE0DB2B0EB
F07CB98FD3CA790AEA3888EB493DC8571828336DDD30F7F7248351249C41CAB9
BC754E609ADF6AC5AF2FAB628D4155A3FD28C6C8CD2FA7F2F52D3E58B0596DAD
5D1A803B9B579F4C52B37DE21AAE7275EE00E3F6C304C0E751778B820F9B864A
F5563FECECA23AF764B7030540AE320E67ABD867D74F3B715EC7E0309F431C37
9AB6A05F0B8735D2F0B0ABB62D14D6B501FF05048538951DED6D7E8A42CEAF66
CAD1FFA11C09BED6F451D060B3C5295524EA49144C0C848B854F2C5EBC54FE53
F1839F36399B710496FD5C0333165B294289261D56CAE199BC4553A39CB48536
530E39F529E7ADA8BB63EB7546F5BB0C2482B7D5612975AEC0D0F82ACDCE4BED
3151561A58EF0877A278AD47C32EF80D1C00FC3CF9B341F1D327BAB2E92D94FE
B83AE422CE3618DF659AAD868B9E9AF6EA612446B1F6F595B0EDFEA550ECB303
B0FA8B46D419D1201CCB7CCC2BDE787914628C69D0557DEEF0BF89D3234EEC24
D6699FF6427F57AF0BF42FDAEEDCAFC820DC29299E3955D01A3DE17F75CAB62E
98A8D4728FF7AFE4F970CB10B9B9FB9E61116E1B321F5DF588A6A0EAA7AAFBD2
27724FF6FBBB8D1456B157ECBC8BB93B256CEC4F16964E05E39B8009674FEFAE
D53470145024A94EA946E917756C6A30796D25198B49A0E23EF33486A84776E2
215457C6CF122147A42DECF1D65F638C055787003D42B8082469FD0A4990AFBC
59C7FB2F9F8D0C44B3AC1DBF85A6D659BD1BD79F02FDF7BF1081970FBAB26A5D
6E3915E23DE4F3B1D19E014E109AED766C79FE8B9E4A7AC3C6F7F1A1A4A97BF0
7DFEDA5E023AB566B26C818053A88BF488953F44887E478D7DBDB9E40B8B4D58
A520A1B77360EDDC18985723A88AF5CE5903E707455422F8BD10420E5FFCDBA1
FB927CDFC395E8028CB598CE5EFA6D5CC3A63B90411A79AEB95F2A39369C6B45
44FCB30A0DA47CF365A2C3FED6BC4A0D738BD6D5B1D0061C59F57B097A4FA2D5
004F6BF7E40EFEAB8E8AD058C961E9961B52E3A0DC8EB7396F264ADCF73C5C59
16742D28AD869B20CB74DB2CE26241244B798BE5159E12782B43155E5AC8EF2F
A78D955ED194B004327DF6E19CA447C417E17D1B15C0FD3BC6C7CE89AFC9704B
5047604305426FECECC797768D6D9911614401C5CD959045BC1BBDFF4F1CF4F0
6284F24A54297406A954BFEE3936A79644BE182FA36CBB02E87F635F48D91BA3
BD1A5516AD9B9A648F8956D8E5AED6713424CC5FF2453B49C68285A8DE73A216
EE4CD58F4490BF7B92DDC17751187C49BEB06FBA6BA03E9E8930277391786E33
9CD6DE87AD6D63C39DEF3C5CD16AFB71DCA345FDA73D39A988C0E3ACD944288F
5B7BDB8750243523371F75D451027C98326F73711CCFBC74C23C5E6A95476EB6
FF366A19B0E17AC74BB66F869ED19E65DA9B2B46F1593C5EA8C13609339D4280
2B9A0F808999885B343D589A4B7D541DBFBACE3AD7B45F6B06E1D9910FEC68D7
C98F05485CDED906DFD8725B9CE2F87C64BBF173BCB117353F0EC818E9A2A84A
39239A20BE44AAED43FD8412DC6F2482F2226994159A41A10FA27B9F5E0CCCC0
FF2B2BD218B66BE5B858DF5899209DE57D584C39090FE81227CE0C34E4B3E14B
B0F45A60CA7134DF87D7908C9256F7FA7A7CDB932E929BD1F300963C4A8B0F69
1F053E1A29EEB17793A44DE5BABC23CF1904DA5210866EC07D3A87CAD02D992A
902FF978BB3D8562A9A62816631ACEC09E41E898E69F87AA4DC46D99BB143B19
2A2B12B92F41FFE4DA9B3E9104922797534DA3B143FF2F68BF8CC184D3A3F2A6
9F96791FA01C50A57CDD4B74EF6D283AA018E774FE1F37D558191AE61620AC0B
560872C27676C6660CADA018620C03AEDBD62885DA0008DD057B4555180FE37E
70A79328F1674B55EC876C0C650DAFC9E152C6C62FE17B29955B047747F90B12
D5418CCD1AB4A0FB94A994025F29B31967D4D4349A492C4455E4E517316E1B0D
82E270849AAFFC46799827425CB236A52F8A10C7827DFED566B604D1A1F23E79
0DD93B7813F86164167ED0A9BF4AA8CD3855F40728A1732FAEA0EEA770714486
C372920E152AD7620406E56D3FD60D46C4462B3DEB5D96CA275FE4C86E62987A
842493E6F463FE56C4044C325E6C358A263DA3C7C2FC94801B787600095EA550
962C37CC61F0D05D324E956C9B3AD994B514F5B2795A76FC764FDD09C8A59941
5EF364CB14A3F3BCEFFECAB2E6B6445958FBD4F1CBC784864B6FF8DB76E5E853
EFC1ABF21C9CFBF69D951D9AB1731C43FB7F98A64C0E73E6BA86FE09AF0F2D21
18AB898AACFEB593F2FA99ECBD54C4ACDAD318A87825FE005F4B4F579A047B8D
259F0C5B3DF24635AF7034DFE52889A86818D1EEC987A813BF0A55EADEF82853
BB4213B343A148F9185BD02E61F0762F035AE672592880AA5655451901437D2E
DF38D8254417F6E4A42B056FC183FD384CDBF03186BDFC400B398A57C06D6FD8
B787B95A81ADEC0CD12E44C1FF2E5868107CF5E60D48F70A77779FBC6662C534
80F8636D2ED732158663F89042E951556292F2DCE95A7564B1D24E040FAB1AEC
8F96A82CC9024AEDFA1B16D669261B3A6406C25CD1B4798D10ABB2822B3E6933
AACF3F16DA35183C4E697205169BB87FE595BE7049BC7D27B415FA2E130D84D5
C1BC28042E36AF06026BF913CAC5BFF955F8982010306898BCF033F5BA6017F4
6AD0238D2FA68B6662737226CFB7B905585B79FD20085026C7AB4072F041184B
9317D181702BA645F2FFF8F1CEF02B365C57E094EE6B128E174D639D2D18356C
BA9EA7601916617B0B34768530758E73253A607CA42549FDFD5CACE63403B9C2
E8D70C9EAE04DFAFF819A561184A9B6AE488379A84C7B6ED1653D272D8F005E2
00EAD49F23BFBD5F8D183ADC725D724F20B49E13C5A031902609B00F2BD17672
6447C352E6F281AFCAB84F6517E7B4B77487DB4FED955D7B78F1A488B631B59D
CB104C56B3513376BEBD7D3B08CFFD2DFED9CF4DF093CE301111ABCD6A539040
41BC89114A0781195141A6E9F1DB7E9777D7950F1E125465BEF9BCA8385CCB09
231938FE3A0CEC716B2BA3206F999C25B974AFCB65A1BE660A0DBAF228E96A3B
6C747C717F7D9F56F5C34B8ECAFC997155974EAC2B427B59C3D708480C3BB105
DF79F7A8BD52C3DDE4143C003585799349F4137139E098021AB9F435CBC47BEF
D41F20F1269845018167CAA0EB67E840348A79590005E654BBA681158C6C4CF1
5F97EBE7BAB33915984A0B33E723B41DB93536F6715DFCAB938780006E027FDF
45EFFC77123903E228AAB0E23066F57DEEFCB1061872E3549687A258157DDF34
1E4D54A7AA0697528B1F65DA96839F6877868D7B6C48A8609D58E45113CD736A
84C172123D406BE78158B7C16AF166BE8F2780B98F6A16BBF19A6791876ACE02
356A64AA3F4466BE43783AFE7B55B727123E501F067DCB73B6B83741CF43373F
8200C9A3DC4BC6A15A5D582D40FB07E36674C0E65795F388C70CB971B0BC3B75
DF698A98156616E12313336C41F13C671A17638A2C85C18B46F36BAC2BDBF7C1
4609F81C693D8C1AFCF790D9E88779D6EBFC6EAC430309A01184449E2AC09FBA
9979C0D3D1DD6B5DD15FDD05FA39177E1E92013A2034A3B0508AFF1D08FF97EF
A38EB493BC89D306669B7669A2721F5BCD5FFEA1A8F807C5DAD5877C0BD5FBA1
798B5DF0B6B9E29449D18FC0057015862D1E8CCB25733B7D0534621ABF4BDE80
CF3F5C535703704921A69B02BE0BA7D9CDBC4F561B2CA61FC570BA2904EB4300
10970EE6D79BBF9CEE3450FEFFC687423297EAE36BCAC674A1BE9BD8356A5C7D
8FB909DAF3F276FD2B333874C9553D8736F4EC609B63A24383B9172053EF2697
C7AB252926D0F608A6C820AC19A7BC8C6CBF52E5C76E9C96597521733A68896A
D2756715F862844E74CF648CB5EA10FE61AE6A228B201E2FE73DE5B422D35A65
D63FA7C382E1A23519AFAC7359204A929EFD895546FC3DDB7D25B0FF76636C45
B5A640613A17FEA3FEE7C405B7081E7411C1941B827EC45372A86463604D2B72
46B26A480734405FE6A9D4C545BC36CD09EF56C5994A078A94FFBEBA4B576D34
FC835C3D3F7E91B7FC8ED87136B950EB8F3AAC1D41E0E47F875749F20728DD6D
EF713AC4C403B16F0451613EDDEE96D8788E38577190F60310801F50507BCFC2
7B993961784B30FB8C82DC4E142D9BF0BC70D0BC5B70196B6B4D486A26E9C489
87BCF1887A7031C89CBDF958DE6764343D2303523EDE9D7E8BE185383CD076DC
D9EA9C04FF94ABDE68B8108865BB073CD5455B60BC5AF14300EC71B4C13F9ECE
ECD52FB208F4ECA4CADD1BDE31493DDA18A14CADF83BE0342DE13ECE0F9542A2
56673CB2B1CFD6E8800E4BA1D09BA3BD953729A0C329B66748C028EEE7A54834
BEAFDBEFCF1EB8DF1013DDB5AFAE3EE381AD7648ABC9903E1E13357E2EE4209B
51F13D7178F5EE499666E2E41DD2B670C0FDAB62D7C41094CF0940C5F0577656
11CADBF55CC0FFAFD7BD0EB3571276E01E5F358F9947E7E766F35E30AF3C83DF
5D79362C1501B4BF8A108DA6088BF2EDC655F1F496AEB75615B715CE0405D15C
10277BA772E1866D252410808A68E3D296D766DA54D89167FE5666E2B6E58F7D
0BACC883D18CEA9BF71D7BFC84F2F1B215A2161BF42EA7407B4EDE6148F30E34
A14FC386C949824281C5284C156E53535104657F29374FC2D639400BDC235FE5
E88912303448451947F04EE17513003BCD63F029BD67C043DDDD8A9AF1E6F6CF
CA377B33E6882115399354E962A2B876795ACF04C6B143CCC0A40C3D88D163BF
EA54A3CB06B0F51C888667ECCA7BD182BE11969407E838BB8482D6F2D4424674
4C16A85B608ECD7962C40E4E2E8ECF8D204A2CF8BC430DFA4B8ACECD91213A16
65ACE3D13FE1B37D171EB3D4932927ACBFBBB18EE885D3570C176D0102CD3A0E
F42D148B3D918B90AAAEAE74F3843E06A8B4E4F73C8AD027937A3FB6D9694156
BCB4D618F8CAB51DAE5477204EFEECAC9897B6AC0F150CBBC0B33ECDA6847FA6
5A58B7F25878F180BC1641C3D5882A4F1DD74631AE53DE297C9D8714650494C4
65159D5002C48C461E2B1B86D03E956B70277A45E63963869A7E7CAA22A197CA
46271AB9261A16349F0C85119A55593F2AFBDF62353B6DC3929C2F11729DC7DA
733F8362D38EA660802DC71663BA98955F511217BA6DDD938CFF0835B6B2C81F
C66F87F443560FBB8526107D47C155F61951BDC402420386B572F72554DDD2EF
C9DB0B2A08CBC783314FA1EF5EB3BAD423935A15E71184483D710C0C60DB93CA
BF0A797557222EB796C3CD1337AD7C7F374852C561911D1C5785E0F5E9C6C545
5683E42350C5064D335E956E950FF3D4B2454776EA43EFB3E5C7E2FD3AD4B370
423A115D3C699A1C585F18002A357496A9408D0972A98D2FFABCB02873848E9E
3A0FE9F68FEFA40A0FBB40CBBFD1F370096C5B6CE90C6D25A2C7ED091CD9BFE8
C6BEDEEE536818EF03CAFB17697452F956062531036BC369189D247FBD0FE83B
4414B0C3009834BE08658EDC38EA27F704D3C4DA1DBA490D4994DD458879171E
26EE161259F064E1BAD325454EF6F92E008E54CAF557F4A135A529D301D9EA00
EFB450915046548756AC43504BF21D3CAE1CB6365916E305757773CE44FBE66C
66C75851E0FB0D91F2BCE7C3083969439BD824B538B14409102B880B687ADEC2
382E646A2B0C7FD1D9C73E76E3ADD9C0FF79298119B3F2A8AA1E50F933D6CE93
602839746EF1C02E008726623646E72E11C6AF2015657EBFD8CFFB0E115A079C
22471B6B76C6F3E09265CB5C3CA184C97197962F99C74BAC3C29095522949A19
B6C2578CDB4E4C36C712538412C2E6C68D199C6F2AEF4E6ED6CE95BFFBB010C2
0CCDBE1688206D7E7E1207B5042536FD6648AA08BEBBB165A59EB5606B5E8680
2117BFAACE9D5120572A93FEEF00ECB4FD68C1CA86D582AEF471308AB4972D3C
6BAC79BCF17DB35E976980477C747934D91B38DD7C3AE1227568056C6E6778BE
36312576EB08AA8DB4F82EDBEA7DFC7549CAA4FF1F9FBE3169E3F7E9199D27AA
970CB3402017E625BC8CAC40505E43AE01424F369A91A24926C61E3F1EE4B2B6
91388F1AB4931588A09D5938A8A22760453C20400571AA07135CBB149924AE8B
BF06E5BA87EE41ED7E0DAFD5DCF92DF032B3A2ED0D86A168A77AC134742DB8CD
0C0FA57C94D50A587DBF25E7E91D35DF79F3859BD9316B6C6647181D54CBB568
A59907D2EC78DBF282FC03325C7DA2B92FCA1EEAC03D727987C4439C0BA34747
76458E62A1AA3290F706235F04
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.1: CMBX10 1.00B
%%CreationDate: 1992 Feb 19 19:54:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
/FontBBox{-301 -250 1164 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6209615BC08173FF
1805BDFCCA4B11F50D6BD483FD8639F9E8D0245B463D65A0F12C26C8A8EE2910
757696C3F13144D8EA5649816AAD61A949C3A723ABB585990593F20A35CD6B7E
0FA0AD8551CEE41F61924DC36A464A10A1B14C33FAFB04862E30C66C1BC55665
6D07D93B8C0D596E109EE2B1AAB479F7FAA35279ADB468A624BE26D527BFF5ED
E067598E1B8B781EB59569E3D0D54D8EFAE0F3EDE26279776ABA15341E42E636
6E02817082BE6FE0B04249A4840C11F95F8ADEFF72173E9A5F2AB2F62C427E5B
DC010E18641EAC906A5EF0F9BC2108062134A7F10956219C5847C0D82F0E8663
12D963E012DF0DD899911EC5D8096F80B49CA3444CF1294FBFAB57DFACC9D01C
46F3BA2F3D1C14EC30CBF83E5729F1C074D4F1665405C9AAFADB8BE41EEE43AA
16966E2C0CCC853C4C09F245ABFD4603C4AA55EADC0A59AA6E9F5895FAF3D3FA
83EDC6E2540417530AE7DDA8EF33DEB81444316FB3F93EF944D9FB06745BACE4
848398BEB747E58310BBA39C64E341185C82CB77E9D4439EC15BEFF1335F22F8
F036517C436225F4125ED67ACA7A84230D4E2B6CA713FD6B3CA54BEB540D407D
BAE644AC025A9B1EE04B9F0458912B40D72D0964034C5D6F1B058909F25BC43E
76DA0DD6A25049DFADA9585F9EF8B6699278D0A618BE1499B24FC154DCC071B9
DE680241679864F5DDC83ECD1F92837B1EDAC1687D03F5430A40F35CA40C36D3
0FA23AE8C9F9526131092015D3A8B5EA02CD10C45038FC6C4E8FA08109DC2A4B
76089D12A4FB6CEF2FE582B85991CFCB32C6FA494EF66A3DBD8741543FD3E946
58D0F717817F3007FE1901B040241AFBBF99F543DAC946F06861518079A9C6CE
63B67C08C04477BCCFDCD8ADCE9F033483BE7CFAA66508B40DEB7428D4E8FD6F
FE1A8E006A7B663E559C3BED850252927F93ABE90C1F95286B0C5DBE4D6D9536
1F7897A2B3B4314106415E33841314686EE3DD6AFB1CA4ACA6879F61CD6CDE3F
99D19B44295188966A061FDBB4C323AA12939923242588D1807AF786C69866CF
E21A99EF21C98356A5F3210287BE3901FF9A429B6512F0FAEDC0C0C7C4181C01
9BBADE23C60F4AE2E4EE9C1ABE93065D3897B6C7DF9CD0476246C7581D791E75
C506D5E288411C8A9006F8A0C32D4AB61513D8934C5BF29BC57AC5238C550441
6B1E25C05EE0BDAC05819848D23DA5D8C9AC126842491341E15B77CC1B7BE2DF
D90803100EEC9DBA1B10FD88E772B49ADB784C65603D03B11B1AB68E86B8D416
B0A9095300C88A6E00BBCF4A9C1BCF57F132070DF8A4E24786FF313CE1604C95
80E365BC273F4B8D514D3A581A2B83C67429BC5813CCFF64DF3199AEC1CD0822
9E72DFC04B7B823C551E0567C0A543A4B01D70ACB807D3F59EEF1FA42CDCECE2
7096B8255AA41FC4B99EF0DB32D2853045B6ECCDDB9ACCB66E67A1B5329FA9FC
5F9E87A7FF029E533E47CF5CE88342AA2D1638263BE0876A975C51B634BFD2C9
E6BDEB6F9F65EA7241A73BFCD522914C0886B3A57BA549FBB643056727EDE40F
92ACCC323D08E628346DC2E00F5E37572F479BCA7FB0F7040B6FD2DD31D36979
C599CE8A49798F63224FDA1E2B53192E3BCE538F58048FA6B3D0F53B46401469
BAEFF54D42663F6A8E6DE4977E103848BA98620750DD8865845DE5781CB55139
535E0EDF15AF9D075C3A35336183F57719021DECDA1E27DA9F1260CEFBADE074
1090F930706848432AC35C472B88555584BFD35356113C8327E7D572D2D7F517
7FD17533E815A134F616556A41F5BD028C625A18CAF23BBBB2191C9CD8CBA79A
BCA5EC85D8D66222F93A2F55E16878DC69187DABA4EC59A014654C7FA527BAB5
055A2C68BF4CCD1312E10D3FAA29C9FBF298E26A361CA0C9025E208DC44C4F4C
E771307D96A8208680100B480AC486CB8084D7B327C33231056D76321653F221
61F0C36C9E3065F4D1D734945040727427D1788D07A7CDFD086D570C6B5644B8
0D478920E16A71FA33A76B4CCBAC170E7EBC6EEDF4F00EDAEE4B43AD6A83227C
6499B9A886C226DFA431316A30D33053D6B2916F98D684FEBAAE4412518AF51A
90B78AE2A50DC2C0D156FC6730452077F0DF316E0E2173E60E40D369F1712BA0
931089BBE98EDD472EE1EC6A28D709E3B3CB0CCC0CC1018810502498D6B52FA6
A23DBBE5F1ACF441797EDC008635A8DB7F68C9550BD4CDCFC13FF5BAFF00F283
F5BF9D3FA5916CB1971F0A45BA5987B87C30ADE738CAD792A9CFE66D6AB9D989
07C8546BC19F45622AD277E4942BD9EDEBCA136C4D46FCF60557BE2F09E78C14
0DFF9FF0B268D803B3808863975880CA64A6F0616A8617A487DBC5189ECACE4E
A99258A170B91A6F5A5F3819381CE853AA7D2F987551F1B622E76EE56EDD33D1
B55122516520C701F616B3DDB7C1DE02F8DDE9FD43510C44E2C6ADE186C2C570
5BFA6EEA5E5DEEFACE1A4922FF929E20AEAC64430399507A117C3250D018EEDD
025F254080C957C060A4398F27E93536D968A5A5E1A1CF57A874024F8F1726C4
53D2D50B7411CD120525194AADDC7444A1C65639A60A6F986C111D0CCECCA048
0705E0596A150C8B490A09EA79BF4ECF0ACC613E9532DDFB6BCFC6E9D1097D80
3E46756DE2D9EB824FD9150463994A5562D6EBBCDF0F8E13F419DEC7270FD3F5
7507ABFAC82C7B3CFEFE2E6FFD6445880A703742554EF0257C678D9A1E36A69D
B83A3620F640BCFFC684EE06B4A622B6C5E77C4BD7FD05989CAC42BDDB724B29
33A4553B53BA73CE12A49EC27C17CD007E44912CC97F130D7892B261F088C71B
CC5DB8844FA8D2FC89A3E6057ED543177B36756E1FE4CB4B3F53BEA083ACFBCD
76D8D1ECA5C4C2C42DB506671C9DD46138A1B6A4DF367AF97A9A09999D87556F
DBBBE46AC1C9309AB1DB99327E92CAA100365197A101CB7EDEB633431D4F5A27
FD190BE60C597C35C5AC17D29EE56220C643A5B52111E6CBBE78C7FED12F7A5A
7D1EF71EB8189F62E0B9067C076F5C2D803783C13C14B34ACC35CCA025C25AC0
24AD341326FB08ED7072D2585CCEF415B52DF069423FD76C9A0DD49AD139C0CD
03A7637A8E4D991D2F96D3BBF52751FF42DDD27E5DDCBEA6B35AA51A5A7E4ABD
A21E65EDBD57C8DB197ED12D34F990376D2FE11897CC0E1787EC02390C7F5027
2E51B044E7FAE2A2AFB0653287FC99DEFA198B09DBE70E806058AE9F6B40ECCD
7A49902C7BE37934D7347158CFC9844BA7C8C7FF8718053569523EE54E47B09C
DD3CF36AE80E9E3D1A1854220245C11A47695F0EF36D3F47CE5C879FB21A353E
8D15B9A26DC10F31D65FF8E6AB47C44C39874A2DAF5C3BBA722CD688E011932F
B7064ED4D07EC5F3DB2DB9C711DA3EF155E4981648F5039CB13AC23DDE90E0C3
512A1E34B7B27D4DCB2264C01CF8F25BB4D18BC900E18A7F7DC77B92A6FE515B
3ACF61648059EF871DACDD7F29C1AAFD3C7C0AF6069428F0C27A20F76C2018A9
6571DC64E9188776EFDE39275CD823C545550DFCA97987AC9B6182D3C360CFD7
3D9481359E554B92DB35DA106680ED19AF6DC7EBF38115A0ABC5A15D5299302E
851745428117CB202825156FD3506E8E222DE5FEA7C7C06C088E6EDA83B694FE
C215616E7170EBF3A3BB0DE6C88C77B1EBA1C413BCB38799CEB0DB206FDD1048
6B8B80EDBDD5FD56A34B81CD2951C3525AC6F3A6D9D9533A0349B19AB971BD7A
FA26A1E63127F17AD018967349A14E470208352ACC62BE0374CDF2092403392B
339F598A2AE3B9D0D186B94BDF58DF0AB36066B598C770053CD0BD0AF0A74591
A98C210A261137DFF85DA80A097C509610FEFE36BDD197E4D1C0817438D9FA4A
336C76676D99B0701FD66A5F602B0ACA6F047DB02C289900611B2A04B7630758
424DB04029B7BC14FB38AAC8B1B908FC47D07AE5F69DF412CCCC077BF90B0971
00AB3AFC963751868AE91AFADAEEAB3E92A3D4808FC15A38B058A33CA1311C42
FB2B37E409979B7B7E8A1CBDD9ACC8134C9432D7E49B0A06FCAD8FDA835B8316
99096761CC3B97D64D663157182414372994EB5C8409357F6CC091100A9A8251
154F059F7B86E9C13CA0CD22937DD88B45C3A98CB288EC654E31AF4B70FD3D8B
87020E666E7E6AF45F01665B1F56A7B638E2197EFFB2A3D79D0644565635F1B9
81FE537DA7D7AF4F4112AFA50D1AF0F255698A66FDA55A45861459928E21A399
364F5A36B59688CF0C79A9D21557F4BD5E78A9A477CC9F5ABB50FA1ABBB88061
0786C8CD222E24391FEECD7B2B55AFE1826CF048D32470DDEF2CD1B1F21C0BB8
2679387A6410823BC9665882ADBBA250CC26797358F86AEE1E2E6AB99CF79080
7429B21DBC91EB990D052AED8BA677D9F6FE1B3BA14B34B82C216B9F2D85A02B
66236FC276F7AC2B59040697F9F473F7BB6345F8742C11316361CC10B0F89A12
ADFD17117C9A53137B10B85C95A18E474B8F0529901E2D2227AB672F7CD19046
E1D08D7F15848E3FD7FEDDE4C434247587B5DF206F65C85F0B850CB884D83499
B82874DA0BFBAEC3D2AB413EEA755A0AF2E38016BF1C45EDCF2B4F7654B6D32B
FFC5D67B2B85EB28B3B9AE4AE03107B16FFBD66C2B3D37EA73238B4E83FE30DC
9BAABCD9C6B4B9BC8DC2253AB6FCE5048007335784D93D8209A7938D253E2957
B9C4EEA96E779C12426A9C6C71B0602D0BED1538596DCD7A94C606B76EC25989
57AE37CE2FD10BFFC2C223360EFEB2752E220E2D713EF2EC837F1D47ABF4C3D8
3BEE750FD8807E7424486CC75BB4E5E72897401A31E0626DC8B68C6CBC675A47
74CD2A842D1B00B00D273BFD16DA68E72A283B94CF55217327680182B4E4B1F7
53B7A7584B2A5D8F8E5A0A11D21FC5A4363C7EA312E8BB04C0DE908876570537
3E9B1EC90AF47C597B71B0D2A896F9E1392FA10B96C8370D90C32404E4B4FDAD
3CD536E6828B7D7AEFD7CFEB81005A3E9726C2F8B470B5BA87559FA4123F2118
73D9A17B7F58B3DA92F3ABC0074FB9B591944C2ABC803513BE74FE952C8AB123
F76A84774DA42E738695E8DF3B94E55C2A08B71574F39312A1E33F2E2E43440E
A74921CAD92C5345EFE1FCFB6D5D55B87F88465B0F293C1558C6BEA056DAD044
4A4249BDDD656C1DB5AC6C3B857FDDEF223C5F2D5E33CD7EEB864D4C4E69F03F
CFBB9E3BE24BF810B19CDA3D208BAFD51FD57D3D439AF84EBF7A9DD46986CD8A
A41575583759FF137C21C94339574C5E08E0177810AA63107677CA0758E15CA6
8A8A96D256528AC76C8F12A450BFD8095F54E5B80D9110958D3E9429238E8758
5C8859C7AE5797271CAAB58B1A70A8A52520A2888D2D8813052F136042F42680
8FD08E18CDA74D83DFEAFAB363CA43AFE0CB5FE9CA6D884C909AE6376588FFE2
3302E56E940E806D36DB25D8DCF825004CCEACFAD8F5341D9E6336504D7A08DA
7CE414D9250B37EC01B0E34A1679535DC7A99CC432882A587E8EA2A926AF814D
B153A588B4BEF6704B650F7561398E19D8CBD9BD061EBE65C16BCD43EAE663E2
E86E0356621E54862BF47F99B023AE116D4BE2BF8BCF63D873261C04BD17A4F3
C816C810763C664A6F93431BE9504A9901CDDB1A94DD422D3B5365B0BE2EBCD8
FF6BB559325C1E9F787CE68A8DC966401F3BF71CB24493FE8D0E26A45A5414B3
02E742F2210F457C268D87DC12BF701EE2E618CC6ABF5FC7E65D69B33FE753F1
BD306159155ED2A37825D029C9E065C36AE58D32CEDC07381B2F19FBBC145D9A
0FB56C06F8401D12B5DB0B66E90C06CFB84AFC611734DD618C21D98DAE5F1018
480EFDA605B2D6FC1D6E03633EDF41A4234A36E2541E5849BF611A650E6CFADB
A477C3C32512A5256A38C17AFAC1911E2F3D3C9A110E0BAA9FB3489FBF50012A
8CF9F5958CD04762F4B63EF853A3C12ADA9263CC698A2660AFEB032C9AB863F8
E61F4F0DB3D2E70C94BCFFB3BDFAFDF4680CF0DF13D2E9A35C9E7AB57307D4FE
06FFA72A02B0D682A503317A08649BE7611D95C3EF39DE40410C3206C3472538
5093AE02238398A934422943E0775C75953572A51B03BF512A89389E6A48AE79
25CDE05DAA9C96C9366249F6CC59A9088CCCDBB0FC61A45D51294E5B50B11511
4433522085E757B20BF4D8B3C6F5E53EF94CDA48D5F99F78685270A248E67EBA
E0665DE090D390784E2073080416C9CB8DBDC627CF44B1ED804BCAD245791B9D
CE19EB2CBEB21DBE4391BEB0B55B7BC7A3652796B69E2BA122C480D0397ADF7E
C11C18FEB5051CF23612F0040F1A99A8D04DEB7B693053E569B9F957D95E4038
929B5E35FC2333BC5FFF857F8DED21660DD2CF08BAECD860071E085652D0B69A
FEA2D6E3F48E386E17F44405C7C09717C2A62D9EF5CE430E262E7C3DE9466BE5
5FA36375AA46E1B6D50255B0AFD87F578F74E212C489A6C74B1990D75DBB6FB5
775AA7429BDF7C523CAD1D20E8EFCFFFDD0AC090A4873B2E10A2E6B44B5E9945
6897BAE1B0EC0C29CF08618A4DDD3A0D6A174DDAAFAC6C5F0481D66383F21931
144457D0EFC64702C175223F8C74C0237B7B6F6FBF8B411D879654FA2D5AD9CE
159532BA3FF4F193F8F239840289040DC2E729C9DBF5C6EC366E00E588950EB5
A488E24E12AADD7CEA9CD4E085DD8970A6211612870A3174F5D70967925ACA4A
D7CD364ACD7DF323170522663D1E0D4AEDF97293F740AAEBA3C3398CC1AE8833
353B4F97B06E5A5D0E029B3DA1E475492E629529C89C566BF3B7869041727AC6
FEA2B697E42FA074BF2E49EDC876CDBF2AC24150A8840C377B5CC694E27EE334
E038129A7EE4CE39880F87E778905E82ABC6D6475DDAC571CD7D0182A4BA2963
F02C55C50CC81C594F82D607780C8B3C3364442DF211BDA46C43A8F87134D6F8
FD30BBC7F09202BAD1990FB3C0446147C7F334A35B13D1DC96C7F64DD85BB179
191D68288186AE3EFDC6412DFAB89FAA8FCB41B1F3D4A07B4D8E24ABDC28E54A
D7E5F3F9B2E3F7A8FABFE283691945FD7A34B29BF1ADC7AED77EC5736F150A04
53E3943CF9C49CD857F53530D7F44D75E4B1BA68AB02525C92F4509FF2C94964
1B8BCEC4D7C5FFE10014B3D9634E044A5CC010436B809527CD58E2A7C562E5B6
6C805C0786F423D575F862E1C3A067BDB83430BB7387FA9696AD677D882241F1
0648C4E29F8C02721C3EEE43DC0A199EEA782676EB2AE441027F2CB549D82916
89975F6C999D8D13DE76B68E238CC70F1B3C71BA44E5510197B92337CA64C79A
C6D289196FCD7A67CF7EFEBBFF0FF7CBF78C9C83974D025552C4A473B000E92B
B8605895C846CD8FFC93A9FF5AFD76AFC6169CBF7F82FF7FD48E71852B609631
44331F881C185E01919F2373DF31FDA80331B79A1E7D018F658A20C04EA861C9
A56A0BB69EE883305304D2CF0981BAE35A520368D21A503D45777F8267AD9C1F
746AB7CBC34AFE1EDFDD12E7D5CDDB5D053CFE28D2FDB8F713D7DB09B5FF0F3E
73DDCF51510021E0D3BE563ABCE9175DAF45E13E56D2084B4DD653521CA6F2B0
B30E0704966F314B36F1AE191ADFD9911805B5E11BE5581C781343B249C706CA
D869826A748ECF328C5702202C262071675BD5E684BFA52F56C9F7F07D45499C
C65B59DEB72AAEB73606E48BA2B22FF878EA66B5B9440CC4FFD28EBC3401762D
5E8A367E9F045AA7E6E4A01C1E2DB2C75F9E17CFC0A31E961C49305649920858
EB5764BC52BC4C26E622B075D6480DBFBEBAA7D9ABE375C496231FC65C94316F
8F66E59BE56DE1E418F838AF55395D63CF2EBA100DB22006CBC170D931DEAF5F
E675A652B0874C9CD3F31635540736F70A7F1FE8501D1E7BB6D3446A39A58EF2
606BF186D277C92C9E0650CFBFB7A756ED90B5826250B2063C16C1A8F080A164
C7DE3C64F5639208874046F5BB0C248F337DEF8F51F51F00E56587AB6268B0B7
E7C362DADCD1585A31E64861DCDD9B61BC5F36B6AB43B04F118E6E7D6C7FC4F3
E2156654FEAB6A7F2040A145F9BAFD1B085C15A860753092537D91B323520E38
E6255A3DF7C3B591FB1D0F38D998FAC0752933CF5ADFAEC70299E1BD42911021
769EB5AFC4BD642CFF3DB2255C669D2C3F62B9120EA5E16C0289BA167C2E6DC2
1AA09F24EC4446B85B652D255AE06AA85DE90D1627B37E277714CCFACDF9BCBD
BAD38A7FD9A06C60CA4F38F98F03D9B9F75404928DCE912169B4AF576F0D3A2F
051D5469ADEC1DA0365C0FFA9C9501F505D576FE98B6FB6E25D17492120542C1
FFEDF976911C2713F3E350A1FE3A0C268B04FA77392FD8D159593964A6131F83
A284EDF6F280796DA43AFA5E20B2FCC6AB6BD401F06A7A09B6EC05612FA01DC4
35D98C250D122751908199BBB3E09E6DD65E35592F33C6B9667E8573F4DC0097
8802707D2ED869E523307D740FCCFF1FB39DD27031C0BA632689BD3D846406C3
44EF314CF84F7DB702A592FD5A983F32C45BC9F8E8454226F7B75417771C7586
C5207D5198C8C2CDDAA9E69ABB47FC173DC20367FC31310F621C6A133B6CF5F0
B87BBA64BC9DF229425D9174A86A9A446A7D34D1C7CD1B5E0D3667D96E784A06
F807F521584B91E8A3468347C178D267E232E6C8F6A73F3D51A278C845FC9F1D
460DFDB0F7414DAA4D922C7FFD09174D9FFC333686608C9A0640712D8E5CF9CF
A6BB12C1DEBE846FC4E7CA7B74D90761F45C75E209CA30621175D2EE1685A1CD
CF8E2E39026B45DAF74082BDFB989E295588AE90081E19A6B167A61D7223F587
F11F34D6A95602F623E2BEC1BBD917B04F58B1ABA7450A7E835C25B3CA9B1672
2136197D4F547D135AB00DA7BCD96337CE6C539C3DD71F8BA7ABC2D1601AD701
86D3D3F5DD9E2F0A00776FA66CD2CC3AA67112115A28379B6F9C9C7388BED06D
9F94A28AE5C85C580BEF0011367F3CA84A45E91B1CF6071EB2491BE0ECEA6A3B
BF4A934649873CE0A2358A6F8990ECBCC67635EB80AD4D59D0166E5A0CDBD95A
EF45735D758F349DC416CD25B3BB5EDFDB01F4AD6BC2C99ADF39D51C15F7E21E
B6079DA7BEA97D297CFF3CA15FCC65214FC056575DAFD006DFEBCEEC3D20CD9B
5DFC61A13EEB34C10F52FB0BA348FB9189DDA1F0864C1154CD0EDEE97945C7D2
2078A20B98BDBC4A288CB638730E986C772D3553BE94013C3650BDBB19ACE43E
A55EC605A2F06E781AF153B1454CDF41C5BE1E50A642999B205C8D9E0D6400BE
14A847E47A9A59244FB08D36E4D97F556A12E4B211762CC383AB1DDDD1B63A68
0B3B8AC7DB49517045145BC845005F3B7D376AD95C7CAECC9794680C21F68DFA
270A7837928C53F936C0091E5709B26771E277F9903576E4B057B677E0EB00B3
EA5909AE9F8C7A7445C050B368B4D44E9DE0AA57B595FE1EE11C23088A10DE2D
ECBF3B59D3559E4EB9093F127BDE5171905C86A727ABAD338B9B6A5F66A062D3
DEB079368A3B8AB831D2A59B11710DEDE92BCC6F48E9BB874EA6C9FD4336B1BE
B20C1CA8014E5A7FE6216BA819858A9341F578260807AA36871AF36BF18F4618
3FB3FB2E0E350ADBBB1F999A38DA4E2F127115487248A98DF469E166E6CA6A37
FFF787B53496D4F0808146342C28FA7FF1553A5ABC55186759534320D11E5E9C
BCDAD26DEBDE3C37F427689AFA61A5639432762FE37B0E1F10EBA8A1BC0D0EB8
5EBEBC9E147474AF312FEB033D3BC458FF361003369CEC30D41903DE42AA65A3
EDDCDA144271273135CC575FDD358546393F71FD3B43A10A7B3DF82F0F2E491E
FC9CBF57A14ACD0BBDF260CA70C59058E86C2EC488B2001CF9B6C150E1290B91
C8E1F5395279707756F4B9298E7A4FA8507FB39DA4F58A7DDAB1B3685E90A5CF
0DC70FD61A2152B5CD200832488C566FEF7EADD0A7089A2BF079D1328BA0B66B
4ECE5374794050AA1FD49984C3682E7E7E8E9423E90F8FDF7E0BB7B6ADEE2BC3
D9801A75C59C542CBD36174988C99466CBCE5F838945371F7A7655C6DE483E27
D0A7E14AEA731C65E0DE8D19FC178919368130875B01F2A7507DAB50384571FB
E7B29B0BBA52ECB885FA95BC4C1C383D025EC7C7E0E4B5ADA186D5249FFBF991
BDCC5233FF97C9FCE321913FD49D0C262666085A651FD0B80FB768022CB1C7D5
99A682B09C3F03EA326BD01C5E716A917410492E1B51AB03E20F217FF2EE2229
6E25EEF3EB3ACF4C4A5DFD300C82AE74962941C5648B2B3E246D50765ADACA27
9FF3B830669F86540A4D797EEC897398D4F4DA463A61C0B525F73F52BC8BFDEF
E56D39A2F00E9C69948D9FDB016A1B7D395A6267E6869F6054DBBD1B2B4E8350
63EEEAD020333B2008FF39592EE9267B3B735CDD3BA732F345D02E069D3FF9ED
795AE5F191BA2394302D94202D559A32F30208877B27AAD32E11508C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSSBX10
%!PS-AdobeFont-1.1: CMSSBX10 1.0
%%CreationDate: 1991 Aug 20 16:43:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSSBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSSBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-71 -250 1099 780}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0931DC68A9127B5D4E0B0EC0247B
E3E94556B49E4EAF6EA99F1420405194F4D8D644F28FE1F090E80BF5C7D59585
C1AE46D025A67CD5A59ECBDE2AAF87F725A9843589338F85C6176E7F6DAB2032
74BA5CDC992D97660FDB3962D486E2682550AF11DECBCB7F76A28A4177905B2E
F4767CA41528636EA69E80B3A1D33060B9F0250896EF2431F4530727CBBBCB63
5D0CC646976759E52EB09E65B7110CA7A16EB65E0F9DBD26032DBD90A6964D18
6B8BC2030609B972DA155820C9FA67A1A26B9BC9712A9A5AF82343D16BCC542F
890ED28C0BA88F875CE90B1910D1A8FAFA6506F893CA462FDAA96E2A71ABC8A9
A209E7AEB0E41C5A3ADE180857031416EA0123B75292427B282D9C21D765A8C6
82107AF774BAEFA24DCB2DB22410CA3C540C0F9D108362C9C9C81FD259BFA359
D7289FC6963978B46CCE8744FC96D5F106A59311646E6C4C6E520AAAA9719D68
9032C53E3C38EE31A3E9995FB08207BAF83F0FCEF63A536528839428AD1E8A68
F254B65CEC6ADBDBB524D4639388374A5C74C46DF2FD1A30C7B61995ED32BFFB
7F06514E444BB108F3BE17F643D2BBFCB2947FA98789142D00B63105B09B9F24
86E3FAF44F38E9F91A405408481FAD3B8B60381AC52FE674CE23C2E2F688C244
EB64A97378970E7DEAB6FD875ABAA19DFA10D3FFB5D2AEE741A277B5147C8103
1BB179D97426EFA47587DC7D60856B369CC280AFF938EFE801F7140730187895
5E5405EB740BC38B48A7A84437916B550A65C7069CD0940D54DDFCF2EABBAF6B
ED1681F1E44855C53DEDDE611A36118430BBD52A00C12ECAA9229A2127D1DAD7
9317F24FFF9664FF213D09A408B253755B1CEAEEDF23CE3D344A403925E9D13B
0E53349AB29D984E79A2209455F079FA97503F70E998037D2DF89A7CBE6BF854
9B24C4430A4E3B50F182FF1B0DD5D10B3E1A387AFC56DB3C37800E145649A483
D68755779BBE4CAB36942508360268AB1F6120FF07756D0E88BCCA6C87AD50B4
BC7238AAD9C3FF4F1BF2F7BDD4E0FEFCF82A753E82AD097165F4EE14342B5635
5386273C7FA4C114711E06EA30CF8DFBAA4F0B237D25D5FC06CD22BE788A049B
FAF886D01466D5EA3467CFA325E8495AD42BA9CC6C3B1BB3296C98C184C854D2
E43CDD0D7AC2393FC3EA9581E5E6DC3BAA29125C7ECEA8473F22C9019EDABDB7
8CD4EA4CCE6B2A61BC9E53BE815D49BD43B3F7E10176578A9AFE424FB2177DFB
6BE7507570375F4E93AB4664B8AD119962017F406896F14B653DFDF653D737F7
D509D9C3FA07142A37BB8C8C1C95B91AEBF56FD4D9D6360AD5E8D0699D4F9584
51A2CC6663DC5903CBD27338BD10318025F08E3CC60847B3A2B17AB871CE1176
905A489D85E1AD7D61A7063FA4714B1AC3B3BA92E056088BB14009E42F567524
4EF1F6CE5C1680C1F37E735BF6443EF8A4CC34CD2B2A857C444E1C225F1E33A5
73EF193EBAD1B3CA53A2D9FB280D33BDD83A96204293AA59EABCC981CB087E6A
999484E3C0DD3B410ADCA39781AF2C96D2E12D5B806EED35C162FBD6F090C3D4
5FA8457C9F5A334305B3A98854A6863C779C1607416BC0D913D753E1A802801D
4BB4519334D60BDFDC0B385B362BEDD7445A585FEFB1230B728034C20B7C6975
1385BF0003CA38F994863F349AA58643F854BB8018D8D535E2A33ADD0703DBBD
145393C43B1BBC8EB2CD664729BFCBC9EC8A30A328FFE296F895AB22BCB11149
17B9A0696F0DECF535005260C071EEC3BE6B38C58F762E4E781D4B73F52F5302
A0952AC2692401F6DD6386B5A553D825E1EB51185EA0F800416019B41520BDEE
09582B1237EA269B0BFDC694F242C3914AF29A06B42D71E850A7D391FC22D2B2
8D1333B56B1371D66077629EFC2EBA0767058891E79DCF261D3B47A5487E96AD
DCBF1155BF0AA67041F45FBEAAD30E90508CB04DD58C650E5F2159F3578DE4E5
C8C37A52B87A87C654684EB961A02A3F4FC04E2C52C47B3AD55162762093E199
7E8E09CB65AA4362EE2C2D76CA78681F32ADEADB4BE6D18F600D499DC9E96C74
801BADD3C3AB86DB653383D0ACB75F0875313B6591997B69CF284B5E8D4553EE
C70F0F2178CD96C17A1CB63D5BEF7A167A88C68DA39B6DA4CB37BF268344F834
ED2E1203D9620876E93AEF1957D68998BB4CD3A4C25E81AD2AE326F5D3CD9425
B0AB1F5B64879A44660C1045B95B0FBF74C344E59EA694004C767A8D08464245
184C8A32E6C28BAF016CC5D9A9F47E3E98F820E3A69982C432F2749A1B137609
BB07E65F72BC5DC4F5C535AC522B9833292FBD59A4C1F525F481A777564D1370
DD60F73AD61F1974E03645BC593CD2470B08A2EF02A53235B3AC2F8D0C79749D
4E64E022DD8ABA31E4DDEC170B5A4F8E1112B1AD5F5392E6366BDD1695656F68
841CEF282D8AB1109835D166D690774FF15BB9B46615A9D064DFCDE132781841
A1A717E960170D11B06D1BD8E8B6FD84DBDD769B953519A63759A396B90FB656
43ED08FCC65084E60101838D1AC6A8BB3E68E1CD724C21750D10E1AC432CB1BD
BAFACF2F661D9EC9A3E80A9427D1EBB1262473972048B86499E5402689253E03
EC34AE54A7AA04FDAC79055AF119E85870A94DE385717F2B38AABD4C5482966B
760DE56A0D08CE0CC991F99B1DADF1448C4025CC761CEA8116802C28F1B42855
51AD09724F29D934E045AD88B61803AC950D0762CE829C1E7CDCD8EBC4473172
E002746A4DE8EB233A0A4103EEDAAE1027A892C08E58C15402ECF4BEEBD73EB2
96E3AF8A582980E5F1810ECB14FDD9E8AAC55DE69EB6B95D3AF93A7303AD7091
89F92EB80218F9BDF6897933B9A8AF0B7414D8C6D1892885A340FEFBEB1A9574
7DD7481421C0284C59F2DA993EFFBC13AF997AAE4675FA8C9AE61DEB7268AB02
3C2F3CDBE471D7DFC024362877C8BE3039EB2DCE27DD1B2132682AC9F8EE224D
23E64883186533C95B3056C58005960ED32210524E3A0C4560CF88BA120C6ADF
B0942530ACC8E58ABEB4399307EE4865380042137CFA5688001004D9DCD2D885
617A414692C6D6A6BAB0A90F9CD60F2D1F214B8DECD994D61DF4E83ACA5FA7F6
F2CF9AF1B377C3CC4CE7B83DC9833F4083CC74208E678D0C218F4DE4F83A4159
F06CB75FD52DEE18FC9BBC3CD772EC91F6075AFB64947778C50E930A9741590C
ADE4A3B13FEB26183E62F991D086E7C8903E250BAE8DC171604A1915F5705787
142012E7CB53DE7B6473297FD112381E539702866FDDBA1AAD1EA2FC515AD868
A32AE54EB43F4215EB3FA2415CCEED26DF927BCBA4956C8E4FD558794AF16BC4
4DA29C9499F9A250BB3BCD2097A8D25CD201D835661774EA6B78DEAB32F6EF15
C9BBB8A58435430490F0A74A0606F6A1D83DE94CFE4B2DF125728EDD02629443
29E3D8C160DBE3381097478E30381E8FADEA4F2B8C1530B646AC20E48B29B335
EA6DD55DDF13DB5AB233ECCCB713678739E7BFBBE3AF626FEAE6CACD173F28E2
3CDD25C7548AE576F84750ADBA94140329A6F3A6DB3442BC332886D1B32B7948
80D80E7B71ACB639CE534E7AA8D0314F181817EE1FF54C5D84F1B3F060C80B1B
FD33E97E075CAC91C1478A1DC785B60657ECBE05400970AF2734DE1CA4956A8C
FC32DCD5070B1E8A55949FFD083048E36F4B6BD75300ECFF20F8258F4F3369CF
7A1F723D9176AAA1EBA30D81EC750600948CC07ADBD78612BA25C610A02371EB
B70A2485C2117E627E9C1C4649AF8636673A66352CE01E6CD216984D2BEF7FA1
64E7FE62012D54FA6E359703B7A8A5C9BF897A7F7AFE50CC8A6E46704F432527
67BAD229A677C91142B7D71A334F2D2490A37983FA874B6087F0E779FD6A6CC8
4F9D914567E8AE6586F63EC5ABFC0256C945DB5B55E52C4DE310E40E4C46F019
414F20D3914410656B593CC09B566ECC2381992F783EE65A589B6CECB2049291
025761CC855820660B3C07E2ED38DC0A214E3CC69DB894B169995BE583DE0193
332B268598ECD7CA606E67F7B132C25411FFB4FF1550F4D6F39E0C630D1CE59A
90BB605B17B8E78F4B9F1E6A8A8037A54D3C492E92B685C56E2FE0EEB3A47DFE
CC36C4CC7342F5BF16D4741BC541AF320BECF690A5F2288D619DD483732B92E4
3D0A38CFF14E4397DF4C374560CFA918A22D383EE44D4E7FA65B5AF3C9FE27EE
54136EEB17A6AAA495011B126F6785AA6B113284A84E36918F119421F750F6FA
51813A7615953FF96D43FCB4C47A7CC6C531BF8DFCA3F381EF9DAE404282E828
ABFDFF51AE5BD849227C0A926845B41973681C1B03090308E4CFEC7B6836CF49
90FC7903B9E048A697FA752B006127C84D90781F4FE7D661DF570A205A633149
6F3901B756D69450C5F7782D689F50768E82948534BBCF36F6027A42D4F53754
73586E769482F11C0FE1A95B9A6F7154B626C5EFC29E3B56CEA413CC7912EBA7
5586A11B262299C2B49F246045E91D2E735E312C487C4A6E1A36A9619979627D
749250304B2B6CF0809EC4B3AB9CA5AF9FBA4ACA7C7A058099110619791A7283
1F01D0630D80DD5F58C3A737C357B29F69F416F350B8EFEA228A183D32F05C97
529CE772B3DB7DB4D5B8C1B50D34CD863C53ED281DC8E2C44851B8D8ED3502DD
05AD2E97747EA16D869BDC02EDE1C7F74127556BB2FBBC4B9B82E000D6D6E2B4
5B5E3346D59917A1BDC1449161BFF093A20C2DF27F61590B0354036402283864
0A5029B1C60F0DFC41D36A561833EF600D486DBB38692396A7954F58750BA495
F5976835FC7307909F7E9629C3B75329A390B1C886F87E01238A1892FEB4C2CF
678B6ADEA22B6B90B8F26D47502B439D3C3CEB5007E258F82175F9F79390D27D
D33DFA21B4EFA36C95D73F50CE2A86CAF8BA01AC8B864B8C0F3303AEE12BDFE0
56258AE3DF55CB77784530D8FEF47745B9E6D2CEEA90C04A6CCCCC0488508799
28B3F5875848F00387B8F162B0DE8E24D35D32A51E543AE46A723BFFA0FCACD0
49B70C9F45E203712639B46CF8DBDAF7A77505066DA46ABA20AD05A77708E1B6
7CDB2B50C7C3C551FCCEC142E58557398FFEFB7626BE2F84FCE328DE6DE2E890
8806E3813007C3364BA2EF1F5F555A41FA2FFEC1CFDD8729699923C2F12CD470
D8807E65E9B9B93429401FE2CB8A7D420FFD960B5F407EFE0DBB57D9168E4816
FF6FA5704B24F7C03705A9BBA42FFC77D8D42341C5869FEC21F1781A8B99DDFE
30B5CEE683F57135164397ECCB5DDCC5C8D8F3350253D72E651BB74F3A2E3E26
B531B7E9C646C3FFB9E43A47D305E463E8DFC95F1E76E166B578F3407B7985CB
93973F5C6684B9CD84956B612648EEEF31604DF6BFB0EAA402F5C714241EB774
78F7B993B9B913814FCCB8DEAEDC802DD5E38F5CA9C577675453E2CA7003EDE6
6E1542F1CACADCF4310DD5E96D364AB507A86D20977ED889E2320F627EA6F5FE
A73496E3A70C11CB51F06015D2BF967C730157F1309CC0913CE04A7B6066F68F
48C7572F7120ADF98D6955C9FF39BB4903AA312672AE8C4B29171DFD4976114C
300792C9E7AF875195E16B7636621FF10AB573EDA81B063D777050FB5AA46BBE
5B543EFDF2ED11C6D65876FBA427151E70811484139E12CCA0F8200F2E882FD6
3B664138C66D24D9BCB0C9928E0E00CDBE6A200C94AC2D091412515F9100AF7A
5EF209E4F2E60DF8B0A465D07D9B9E27F1213C4F8DF16D3F009890D23E44668D
76089EF89D14E65E0F85CC8B39C791A8DF9D7C0A3DE0D58F3239A2FC44168A81
FEC0D77B81648A83FE38ECC53F605A4619CABA2C57655EB4B798E0DBC4C08CBE
8FB90218EA586B968571EF485463695098EAAA5C22F5C55DD44BD951A1E1EE08
39597A587B58E2DC4C7577AD31C82D3CCEB9385CD93E5C589E18545D6E223112
EACC8DBEEA4BF0D4E1AE9AC3E2716983D0927AF428A97B3EA157C01D0FDF6BBF
60747AD9092D51BC0B82B570903F6F002873CEF9A60E99824244CE3EECABA728
656992A81B776C1FB2A7A3191A4CCC2EF7CD51AE4EE7E7C1669C260A5192BB95
B1776376BF9D89C08B89C9D35301886CD5D68F319B2709F06B6784C38AD6413C
82C89DE5BD781F3B7161828DEC6D8CB56FBDE70B569F0C77344BB6683BF895B4
5FD33A30FE176CF9E112391ADF19E5F183BB04F78849E13979C86B2ED2489169
D595320C471E9B13ECB5965AE2881257D15932D7768B8799A024469247B49826
ACE28DD4F87A33168947905516DB19D058B44D1A1F0A5A50B66ADAF44CD13739
62863D9A06090B2A5A7DAAA82235D9736435E906135D97FB98867DDB81F77684
2CAA6C2CECB895D1434CE27550A4D8A09EF8A96CF80EA2958C1181C8E9FCE9AB
CB3071FDF4740360DC775AF80EB2CDBFA6AB2BD1BC7E223ABFF96B184C4F59F9
009690D1EB1371D8CEF3B0350064EA16157B5D9A5F30B53E547BB11987E8F667
EE82F8AD5743CA18564B626B02C870C5531D8898BF9B9F836D20FC900A3962E7
14026A4605748099E9F6E9207650C253A90B0D9489238ED1B8BE644134FFF254
A697B764D5EFBB546D22CB59B8AA89462BA91928987AB0B206F88F345CC9F4FA
54673452D38F3ADE17651DAD5B3611993AB51D3EB45A62DE0A57C75A215B049A
2EAD8030D0F9BC330656AE3CFF05D1035F860D3F414AD65F5C8B0899F5A956C7
F997968E19FA774FC4EDDF8A35B64E4DA3E40B3565FEBAF7C2E9B32A49CE86BA
0C5FA487317BC91BB930CDE4BFD5E34A5786AE4599FBB9D00F649297CE838942
E050B56CD75DE0470BBEE089B6159FD2C5DE0C33DB02F770089E395EE82245B7
03CFDC15D987B4D2B9677380B1C38325620F2D1C8650B93F5FD6121D58A4C106
032C91FB1EC60D66EFF721DB728B99824AB9B856A69D64F63CA6C0BDBEE31F1D
946AA3B7EFDF47540026C4450B4AB8667824A1C83FB9A2D26257E17777782B90
5EA1611F356EA599D16BCD44FFF69F705916146C6AF57B19E2B9CE7ABDF1FC42
A1F7C67473BBBF07C57AC93C834588D4713F0C895944858C580A00C91605288D
79200B03A4B3428E114138EDEB7A7F74C8A801A1847B43A00B0ABFB955AD6823
16FB4AD1B4A4C39C7519B7980D87ADE49E2D77DA1035C92BCCA86DB8523F8245
60A6968E32CDF9623042725105C55139855C2CE2276DA9BB303CC5FCD180D68D
F8A83A4D3EDBD76BD1AF1FF7392E142EC8AFB7B53ED48DD5231E1D4F30341F06
1B4EC02F3C5251425337CE141191225188A593BA3F71DC8CF1FF621A8FF50962
A70CFB03A2BAF7BAC15AC705BB0A4CA1A46D6671767FA0FCBEE15500EF2F869A
9A07EFDCD5E95565571329A697425EE1008F66E30E7008EF6ECE0A13B240F751
A42B98F0978FB704B9B244F406F304A3BD583C8E4B5A0C982280557E7636AFD3
73A051CA3A79DD9DB0FA7F7B6D8AE8965071F75F6E9539A48187D92A3A10F55D
ECA120FE50981870C5641B29015F8C5DE7D1350FE8AB60C4B2D9EC167DCC4CF0
8B65AE3D7A5D890BE3D5D3E5864E140F5A09D068D5200F0AD31BC764E02EE8E6
B9BFD5EB14694BDC086C9203E7AD421DE7437E7BAE784646BF39A37EE178D738
BB959FF4F1F43DB4E36D971436059F092F82EB7AA366F3E40A0FF1D884662264
5438F36AF6726F82A4FF34BAAB04E9246163C5A40B2677F5E76E9F0EF585B373
9D377312217F243CCA3DC968AA2FDBFF767E70AD6F12BC70F62E4D471BEE3D78
70D9B84E68236B870AFFB3C496BBD832FB6175EECE4316079401DD407D5C7817
B92F1A589ECA4783B48090D8EF336654B560638ECF525C5E0F0AF817DEE39F93
65B251EE1C3F8CDEF73DB3A6974E8D96F501F96295C294AEF853B434CA2D18D6
49153EA92C5820EBBC1FA9612DBB723E06D12AF1E3F1B6F21BC52019F0A94193
D19BB4E4E51D79494B20F99F3F3210AF28DD4B0D72A4B4AF26DE779E8F271A79
331F84D8B8A935601EEC0AE26ECA610C82446C45DFFD9F0CAA185076E55D8383
8CBA7DCA433FDB35185CCC99391A8971B3ACA9EACF1625D31796488DADC83C19
8DAFAF4547D248CB0FCF1720C5007CA0CFC8D6003E14C273A29700E33679FE4C
27FED78074DC2052C3B75B1A8B5CE189439125B6A9B5FFC7434E7F5D8E861D51
F5AFC323942CB743F1E7A49898DCF352D4F5EA0CDB56456E5C1C7A9B201BAD57
6EEC428F952DCD449C9BE3F03C44CB5F10E971E5BD28D9FF59458729A78894F1
5F898D49BA7B43AE64872B4CC22A9F82D3C7AE044D85B1B60C63BF685A626695
D3A2DAF6240990D7F9F3242C268FC8302F63E8ED99CE97A4ABCC8E9EBEEE6B13
28D94792F337C7E8F1835825E732C7F983D5FBF497127B55F0B0FB5F52272A10
C3FFF070033D945F3FAEB3078B547DF8443DA6987B574AD3777F0596885308F7
532CDEE8713CFE6D803571927F032FF52CF686E175A1C077953854394E064E2C
83B7030951F8326DB222AC802CE118E2007B2C8FAF0F220EB91D53B6F41D18E6
69BBBE8E1290BD37BEFD8200CD174C168C031CEEB636F5709C45786F2EEF747C
9FEDF5122F5C1A6526378C70FE0084C1C515E625FA8005B0B668A1D375A934B2
0D0625D02470748B7566AE3C804937F8F6D938C2277798D270771DE798876CF0
BA78C8D19CEDC9B74CC16C125EA9A9E745F2314A9654B223335065A3845BFCAB
05F8B4981569CE27EC2E1177DDC5173FE75F2B8AE8AD5107B506DF82F7BD2A85
E069A17270EBF7D8900430020176870953BFB3DA256678C07CB7F29A709F5CBF
AC221F2E169A5E1842D511F5A335329796A7F30FF73C8DC5453C464567C35878
31C4E4C0E65D3C23AB3218BA37D078B4226622C73B818CAF48265E8F814EE766
2336982827663233D8314DBA2B4881550AF41FCFEF162AEECDCEAF38AE6AE3A7
641916FB1FBC97FF7665722EF43692906956E77F3F22324B77CB57801D393201
788A696477348259CC3C817FFB211D430F8CE624A3AFAA4E271C4D3661F60500
673152F83235E282F64D3B943010834366A7CE642AD4D2EBC3812BA7C311574E
44A2449EA7D2577F51FE24E0D521722420272473E378270B7BD1EC6E7A1B019D
C9F0E24AF09508A8791E0726592F09F0E97E27BBA37ACF448E505DE7D29AB607
3B9A458571E800030F68296AFC85B5F70987930AEDEFA095C764FD4845D920C9
D7B46579F2775D87A5F7CEB068EDB5107015DB1AB11AE3BA0E7CA6D24B656D6B
1877E0EEC58F375FCAA6768E2182BD59B9B200AF3DB235C5BFEDFD3FE5762D59
E56CA35065934A3DAC1D55185B73D10D6DE2644F55C96774290AD979A40FFA47
8A85BDCB448DDB08040882C9BA24FEF39B3A931F3CDF50B79857FD5193759F52
830216BD86AB694994545EC73F8B1DFFCED1863A203E5DF68E8912A665F8287E
06A55DAFD861E97D4E97613A49CCA86EB57E9F5B6015BE5CD78473918A861634
C8CCC9C98766379F6FC55C52156386F0F92B08BD1F1B1CB62BE01D198A1271B8
FA5F73A8C5A65260F91EA9B79B0CDC0090F8455A50DBB24696142C0C6DFBD2FC
4E4985E7BCC30351B82032E8F9DC975B917ACC50E87F0B5CDBE042B15B5C08C5
7412EDCBCB8943BFA8548A23AFB548A6FDB10D71E79FC688931D96A851512317
0F9A76986C1D02F168599641EAA29DC0786668A030C9E4362DB36607BE91E6D3
6AA90298D8DE0A086C7B0EEC5994D006362DCA874F7A8ADF4F17131B9A8C7593
2F59D73D87DFED2A63689D7D8C4441F2B082396A72D8E926C0E3F0C79914C73A
76EF9352592BD3A350402F877874B661F06E83D1827ACA4D729551FAA8070032
AB6C2BA55AAACC66CB46D35A73B46B5FA7903D5D4E5ADE7DC47BE059E076DDE5
E72BEBA51055210CB17C23061693A7A4AF425A2D80339C2F9D43B8B326FA7BAE
B6D4F1430CC1C6A0102A6145D03083DAA03DADECB73B79B09E849861E1B05584
577B1EC4046EA02A1A66B318C16A39C0AEEE3FDCFAF70D40265813B246A8D54B
50B7045B8471443019FB32EEC88159DB85FD1309B2AE881E1874186D0D453E9D
288295A75673B72A9BB4276179CE6E7164BBA8368924A0AA6E877BF5B17ACD69
8D9B03CBB8D70297D335F45412FA104868A3498AFA9E689AF496928B1B72C2C0
9F1A0E3F54CF4A9851042113402A0931C3263AD7EAC374D2E2C3689BEB8F1CFC
5BEE244C36A5CBD1EC99E61CB60D04D0E2553859EF0C28A717B5670770015B26
538CAC80C3680036C2D6F531838A762B6C010FA5BDE056B8735F27C416C609A1
BFBA66DE9F9AA02753E715C0C78E1F39D52641FA1D05B454CCDDC8B1024A19BF
4DA4241228C244D80EA7424CCA4B0CDE53636B12BC2975DAF41E06826F49882C
3EF8980958BB58E43D7758FD5FB7B68E8DF3CC383C7CA53CF78BACBFBD42EC81
5DAF3ECF1DEF8515BC767F7950DA968282B61E0A5DD0D4911DD45EBFD0F3169A
B11663DAE471D3B2FE05D2C8CB7C529077CF4E8F901E39E867765C1418A0E209
4EDDF740FB60862ABFA4FAB2C9BB7FB724C5532919980D75397ABF8C8DBF57DD
AC6FC1FB8D81D8D41F48D98733C57226DA5D1D36214A922E6CF2EC54D7936397
D33C63BA05296D2A9FFDF98AC42A5EC1D4F0DB0C9CCA20FE0BC74F1F532D301A
38EEE92D56AD764FB18F57BD18E77CE3C7F1E81164F3779638919B598F9F0F0C
6CC8583D91586FF8A47D1DD9D675A7FF5FBC93AF3C624BAF21CD0270EDBC0900
6EF4D408B91CD1D3B170F173D9D6B7DECA642DE15A2FAF08E890537498AC89DE
4E7D7066BE308BFDC09026DD7C61351EDD93C4032518B217A1EFC392F47B2040
4D7488E6DFFC6CB6B7A50B13B4031838C7AA9EE70D120E47223C8C7302A884FE
4BF80987F3DF73B6CF02EC300BF4C95DAD357708FA822F1184DE746F7D309620
5185AB57D28A1C833B26AAF7D2F86AC3BD391A8EADCC15FD03DDAB3A63B57CEF

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
C627A8BFEF75B4DEFAF34B44B356A516B765AFCDD3F5475B1F928731D09D2170
B97E40F12CCEDF4F6BB3756C4734F6E98D74B7E942A954B1BAAB83D4AD727FF6
DF6DC50B2223BCB5568A73A112E4860AD490554E64E780073FF3399CB4688D33
9E8829667CD6EAEF25E0C7D2D44F2BBFA40E999325F9561514844221B50BC8FC
4C7AD68CA7220D69125C2AF06849A3E068D18733276F0C0A6A2936D3C2C87CDE
59CD1AF148C44F85784A5DAD569F5FF53C061056C067CE29AEF1E3BD1FD8B0B8
71A0A638CDAC6AEEDBD5337D4683C084BB60B1859E600F59CB4E19C5FC5C6327
EC544A68134496A9BD0B87D83AF6FDA3CB62FBF0B54FACE1F0E6A2D84B467AFF
0F62DB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 73 /I put
dup 86 /V put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
956017667C419C4021DA92976C7550A196C257FC2124E6F6653FAEA9ECD781C6
793D55009809849DCD349D18C46B7072E96A292E937463E1671EFEF393030EF2
3127AEE8F957106A8BAE6B4C2B8779DF8696E89827DCA921262DA3AA9FC95C70
2EA73E6054D1B61C959561A8234E653517458390440940E6268439CCC577FC79
0D70B6EC81226C7149F9AE10B26440AEE18E74540B1FF31B1171A9096B59CD56
41A00FA20C5D7D94D23F8F4CDEDB5962C793A78A4A84964125345E627D28C32C
E0A7D130D5E4D94AF39BBAD80DF68545FEE28B16EB2698827BE66A429C31EC24
5841E4B19C9B05C0965693A732B5A9D33B51969F2CE43EC2D0D165D420D50F1C
A33810957AF6DD148573DCC759D7E75A6897FFD46F63FD798D71184F21D98C3A
E219DAF0255BBB1C9F6AEA33839FEEB87353852931A84B5DBE3E736397DBC3E1
C1053A1FBD63846B852E605DA15F2BC0B04972326416526B03D09C1E9A5C51F5
111000A5101DF1D8947FE448288B65B5E8975A943C00D37D59F2512EDD02D808
B086756F4AE8D78852645E3205949BD664EFB6287099802548849C52011A2744
846ADA1455D1AD93897A6E3697E7ED8936351AD83A5DB8C15A590AB5550CC384
4441E693A93BAFABA38A59DD048AE97EB35FA0C4EA29C314F0C4540B5E1AF406
5A07C34BA635D26D838CBD3B03CBA0AF006A1724FD7878E7A064967CB923F5FC
203C5296AF97B7B49541F7886E36BAA55AA400233A90FC23D94C42F1A7323C70
0A4EC73365D126BC38C3D83B428F46DFA94C994347A1A4F38F35DBD3FDC9897B
E3CDFB6B90F2AABABFE6BBB55E869BEF003E919D58D0F72A89A4778F511BB34A
86CACDC4BC9ED52B55DC8E89DFB99F6925FC17B1C26ABB8993892CEB1221B236
C83BFA25C611D5CDABA3EBD3123092953410636D24D1832DC7474753CC66B9ED
74117B88782F0A27254117D1E74B1D5BFFD2A3ECB981CD6A0D569D5F48B40CDD
1D6590FF58C56BCAC510C961DDC023FE7859F5582A34C87A994298F3389B8DB5
843DE4EA96AF01CF815C1989DD3D3B51EFF6E0ADF7419DBBFD0C40349E185983
3704BE937270EA9223CC54C89707138574F17724D8EC3D199FC1DAC561EF31B8
0C61C18CAC7DD742377E7B17010A6501267F63CAA3E8F0FF8EB1D436CCCC3F7F
3C022117F8A90FCA5358159796B046DE035610EB18DB00162DA850BE16EBCAE1
B34C4B6483540EF87D9FC330C2A3E6617B3007A5C563B6E6803C78CFA5EC5C8F
2168799A21DE0AC9138224BF0EECCB23D20F6C76FB1A86F162D65288A4A5FA47
FC0EE290A353312DE341B5431A895465D0031A50E39524EFC3E383D73E7A383E
7F97C805F395B21DEBFE1706D2E9CAAB78EB2003C795DAE79F24D7DC38E58A31
4F196A1EEEAB13A4440667C94DA8B52287F500862847F98A52307C91A52EE504
F3E60A8E7424886C88E47205C61694C48F343F555A845966935AEBE4DCCE517F
7D20855582293C62A217481483D7461C777DBA869816CA32C9CAE9A78E7C2742
A23CD7C76D6B07CFE02D21CDC44C2DA226D9AA857595EEBE274492712F0A65E6
7E6551C405155F28E26806485BEC10A2EC5C4A700BC60E23290E91E68BAD5F4B
35489DE72F14D6F2C3CA9EFC2F85AD23B4A3D0136FA6517C5A024762ABADF579
D5DAD7A545A42C32BA0D60FB960C50648CF8E3E422905519E74A2C23887258A1
B9F9E364D471DB1921C918EB2DE1171A33F7CD8AA7B13272FBD40A320D5BD471
8B6057E6235F3EB1492D9CF47B61C15CAA1066CAC1827BD488EA14BC62BF85E3
9F047753140B8408C425D57B1377CBE4DAF74A95CC22BB23
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.1: CMSS10 1.0
%%CreationDate: 1991 Aug 20 17:33:34
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 58 /colon put
dup 64 /at put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-61 -250 999 759}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BDCEEA888D07B439DBD4E8B4C9
D198C03874B5E6F8FBF4922065A92BC3E66D05DE53971CB1424510E892442858
D69CE1F76E4DA76C87C763A4B2FE36321E54B1328C9155B8ED6361855A151723
3386AEA3D042B8D89C8C0E9A33E5DF3B466F7BB8C2C8A4ED4CDAFF55FC6D3EE6
0AF2CEBFC1AC3A6E6692F8BB81F82D86BAE85016AD62FCB05467082C2E5AD348
44D1439C2B59F65590E57CA0DE481A7A34E79931B1513C4C30156170409A4BB8
46D412D1DAF88AD30722F12DBCA1CCC6B4BCC28D06B0D29149DDEC520C8FBA13
6B82E2E1790F00B216282FF122EF0D47B70A1B29514DDF7C0435ED238C14BDF5
6DA243117FBEF7398F97EB95597707ED63C6797EBA1B46EA19ABB1DABDA171B3
16CD500F5D64CBFBE4F9CBC3E66A34427D3C4D0C432710289381F9BFD91B4FF4
1E3A896C3EEA2F3105C218877D6C0C6B763760FA364D00065E1CAE9DCB5676ED
286A9ED0D1C946DCA6A2A670EE0936FB4706CC62E234CFEED34AA615C48D2872
A087F30990C85E64BA68F3D5C117123467DB411C9F2D6F6858CC70C1E352C477
713097321B4C4FD4C5CDE305415F998E7245908EEDE6E056A736EA77BD8C639C
3A79FFD0B74B3D28F0494A115F2841CF8A8827AB5608F96FD8998A5F40FB3DFE
3AA0C7696DE4E1D18DC0D6E84B943175FC38FFC42A9C0CBB13A908978C98BFE5
034F88480F32B9DEB2FD228FF6CB0B89B045AB02020C82E3F5716DC640613185
9F597CE262729BC52132F43922B9E28BB71A30AC8709634561B22D13C4FAFE0A
12C4451969226B220038AD8DDA990A4E2CAD53DBEAB698898BBD3046234EB4EA
901287E71CB41296C431383AB85F18882F65BE36923F6C0FD6FADCB53E96A535
EDA5C0F2C45A9AF09A777DBE07E51C58A5B2A572F4725D2AAB457B12F3B321A8
FCAC1A5B0BCA632E85DCED945A5AB6441FF6BF9DA3449524B8E4DF42A2C4349F
68D0C661FF1FF764E95137D1328DE0E69D9E118FC21891EA5A24100135F8E3E9
9F7B237B695D7E869F33CE624106653A173D47D6DA05440685CB3F9546A3FF2C
3503064865D3586E21FDA3A2623CB54ACB45FAFE3A0C414972AC582A5759DFE9
C5C5BF3793B737E2425EAB29208F737C5448FDB210BB8C66441E2961E763F3FD
815573AFD79A0DB483193AB70F1AAB7A202CFE053B668989176740B4E7F82313
5227321AE256439E0BFBF839605390D8CC9B820F2864C6549F419F2F2D07AF2E
D1B826DB0C5F5F166E2A1E6FFB1DFD88EBD21277CF5C3B0552654AFF7232E591
385851DA91B53269D2C4D6616227C8ADADACAA4DD3AB0BFF20DE0C5DF4B0B98D
1FBBE9BA43B87A7132C9F57EAD9CFA272D18E744658EF2521ACC09E5B3FE6DED
170EF337F42A3248981CD545CDD824A86B2DB526A9DD12C0484A21B661FB9B41
9DC6D26F7C47F6D2A9CF48CA01D34626F0A36B6C998E2EF4E4645850CD18D7AB
4327B3B1FC00998817C0250FB907D2EEBD053501C9E8B853F5CA3201C22DE2AD
762857B8ACEA23E36431A02524FC6896E29BDD82963C29D711E80E7D522E93C0
F7DBC60CED6698F5EB6E3354014B6CDB33E3D01DD650D3CA7F75A51913BE0DD2
A5C2E4C28FC583FAAE3FEB25F57803B36243002E7E5A312D0F35CBF2B9590EFF
0CD81A14903FB775313D4453CA2EC692779479B950BB084558F3F4B724AFB550
1AD262E50EC2413F6FCDE4D27D120956C0F13FBB6879AC67E7CD6DA6CB02B390
1A4C82EADA2BDF9AC30AFE57889F4CFB114B13867C02442145239127D4F37079
45DD8E19D326C31D69222262459E1D0A157FDA65B1CA7E402265589BE54C451C
DE5C8564FAA3DDC9BE0B7736F918A25E52120DE514542D3E60DBC32B10CF6675
BBD0DC346B16538828988C347BB61A36A2B4DDFCF674B5D11CF8911211AD6778
D07B0980CF1429F17869F5D306B31983B1E439F10B6A05AD9E0E72EE8617438C
0726DBD3FD205A0C502FB1E99C92DBB8A6524E211CF9E52AAAC230467121C620
2AA99CA4ABBB11A02B25F4FD731A101CC8112F26ED640F2C53C38FAD59D0AABF
44D5F47F09306D2F261E0A886E4CAE4B00D8BA04EB30EA1C83C8176AE88AFCBF
F7933609C3AC4DE10F6E591EBFDA65AF7A60E15F60426F15F4A84F9ABEBC70AB
2370381318E27FE409FEF91A25AC8E7D34CA58888A7C38DFABA4DF723C5DA741
23F8DDB02F8B1307FE384B188654EF8BBC89F4D53FE93CBBDDCDBF9D2B59D1F8
B8FC91B0A814519AF422CBC8B29BD21862260184FC1A5BC114599EE7F16B27A0
D9028367DDAE3E627185A4AE43534E9ECCEF4554945EA25C508882332E7098F0
4E1E1B90E8109F306392CA780E594BF21694ACF52097F80A2D941A86CCC9AEF3
781B8E89C96AA30DB131F0AD18EBC310EE024C2FE5A253939DB3E13F483F1C45
CD9B6BFD4471EF04669B21A417EA49832DD79938DBAA5A68709C72C2FB81961C
7E335F0B575B34C4D2E620E80359E41375EAA0AF935E0641BBC7E9D5BC1B109C
549BE90912F0F0D691A63A955231AC8E53BAE451DA2780F348D0971C6E6C4C47
5C5A4A096D9E3BC77062EB81AD7B75BFE8E33ECCEFC15D5D15CF9B2C0EE30070
853042A62513F0395C511CA6A96D551ED18264C9B80870F4FD4A2E7A062FD243
03CA4440FEF8C1F482439940EFE7952E6AA0178F208B95BA6EB141D1AF8E69C0
8DFBA0936CC5378FBA9039DA2ADBB0646B61C11762A63D023267E9184B2AD968
10B5945EF917693B13C2F54B2C0D9BCC02DD25C1399C23F9D15AC9F3EB2E1D9B
FEBB48B74B55507C919E05028EFDC7138028DEF8A69BC5642C4C2F07C31EBC9A
95DBF96E573591AFCD029A80BBF15A37E0952D1A0C213DB71D9D074031D5F064
328A519786E0CAA94D3B74770F31F561553C4D7D39D5D065C455700E4D6520AD
80B05B0D68ABECB7715BBEDF43E5043A8CE98D087FABC689D2BEE5BCEC727ED5
50D096A21F7425F4A2E6EBD9BF210F11EB0EBF0FE61D750B87D2C80BA1623FAE
E3F7636CA5FCEEEFA8F40C5F9050B6181ED1920FC075305027D35CE93156EBFC
B70F0874D5AA8437AA2ABA223A750ECEEDAE50CDE3D89A94522B595EC3E110A4
60BF7578DF863B90D00C5EFA024C471F1CAF7D3843BD389362D5A719C735C1C4
C641D24F2CF89D60504EA2C286F62C2B73C8DF4137B4C7A9CFDF72E012916231
6CE27361959BBF124B46C0526B4E02AF6EFCB0BFA0299F87A86C2C5DDD91CD33
6A2AD41AA7AD0C0D08C742CC56F2805B40D7A230D70B1CF4D594E0FD33A7D5A5
E7E22413ED4A5990A796B80233E83901AFD61CFA089FFC439600D3CDC9714D16
126D381DD36FB4579E497086C11D9CB0A7A76088599D35FBF07A8085350A97B1
78A1CBD83EF4D6BE1F94BA9DCB8F024B780A8DCDECA733490FF9C592A0DABEFD
567715FBE6DF9492800B0C5F52EBC933734B18CE2BBF04F3C6CEC0EBF455E0BB
322308B449D42005BA494590EAC6A294E017F6E428F7CB45768E5723E0287FFF
B3FF2689713DF2AE6C5BCDBE77AAC2CC185EA2AF9C33B63E1A8AE368F6B99708
57FF06365D829CA93EF40E803AC449D0EA4C54F56595981A383E895045E299C9
2C96E8139E344596CB4FCF774B532306638F68585342BEBE2058E099D1ACDD43
8C856A70CC391845EA73CB63871DCB345728C9752D1E21F989028D97379A5BFF
7AE74E5E6C3E2504A82D91F7CB641BCA2530FB4C988B206A5557CD571AD7303C
096F6A8335DAD34486E8AC5B35A3AFAA01C21C2AC839F533188F8A9A1AF5D2F8
5A0A2256ACA31F92EEA5E884E9E2AEEEAB52320BC6EF090E59CB083343107B5C
FD697ACEB5415249330771AF9A555993B862CCF1A31E1DF0417F99AFB1CC0ED7
EC8E53C856203CB8AC2AF1A2F967971E0BD5B8207F189988ABDDFE80C147F93B
2D6FFF86F34A298AA8150D21EF7D0A3BEAF68F7B6A33C791601165455F4F1185
F1555F7C4813BEECEE7CC114113370AF0B044541347EB84CB95BE28FC08BE2CF
1C3821E985821A72FA516573651868CFF89ACFC8873332E3D121E7F3402840FB
C2652F71DBD3ED4980AE65AAC07B9DEED7C2D0D0BD78CB5C3047ADC883FF67A8
3C6C25585D5CB039C308613E83D62DD829624907C991D20728935AFE6895866E
DF711B96713C9BDA905C600431A19ACE1DDD65564E299E90259F5013B638FC1D
0490037F3DEF412FD5371A096901A96F73E8D8E1206543816F7953B849F8804B
DC2F28819C3F0609F940459ED057356E0711DAF02128A96FF2EFC5793F50160D
A8F0ABC4DC036965FDF2A018B14C8B54FD82BF1EF78531BEDE4CF31D3B114333
68317E0E1F2F620C450001183B3B27F51F2BBEF3A80560046A925A600E58F81A
1A217F72C2C646CEE27D16A6098A7F914B408A74B69915379853EABA01412D84
53036951271EE7C8364EBDDC7492D7995B9DBE88AF610C5F64565B606170C5EA
7DF55C0D65431DD08616010886C3D4393F3CF1DA4DA4D2C8763236E6868508A6
AABE228F498B51D6EB555E5BF7A2FFD8BBAE970648194F943B143E0E7A1DDF27
36A00DC7C78739399BA5594365FA672F538F7B7AA09EF5D1E72F69138A374F50
2BA9B716789B01213B2EC1240BBE1622B187EF744090929D6D39301A734E7014
5D46114DF9E39DB32120E2AF4106A4AEC2825063834FB2DD113BDB5D3009A0BF
F3DD4A68BDB0D7859A3E6394DF16621A0FE779D24B09AC3E745B9B99F181BF59
432BE07989929BA307C7EEFFDD93E965A49FA8B9953208B7653AA90CCCF0F528
FE8A8E67744ED4FD897922F34C3017DF92D688C3DAEA88206541E06A8B8F0785
B05858D721A64F2159DC75C1AC54A682893E1922F0B009B6FBD630D87CFD61D2
821BEAE329E25DAEFEE3822FB579FB92B6E65F9AF2531E460F017CD52730E329
85C40710B1AF08836F23F667750CBE15DAAEE660BBB5974D9A678283F42F1B3F
69B224EB3034C62578297C5927FD6BEC963C479889EAE562BCF47F5FA702A9DA
FDE84AB87C7BF716ECB862D9D18D3A5568634899477E7FDDB09D73C9AF0303C6
604CA282D6C0CB108C9CB0AFC9BE5440F2E8D9DFFFAC5FBBB97418AAE02E18EA
3DB565AB3C5A44AF59CF23235167003DD72535658CC11E9CBC2B9757DB522DE2
3AEF178B70D5080009EBA3E0FB7DE6C9E06DC153A0DC7EA9B51E1817B531709D
E628D1992F6A60558B2B8FF43C71793751C5C5787476AC36BA5E0DFF9195F514
75E422D478896A331D8DF76D5D3AD73F6007ABF81CB0F28AD6EEEFEA3EECE2C3
BBC7EC338C508AE52DC33CE4F7717C75484AB57D44918AE44AE414032531294E
D9DDF670642BC2A0891549C6C3C4BDF7627A6A67E8F74806A45FAD60BF950D7E
23791F5159DB48C332A49AFF83CD198E11BD7CFE4E18FDD3FF7FCD0F35D87F6F
9945D0DE45AAF70F0DDD057E1E60BDC646440B757D85D4C48DE81CE9A7092100
1ED08646F4EE08D0B51EB06BC2086A7B8161291E62444549191D7FC7FBD4B834
9755145C2B9D67113EEA348ACC0DBC8628D64E7DBCB4168D1861F9D8836513DE
243A4D5F2979FD586EAA92E985BF317249F9DA0689C4A6473D7EDAD23EB2FB27
A298E68F437F4A0ED62F91FCAE62329BA8151EEA269EE6324BDB3FC8B0DA704B
C7DC7672A10F31B0F2275DF2822D80501FC0C9B805ACFDEB2D9CC26876A58C17
66BFF0AD9B96BCDF6773B952D2169160C1AF9877697B30BB0FAD29A7F441E2C9
3168043F093F0EB8BC694DB0552B775281F0E06E2EBF27059E2BA29828B1F422
F609E8DCF6C55C78F96912DB71BF0DB8C7CA6CD218A7CF0A3514CA2EB4CBC8EF
66B2CBF1EAA964394BD41C10F642D8C2475B441AFC006C6F60E5070338DFF467
84D7FB49CDB5AA615EDCEC83DF29F146FB0AD24E712F8A16058E07FCAEC02568
7D58C4BA15E73F3503E0986BD8066CBC9414C35EBD78731CD2E6DAB5E29F0443
08A4D62C888474CB53763EDDE9F371BE246BB2E15D3FEDF3F64F823BBB43D06A
DB7C0BCC2B2EDF1B48A9BFCE8FFEA9C7CD07BCB9BD0B268A564364841BD12B99
E4F6D913B6301076FBD4DE76C7738FD38B763BBBB402D122BA333D7FC149574B
4349DD83879E3D1B46A4ECC5CEFFCE2EC2777CEEC3402F45EED2EFAE98AAF3BA
E46AB06C360E1CAE90352CBBCC72934D2C833103882D28164D4F9E434464ACD4
1AAE60695127C2756794BB0D534E3A904127A4B6C69BEC0EF4D17135ABD235C8
AF8E28D28893A0B3DE13EDE9CD7634E2F543A15B593FEC1AFAD2DFE4CB4D6C3D
D5FFC67406483B28A93C2770C519EF20AE47EE129BFF006E11EFD9A165565F53
45C55B242CB32AB14BF5D0B9441F769D26D7C376BFE2076E2CE507717F689525
1DA85B83B01E2A74A8F2E64F0D01716B15981B7F14AC2F6603020337D825824F
947569D3E128B7008EA14C61FD40ABDA127B2439875D0EEDF0919EBEBE5D7652
B0E9213DF9A00675CC41E3B781727A2D6812AACA3A31FC1A29794A46D32BBD93
611E7F9CBD034A44901099D31C8575992AFD2544AFCBDACEBADFA28439861CDD
05524360A2B9D9FD1E7D072FF46EE2CB732F2F0886274EEEB75B68C9696394A1
BB4839175E357B438A98AEB1CF71ABB785EF1B5D0E908D32EB4C1186E299999D
649CA8680E198D3D315D18CD779A3D12B35BE5579B24BB775B86FCABAF878144
3E2E96CE105977C389BD7105EB084BCA62BD1A628255C80C894423A12ADB6238
4C3BF25E81CCD48AE66353976BB7A80853A23A361E3F17898FC2F6B2C2BDEEDC
48DD8C70068B21785492002888F65F72371BC71B25A243B48284252466165D50
B21A18254999197B02251F7B2251C0FB8D77FDF68AEF31D10A2F36357F80CDAC
A298EC1C17C957527C21918DF532F17934296ADF57144D4E0A58A13A703F4FC7
95AE4ED095922EEECA15CEF2C65B80CD9C34DB51A5CF18B55677AD619DC248C1
C0624FED0B2D9094FACAEED8D46BAADF0E29B49B4483214E6D24AABB424EBF22
5ACC06B6C418224D07C74794E6CC390B9F1400CFD419B881C78335AB96CD6C14
B9F6C3CE8AD2BCCC783D6179F6C2A54C5376A22419A3FEC9E7E80256DF152D52
AF8F529FFF6FDA31D6CDFB1A9FEEE2BA7EC62D911803D91047C7D28B65BAE00E
50C7A11EA8F66CF8C34873D619262B9A58B30121A905D96D79F1F8823867CA06
9550EF21FAD74FA571635F5BAEAB43EF6AC3C8370B258D564FFE463D8B6AB4CD
952894CBDA5C0DE050D0101720A3ABBBA6646792A6AF932BE1DF670153F0DF65
F7D462F076C626B87CEB11CE02D4D35FC2DE3AEF60930F6EA0EAD8C549EC5514
1B0C0850CB71786800461DE89860B6AF6C177E404445B7655D3A2E5679551CFF
3D57849D897E983D48BD3D86C370462FCFB8DF05159CEC6DFEF779E03487C65C
B20258B3AC79053FF6A68A0C1165FDA7DBF1375FC98AFA1973BDEFD4C7788E90
025D83980513399BF077A58DA2F598E391562229E83C578210BE74922D7B8E05
A6EE840095128A9B0CA6F01C20004D8C6F9367A6D8429F7470BDCFD89599F169
AD7B7B637F49F69093740E4E42C0A8773639E76C3D0EED4974C9E62CFF5B6CB1
AD69CF2B478957917D1C462588DE21AEF0944BD4A9CB27A95A9807E90A052E78
6CC4D98E7489DCC1B13E4CAE423B89D834BBAA4A5EA4EFEAA8E2E5EE58E06056
2341C15A092B90F3AFBE1F3E7BAFAF58CA279254E918DE40C492DFE4FA69354B
DB2BDA3F84946B1AF246E1EED03E7FA9E51E4EA2EA3CCBAA15965A503D227BAB
42F76F6F21313F78EEB3E51A09B40DE7ED91ED05DADCE846106499EB2D0DE3E7
A038A75C5E5D9AC8BCEE6E5890ED922111ABCE2DEA453E2D66A4FBD71A144B64
39CB377615FAD6351A36EF08811DF75CFABC2F347F72C861C1D6CE402D3B331E
4EB62F273EC94BEB32AD669E4A66A1BE2796A640E7C053717D964ABE68D74340
1F60F302C8432E974742DF6B15158B4A97307568C5A16FC63DF7F2D8F52E917D
8B4898B3E9506332350F6A4052BD4701D60651983AD829CF49A2F925BEA54663
004E7DF954A4BFD6BE623FF0006B61E96B59590E9D7670CFE7D46FD7B515CBA1
A56727665115031AE3B6DD4B486836EC7F5B05A5C1B3CAED1D5F4BB321D503E8
83EBACEB2AB02D600550903F1F67B53E6B82D5DBEA69A1E7122C35A76ED2A0B8
0FD783FA90FF973643203170C361B120B435C1ACE61855248BA892971A85E92B
A3C05BF707757124CC0339C11F6C823FB5FA7DA182CFE945EBD4B9A4860BEEB2
3D0AF92213DE0C42C9C2F37FFBEB6F510DFE7AF62D5C7845A93B5D721E78765A
B61A50CE6578A7BBCFB2A9EE29E00BF5488A1AE7BD457D6B00E7C40D508BCF08
34FF186B6B59D92F6A2C2247D31D58EE4238FC7D4230BB46F0CDA16A86BE5611
B7A1D8F69B27BE9599DB6516DB66DF8FA7845E5F101DA1909BFEC43AEFC81577
FC1F3C59460906FC7144A77DA8ADA1D11F775318D8BD41F4110A5780EF34286E
AF393048164C37F36337D6F1404C0851D2BBBB5EA52340345C7B3F395D4EBA1C
B106C19B170B42729D9C1A47D749154E9DD7BC770E32D1BAF751EDAA51449506
9D5E5F3C797162D38649D77B4B2B6B42517B1E57AA6A9CEE5828699FAD15F0B5
8D2B7D5A088BF2EDC6542320054B1C0EE66CCD54C8C3D2BC15ECF293149679FA
F26C30081D3F2652DC60B6385678FFC07079684839FEE558E5C56032F4881109
5C21D8E475A2F3E8632C0867E1DB5588BB22761B6E040388CA0189942DB475D3
CBCB9928C3089F2C1C8C14CBC68EB368518964DE76DEC0C5CBDA355896196C5A
11DE61A7A43208476304E3F4C594B41D3B348A8CBE5E74DD3E29F153B3FD1623
5F25040260480FCFEA6B051218123981E53E7CAE75DE9AE457D6795BDBE839BD
AD0F782DA51FE2770505943116DEDAFD6407AE2A9FE0930A8CFD07A1B7234614
88FE321A4C5411FBA496EC83D4B1663FA7FED2EB5846D65D6D4BDCB12925DEA4
3FE30AA205AE7A1F7008B645DAA3197468C765233B4DF031C85F4D68212CAA2C
EA790C0349B860656F172EAF1832EC72384B17AC5BAB407536C8E58045ABEB86
4D481F41736F26DF0A282C9DB0EDCAE017357D4C6CEAB5A4FCC68B393627E426
B34DA510F9C0E024870440D8655A650B25D4E6E14F790CD9F8655DC1225B40C3
EB24F9BF1AA938694CFC916BD6636C13FBA180F34373B6C2EE943556D9626527
8A8A284F0F5B96946394849130CB44DCBF8682F89242817A5E85D9B7B6C3BE18
2F9F2DFF7738D1118B974A804EE76DCF84DBB4BA66E14F04C2A5CCA8522824CE
C50EBE5CC78984F04C13EA17A55A891A1FE0B39B8B25483FB9252A9145561205
5C4DB23607B9FB6EA242DF1AD59D9B14C22D76D6BC7A2934BDDF023E09B99840
A4DC3B72C3634A845E14BC504D12228C55306282A4B39541BFCF7B0CE28F61EB
0D86069043F4B2C1ECCDC2851F9C4E596E155A15B8106EFF75BCECB2D1E13E5D
0601906F8DE9973B895D4E8C1AFA3DAE6515E4A972DC9F580A0DBA621999C63C
B03BC4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSSI12
%!PS-AdobeFont-1.1: CMSSI12 1.0
%%CreationDate: 1991 Aug 20 17:34:51
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSSI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
end readonly def
/FontName /CMSSI12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 77 /M put
dup 104 /h put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
/FontBBox{-98 -251 1052 758}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AEE33ACC9AF2153F3341E64F46
5AED4BFAAF6C755C6AC04D37BBBFC2017C248EF0827FF3051D048FCFD75430F2
DACC7CD9C08BDC102E20C0D5D9F04C9140BC26DF4C545779E85F24C55AB9A921
8265FE51E80720E7A3B7428B5C1F7B74887D294478B1E1C718F4FDC9D28FF86B
5D58332A1E0EF7C1738B5338174487361104540317DB1206D0DF11FD703EFA5A
00216612BDB99F829954446201B7C88CFFCCB2B5DCF8DA65392F9B8BAAD3F4BF
F9E731EB5D03CEC3A8B47B8273320B200F5F6B7D54B6F148CA7E1BEB4967EF74
F449A40E9895D1C081378993324794FD522A6F351D72CBB1FD760532E8E5E6E8
C65A05F00BD07811077BDA604D0B987F8586F4B746C38D4BBAC2257D0D6844B3
1D532F66B227F29F1EE66E977DF1B59546BE3D9255EB8F7597B1134052289295
BF9FE45F03A01F8236D4B603E28701A5AF19E5D7D81677E5FA8B3C80156FE94B
2AE08B2F4634EB4A64419F7698FD7FBB63EC7A3EABFAA6DC72DC00D88171CFF0
31081D31868266889C7056997F554FDF594D02DD40927A86F81C7BC69C91E3D6
E034ABB0CD7A9DD4A8829CEA7EA3A8A0EA454F0F9D9DEBA2B05010C45CB92FF6
F63AADFAF485A689F6624CE1FA66252EB106C35FF9C6C5C90C6F16B51F8A2C2A
D5CB743B71012F48505BE430D25C73A6F0B3867E9CC1303379CFC14752D609EF
CE71A3DFF494D78EEF9EC6AABB01516E86F16CD3019134E5B636A1E4959A8CBE
A43EF3574C41EEF192FACA9B78364914EF08016B95CF4D412DF23AB746098611
79AEE406A647514CFA1CC388300069323208BF5299CAD503EBDB00428A89F79F
FDEAA40AEE1D5B20C247E31483B3DFD9FCDA8BAC0B9E76C439A718D4D68FDAF7
9326BB3D882665B3E605835FC31D02B19E34D160881B3DEDCD59C4CC67E4D710
481BB7A99D81417FAFB7EBC022D6F6E08B13FAB4A92F31C1E3BF05303B21748E
20DAEC36E499C0526DF0563B55C51822FE04B51833EA220F36A626C576F14183
C30E36DA6279C8BB2EC805C09B7FB4549509E08F6DB83B2C7B882EA7A8D2E4E8
D1E5436F9F6B7DD3039D53BCE5D8F652337AC0FB713A61C2377DF49D4C55B580
82921CCD6F6A81CE592D53AC6E2EAC8E1207A2F30B0FD655432BE7D14D2E6A49
456B15F8679CF741C2D00B783F3052D8223D87F7CCBAB295A304C5A5AAAF70C1
89DC0A1CC9549C1DE2A504734E593AA154D40B186529D34090234674EF210DBB
B10F5B22C14AFA43F5C12900ECA8C92E2A4AACF0B8A5CEF866930A6581B48F0E
2395C9B0803FDE1F0E123A84F5B14883BCC3297FFEC3F159C9766167B0CAED53
C54BF96F86DA684151518DD8DA943541E1D4BEDBCFC40BEAEB131FE9DB7A7806
F35F4E89F6DA886E4E7AC6762C47242895064BED828664E8DAC6936BAF1E9178
0281EC5007E2DC7E5DA98E89D006BA7B90A63EADAC3EE72BA921297EE8231B3E
C6C3BC871B20991A94557995BFE8757E00885766DB91672828A23392D45B5FDA
C123D7E75D355FCD56D63BA897B4A6FCFEF1C94EEF313AE910AA5B2595188944
0A6718BBAEC08E6B8674A38A5020D18EF70F029916BC5CC0A45C0E3308FF6CF3
1A3516D2B66A73C3C077726BE9B89F0538299F6EE3F7CC8FB1614CFF7EEECE0C
87B671EF518CB653C51AFA586A2B1ADAA98096C528B6BF4AA6726A8DE184C36D
E9230F0D9547B6CD99C6D1F3B033C89544127915C7DF0AB35A109EE61839B976
5B726A557BF495D72D31971DC2FEE7987F63CB38BCC90E05D3DD5E7EC5CE1F20
28B02B51B6B553C4CA5BCB72C5B68CCA7D53B23E0303591C6F9A7BFFDBC7952E
D09C7949C12F42B28FE04CBAA599A70DC8D04F60C91901CC08AAC8BC91E453BE
0B8296F832FE4176AD1703827E64526904766D37DBB8D16D7775F334453ED3F2
CAED37E3A77D85512C26FA15CEBA4A53FB830848F76E1E8D335F9F3DC57CDB38
9D396B63E379150052EAEDBF2A1AF04A5E257ED75826ACF79C9DAB1087A7F4A3
16998F47BADB24881CA20DAC0679F93C39356A0BFDC72AE507A3FE926459891A
9892A47B877761E53014E0D50D1FECE4C8F7BA8FE4CC93F189BE983E6AACDF91
FE9213C7245AE104EBB6927A69558D4EFBD8B1C2F4E3BE573EF282F90538059C
9A23CF55926075A9FEDCD302D16C31A747B465C4BF763BABCE1C6BE5E8949E53
4431D2F81A68E29FD2193BB41954B03FD163286A783F98755BD1B440D33D22C0
2B86B9E9B5A93F9A40207CFA25262FB7EAF019F9BBEFD680F111FFA6202636A4
DC3D4C8B2416690F8E60952D93D3ABC3002EF69A8816B960F61A15A70D099294
E837719516D5A053C11DB3567B435B1C5865B79A55464EB64AED85EA9A1D0988
6DC65FEA03241F4F353BF2F4A984DD9CB9BA2A77D26CB135B08201CC1C31CB09
453E8A1C43C87DE7D6E6C08A56B0C76B0AA5A312B096C4E3CAF123E45A98E556
C360788CDD8C3E1776BB0BA74ACB1430713BEAE563367457EDF441710B32BDD9
444D4673D42D31BE6763DFE457D0156E8492AC645554414BC3CD64ACD3D6CE51
B8B4CDE34E7B90DE9249CAE676215246AEBAAC2C53BC55092847E7A61F0C93C8
0DAEB908D8A6910C40D4D23A32FE2359117C02EF28E89A18D9F591B24936951B
580415B08DAEFA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (master.dvi)
@start /Fa 134[45 45 1[45 50 35 37 33 1[50 49 50 77 23
47 1[23 50 49 30 43 50 43 50 47 11[66 67 3[62 3[53 67
4[55 58 70 62 65 1[65 5[27 49 49 1[49 49 49 49 49 49
49 1[27 33 1[76 1[38 38 8[76 31[{}49 99.6264 /CMSS12
rf /Fb 134[71 3[75 52 1[55 1[75 67 1[112 1[71 2[75 2[61
3[65 9[139 3[75 12[85 2[97 15[67 67 67 2[37 46[{}19 119.552
/CMBX12 rf /Fc 140[33 32 114[{}2 66.4176 /CMMI8 rf /Fd
130[48 1[48 1[48 48 48 48 48 48 48 48 1[48 48 48 48 48
48 48 48 48 48 48 48 48 48 48 48 1[48 2[48 8[48 20[48
1[48 1[48 1[48 7[48 48 48 48 8[48 36[{}38 90.9091 /CMTT10
rf /Fe 190[143 12[95 95 95 95 49[{}5 206.559 /CMR17 rf
/Fg 135[61 3[59 1[60 1[56 1[61 4[30 61 2[56 62 2[61 29[78
1[81 65[{}12 99.6264 /CMCSC10 rf /Fh 128[45 5[48 48 66
48 51 35 36 36 48 51 45 51 76 25 48 1[25 51 45 28 40
51 40 51 45 9[93 68 68 66 51 67 2[71 1[83 57 71 1[33
2[59 62 69 66 1[68 3[71 2[25 1[45 45 1[45 1[45 45 45
45 1[25 30 25 71 1[35 35 25 26[51 12[{}58 90.9091 /CMR10
rf /Fi 135[55 1[55 58 41 41 43 1[58 52 58 87 29 2[29
58 52 32 48 58 46 58 51 12[73 58 78 1[71 1[82 1[63 2[40
2[66 2[76 1[79 6[29 52 1[52 1[52 52 52 52 52 52 48[{}39
90.9091 /CMBX10 rf /Fj 134[86 3[97 70 73 64 1[97 95 97
149 44 91 1[44 97 95 58 88 1[84 97 90 12[126 105 121
1[121 1[137 1[100 5[105 1[137 121 126 46[95 19[{}30 172.188
/CMSSBX10 rf /Fk 134[45 45 68 45 51 37 38 34 1[51 50
51 1[23 2[23 51 2[46 51 44 51 48 7[67 3[69 67 56 64 1[64
72 2[53 2[30 72 67 56 58 1[64 67 67 8[50 1[50 1[50 1[50
50 50 48[{}41 90.9091 /CMSSBX10 rf /Fl 242[91 13[{}1
90.9091 /CMSY10 rf /Fm 169[53 12[40 4[75 65 69 68 6[25
58[{}7 90.9091 /CMMI10 rf /Fn 134[42 42 62 42 47 33 35
31 47 47 45 47 72 22 44 24 22 47 45 28 40 47 40 47 44
10[61 63 62 51 59 2[67 1[80 49 63 4[52 54 66 58 1[61
61 5[25 1[45 1[45 45 45 45 45 45 45 45 25 30 25 71 1[35
35 40[{}56 90.9091 /CMSS10 rf /Fo 134[54 4[42 45 40 2[59
60 4[28 60 2[52 3[56 12[80 6[102 32[33 4[33 39[{}14 119.552
/CMSS12 rf /Fp 136[107 1[80 58 60 53 2[79 2[37 76 1[37
80 2[73 80 1[80 13[105 88 36[44 46[{}16 143.462 /CMSSBX10
rf /Fq 134[103 103 1[103 116 83 87 77 1[116 114 116 179
53 2[53 116 114 69 106 116 101 1[108 10[151 1[151 3[145
2[202 120 2[68 5[145 1[151 65[{}28 206.559 /CMSSBX10
rf /Fr 134[54 3[60 42 1[40 2[59 6[60 26[102 11[77 14[59
59 49[{}10 119.552 /CMSSI12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (My Very Long and Complicated Thesis Title)
/Subject () /Creator (LaTeX with hyperref package) /Author (MyAuthor1, MyAuthor2)
/Keywords (latex template, other keywords) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.a) cvn /DEST pdfmark end
 174 174 a Black 0 TeXcolorgray
Black 0 TeXcolorgray 183 462 a
SDict begin [ /Count 0 /Dest (chapter*.4) cvn /Title (List of Figures)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count 0 /Dest (chapter*.5) cvn /Title (List of Tables)
/OUT pdfmark end
 183
462 a 183 462 a
SDict begin [ /Count 0 /Dest (chapter.1) cvn /Title (1 Introduction)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count 0 /Dest (chapter.1) cvn /Title (Nomenclature)
/OUT pdfmark end
 183 462 a 183 462
a
SDict begin [ /Count 1 /Dest (chapter.2) cvn /Title (2 Short Title)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count -0 /Dest (section.2.1) cvn /Title (2.1 Chapter Summary)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count 1 /Dest (chapter.3) cvn /Title (3 Perspectives)
/OUT pdfmark end
 183 462 a 183
462 a
SDict begin [ /Count -0 /Dest (section.3.1) cvn /Title (3.1 Future Work)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count 0 /Dest (chapter.4) cvn /Title (4 Conclusion)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count 0 /Dest (chapter.4) cvn /Title (References) /OUT
pdfmark end
 183 462
a 183 462 a
SDict begin [ /Count 0 /Dest (chapter*.8) cvn /Title (Appendix) /OUT
pdfmark end
 183 462 a 183 462 a
SDict begin [ /Count 0 /Dest (appendix.A) cvn /Title (A Appendix A)
/OUT pdfmark end
 183 462 a 183 462 a
SDict begin [ /PageMode /UseOutlines /Page 1 /View [/Fit] /DOCVIEW
pdfmark end
 183
462 a 183 462 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 183 462 a 183 462 a
SDict begin H.S end
 183 462 a 183 462
a
SDict begin 13.6 H.A end
 183 462 a 183 462 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn /DEST pdfmark
end
 183 462 a 183 462 a
SDict begin [ {Catalog} << /PageLabels<</Nums[0<</S/a>>5<</S/r>>17<</S/D>>]>>
>> /PUT pdfmark end
 183 462 a -219
6226 a @beginspecial 303 @llx 280 @lly 498 @urx 318 @ury
1950 @rwi @setspecial
%%BeginDocument: figs/dtu_elektro_A_UK.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 12.0.1
%%For: (PeopleGroup) (PeopleGroup)
%%Title: (DTU Elektro A UK 8.0.eps)
%%CreationDate: 24/01/08 15:48
%%BoundingBox: 303 280 498 318
%%HiResBoundingBox: 303.8809 280.4766 497.0762 317.209
%%DocumentProcessColors: Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKCustomColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 65537 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () 
%AI3_TemplateBox: 400 300 400 300
%AI3_TileBox: 101.6001 -87.5 697.5 688.5
%AI3_DocumentPreview: Header
%AI5_ArtSize: 14400 14400
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -98.5 601.5 1.83 1666 912 18 0 0 7 73 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-66.3003 -266.2988
%AI7_GridSettings: 17.0079 8 17.0079 8 1 0 0.29 1 1 0.65 1 1
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
5 Bn
%AI5_BeginGradient: (Gray Linear Gradient)
(Gray Linear Gradient) 0 7 Bd
[
<
0A0B0C0C0D0E0F10111213141516161718191A1B1C1D1E1F20212223242526272728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C
>
<
070808090A0A0B0C0C0D0E0E0F10101112131314151516171818191A1A1B1C1D1D1E1F1F20212222
2324252526272828292A2A2B2C2D2D2E2F30303132333334353636373839393A3B3C3C3D3E3F3F40
4142424344454546474848494A4B4B4C4D4E4E4F5051
>
<
0607070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A1A1B1C1C1D1E1F1F20
212122232324252526272828292A2A2B2C2C2D2E2F2F30313132333334353636373838393A3B3B3C
3D3D3E3F40404142424344454546474748494A4A4B4C
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101
>
1 %_Br
<
1A1918171615141211100F0E0D0C0B0A
>
<
1110100F0E0E0D0C0C0B0A0A09080807
>
<
11100F0F0E0D0D0C0B0A0A0908070706
>
0
1 %_Br
<
54535251504F4E4D4C4B4A4948464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C
2B2A292827262524232221201F1E1D1C1B1A
>
<
3C3B3A3A393837373635343333323130302F2E2D2D2C2B2A2A292827272625242423222121201F1E
1E1D1C1B1B1A191818171615151413121211
>
<
3D3C3B3A3A393837373635343433323130302F2E2D2D2C2B2A2A292827262625242323222120201F
1E1D1C1C1B1A191918171616151413121211
>
0
1 %_Br
<
000000000000010101010102020202030303040404050505060606070708080809090A0A0B0B0C0C
0D0D0E0E0F0F10101111121313141415161617171819191A1B1B1C1D1D1E1F1F2021222223242425
26272728292A2A2B2C2D2E2E2F3031323333343536373839393A3B3C3D3E3F404141424344454647
48494A4B4C4D4E4F5051525354
>
<
00000000000000010101010101020202020203030303040404040505050506060607070708080809
09090A0A0B0B0B0C0C0C0D0D0E0E0F0F0F1010111112121313131414151516161717181819191A1B
1B1C1C1D1D1E1E1F1F202121222223242425252627272828292A2A2B2C2C2D2D2E2F2F3031313233
3334353536373838393A3A3B3C
>
<
00000000000000010101010101020202020203030303040404040505050606060607070708080809
090A0A0A0B0B0B0C0C0D0D0E0E0E0F0F1010111111121213131414151516161717181819191A1A1B
1C1C1D1D1E1E1F1F202121222223242425252627272828292A2A2B2C2C2D2E2E2F30303132323334
34353636373838393A3B3B3C3D
>
0
1 %_Br
<
0A0909080706050403020100
>
<
070706060504040302010100
>
<
060605050404030302010100
>
0
1 %_Br
<
1717161615141413121211100F0F0E0D0C0C0B0A
>
<
161515141413121111100F0E0D0C0C0B0A090807
>
<
171616151414131211100F0E0D0C0B0A09080706
>
0
1 %_Br
[
0.421875 0.316406 0.296875 0.003906 1 87 91.573 %_BS
%_0.421875 0.316406 0.296875 0.003906 1 87 91.573 Bs
0.039063 0.027344 0.023438 0 1 51.3513 49.4382 %_BS
%_0.039063 0.027344 0.023438 0 1 51.3513 49.4382 Bs
0.101563 0.066406 0.066406 0 1 50 33.1461 %_BS
%_0.101563 0.066406 0.066406 0 1 50 33.1461 Bs
0.328125 0.234375 0.238281 0 1 50 17.4157 %_BS
%_0.328125 0.234375 0.238281 0 1 50 17.4157 Bs
0 0 0 0 1 64.5161 0.005 %_BS
%_0 0 0 0 1 64.5161 0 Bs
0.039063 0.027344 0.023438 0 1 56.1798 0.0025 %_BS
%_0.039063 0.027344 0.023438 0 1 56.1798 0 Bs
0.089844 0.085938 0.089844 0 1 56.1798 0 %_BS
%_0.089844 0.085938 0.089844 0 1 56.1798 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple Radial Gradient)
(Purple Radial Gradient) 1 3 Bd
[
<
000101020304040506070708090A0A0B0C0D0E0E0F101111121314141516171818191A1B1B1C1D1E
1F1F2021222223242526262728292A2A2B2C2D2D2E2F303131323334353536373839393A3B3C3D3D
3E3F404141424344444546474848494A4B4C4C4D4E4F5050515253545455565758
>
<
00010203040505060708090A0B0C0D0E0F101112131415161718191A1B1B1C1D1E1F202122232425
262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D
4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E
>
<
00000000000000000001010101010101010101010101010101020202020202020202020202020202
02020303030303030303030303030303030304040404040404040404040404040404050505050505
050505050505050505060606060606060606060606060606060707070707070707
>
0
1 %_Br
<
585858585959595A5A5A5B5B5C5C5D5D5D5E5E5F5F60606161626263636464656566666768686969
6A6A6B6C6C6D6D6E6E6F707071717273737475757676777878797A7A7B7C7C7D7D7E7F7F80818182
838384858686878888898A8A8B8C8C8D8E8F8F90919192939494959696979899999A9B9C9C9D9E9E
9FA0A1A1A2A3A4A4A5A6A7A7A8A9AAABABACADAEAEAFB0B1B2B2B3B4B5B5B6B7B8B9B9BABBBCBDBD
BEBFC0C1C1C2C3C4C5C5C6C7C8C9C9CACBCCCDCECECF
>
<
6E6E6E6E6F6F707071717172727374747575767677777879797A7A7B7C7C7D7E7E7F808081828283
8484858686878889898A8B8B8C8D8E8E8F909191929394959596979898999A9B9C9C9D9E9FA0A0A1
A2A3A4A5A5A6A7A8A9AAAAABACADAEAFAFB0B1B2B3B4B5B6B6B7B8B9BABBBCBDBDBEBFC0C1C2C3C4
C5C6C6C7C8C9CACBCCCDCECFD0D1D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E3E4E5E6E7E8E9
EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
0707070707070708080808080808080809090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0C0C0C
0C0C0C0C0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F101010101010111111111112121212121213
13131313141414141415151515151516161616161717171717181818181819191919191A1A1A1A1A
1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F20202020212121212122222222222323
23232424242424252525252626262626272727272828
>
<
00000000000000000000000000000000010101010101010101010101010101010101010101020202
02020202020202020202020202020202030303030303030303030303030303030304040404040404
04040404040404040405050505050505050505050505050505060606060606060606060606060606
07070707070707070707070707070808080808080808080808080808090909090909090909090909
09090A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B
>
1 %_Br
[
0 0 0 0 1 50.7937 0 %_BS
%_0 0 0 0 1 50.7937 0 Bs
0.34375 0.429688 0.027344 0 1 57.3913 35.955 %_BS
%_0.34375 0.429688 0.027344 0 1 57.3913 35.955 Bs
0.8125 1 0.15625 0.042969 1 51.0204 100 %_BS
%_0.8125 1 0.15625 0.042969 1 51.0204 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red Linear Gradient)
(Red Linear Gradient) 0 6 Bd
[
<
3A393837363534333231302F2E2D2C2B2A2928272524232221201F1E1D1C1B1A1918171615141312
11100F0E0D0C0B0A0908070605040302
>
<
FFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFD
FDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFC
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9
F9F9F9F9F9F8F8F8F8F8F8F8F7F7F7F7
>
<
2A292828272625252423222121201F1E1E1D1C1B1B1A191818171615151413121111100F0E0E0D0C
0B0B0A09080807060505040302020100
>
1 %_Br
<
2324242526272728292A2B2B2C2D2E2E2F303131323334343536373738393A
>
1
1
<
0B0C0D0E0F101112131415161718191A1B1C1D1F202122232425262728292A
>
1 %_Br
<
09090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D
0D0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F101010101010101010101111111111111111111212
12121212121212121313131313131313131314141414141414141414151515151515151515151616
16161616161616161617171717171717171717171818181818181818181818191919191919191919
19191A1A1A1A1A1A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1C1C1C1D1D
1D1D1D1D1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F
20202020202020202020202020202020212121212121212121212121212121212121222222222222
22222222222222222222222222222222232323232323232323232323232323
>
<
3E3F3F40414243444545464748494A4B4B4C4D4E4F5050515253545555565758595A5A5B5C5D5E5F
5F6061626363646566676868696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7E
7F808181828384858586878888898A8B8B8C8D8E8E8F90919192939394959696979899999A9B9B9C
9D9E9E9FA0A0A1A2A3A3A4A5A5A6A7A7A8A9A9AAABACACADAEAEAFB0B0B1B2B2B3B4B4B5B6B6B7B8
B8B9BABABBBBBCBDBDBEBFBFC0C1C1C2C2C3C4C4C5C6C6C7C7C8C9C9CACACBCCCCCDCDCECFCFD0D0
D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9D9DADADBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6
E6E7E7E8E8E9E9EAEAEBEBECECECEDEDEEEEEFEFF0F0F0F1F1F2F2F2F3F3F4F4F4F5F5F6F6F6F7F7
F7F8F8F8F9F9F9FAFAFAFBFBFBFCFCFCFCFDFDFDFDFEFEFEFEFEFFFFFFFFFF
>
<
1F202122232425262728292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F404142434445
464748494A4B4C4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A
6B6C6D6D6E6F70717273747475767778797A7B7B7C7D7E7F8081818283848586868788898A8B8C8C
8D8E8F909091929394959596979899999A9B9C9D9D9E9FA0A1A1A2A3A4A5A5A6A7A8A8A9AAABABAC
ADAEAEAFB0B1B1B2B3B4B4B5B6B7B7B8B9BABABBBCBCBDBEBFBFC0C1C1C2C3C3C4C5C6C6C7C8C8C9
CACACBCCCCCDCECECFD0D0D1D1D2D3D3D4D5D5D6D7D7D8D8D9DADADBDBDCDDDDDEDEDFE0E0E1E1E2
E2E3E4E4E5E5E6E6E7E7E8E8E9E9EAEBEBECECEDEDEEEEEFEFEFF0F0F1F1F2F2F3F3F4F4F4F5F5F6
F6F7F7F7F8F8F9F9F9FAFAFAFBFBFBFCFCFCFDFDFDFDFEFEFEFEFEFFFFFFFF
>
<
00000000000000000000000101010101010101010101010101010101010101010202020202020202
02020202020202020202020202030303030303030303030303030303030303030303030304040404
04040404040404040404040404040404040404050505050505050505050505050505050505050505
05050506060606060606060606060606060606060606060606060606060707070707070707070707
07070707070707070707070707070707080808080808080808080808080808080808080808080808
08080808080909090909090909090909090909090909090909090909090909090909090909090A0A
0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B
0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B
>
1 %_Br
<
02020202020202020202020202020202030303030303030303030303030303030303030303030303
03030303030303030404040404040404040404040404040404040404040404040404040404040404
05050505050505050505050505050505050505050505050505050505050505050606060606060606
06060606060606060606060606060606060606060606060606060707070707070707070707070707
07070707070707070707070707070707070707070708080808080808080808080808080808080808
08080808080808080808080808080808080808090909090909090909090909090909090909090909
>
<
FCFBFAF9F8F8F7F6F5F4F3F2F1F1F0EFEEEDECEBEAEAE9E8E7E6E5E4E3E3E2E1E0DFDEDDDDDCDBDA
D9D8D7D6D6D5D4D3D2D1D0D0CFCECDCCCBCACAC9C8C7C6C5C4C4C3C2C1C0BFBFBEBDBCBBBAB9B9B8
B7B6B5B4B4B3B2B1B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A99989796
96959493929291908F8E8D8D8C8B8A898988878685858483828181807F7E7D7D7C7B7A7979787776
76757473727271706F6F6E6D6C6B6B6A696868676665656463626261605F5F5E5D5C5C5B5A595958
57575655545453525251504F4F4E4D4D4C4B4B4A494948474746454544434342424140403F3F3E3E
>
<
F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0
CFCECDCCCBCAC9C8C7C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9
A8A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959594939291908F8E8D8C8B8A89888786868584
838281807F7E7D7C7B7A79797877767574737271706F6E6E6D6C6B6A69686766656564636261605F
5E5D5D5C5B5A59585756555554535251504F4E4E4D4C4B4A4948484746454443434241403F3E3E3D
3C3B3A393938373635353433323131302F2E2D2D2C2B2A2A29282727262525242323222121201F1F
>
0
1 %_Br
<
04040404040404040404040404040404040404040404040404040404040404040404040404040404
04040404040404040404040404040404040404040303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030302020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
0202020202020202020202020202020202020202020202020202
>
<
1D1E1F20212223242425262728292A2B2C2D2E2F30313232333435363738393A3B3C3D3D3E3F4041
4243444546464748494A4B4C4D4E4E4F50515253545555565758595A5B5B5C5D5E5F606161626364
6566666768696A6B6B6C6D6E6F707071727374757576777879797A7B7C7D7D7E7F80818182838484
8586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9F9FA0A1A2A2
A3A4A4A5A6A7A7A8A9A9AAABABACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B7B7B8B9B9BABBBBBCBDBD
BEBFBFC0C0C1C2C2C3C3C4C5C5C6C7C7C8C8C9C9CACBCBCCCCCDCECECFCFD0D0D1D2D2D3D3D4D4D5
D5D6D6D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E5E6E6E7E7E8E8E9
E9E9EAEAEBEBECECECEDEDEEEEEEEFEFEFF0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7
F7F8F8F8F8F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFC
>
<
0D0E0F101112131415161718191A1B1C1D1E1F20212223242526262728292A2B2C2D2E2F30313233
343536373839393A3B3C3D3E3F40414243444546464748494A4B4C4D4E4F4F505152535455565758
58595A5B5C5D5E5F5F60616263646565666768696A6B6B6C6D6E6F7070717273747575767778797A
7A7B7C7D7E7E7F8081828283848586868788898A8A8B8C8D8E8E8F90919192939494959697979899
9A9A9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A7A8A9AAAAABACACADAEAEAFB0B0B1B2B2B3B4B5B5
B6B7B7B8B8B9BABABBBCBCBDBEBEBFC0C0C1C1C2C3C3C4C4C5C6C6C7C8C8C9C9CACACBCCCCCDCDCE
CFCFD0D0D1D1D2D2D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3
E3E4E4E4E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2
F2F2F3F3F3F4F4F4F4F5F5F5F5F5F6F6F6F6F6F6F7F7F7F7F7F7
>
0
1 %_Br
[
0.007813 0.988281 0.96875 0 1 22.7273 100 %_BS
%_0.007813 0.988281 0.96875 0 1 22.7273 100 Bs
0.226563 1 1 0.164063 1 50 93.2584 %_BS
%_0.226563 1 1 0.164063 1 50 93.2584 Bs
0.136719 1 1 0.042969 1 50 62.3595 %_BS
%_0.136719 1 1 0.042969 1 50 62.3595 Bs
0.035156 0.242188 0.121094 0 1 39.3939 34.8315 %_BS
%_0.035156 0.242188 0.121094 0 1 39.3939 34.8315 Bs
0.007813 0.988281 0.96875 0 1 46.5116 10.6742 %_BS
%_0.007813 0.988281 0.96875 0 1 46.5116 10.6742 Bs
0.015625 0.113281 0.050781 0 1 37.5 2.24719 %_BS
%_0.015625 0.113281 0.050781 0 1 37.5 2.24719 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Checked Pattern)
(Checked Pattern) 46.0313 5.4375 113.3027 72.7207 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3 w 4 M []0 d
0 XR
25.0313 11.4375 m
31.0313 5.4375 L
F
25.0313 5.4375 m
31.0313 11.4375 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
79.6699 5.44141 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
79.6699 5.44141 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
67.7813 0.511719 m
67.7813 10.3691 L
74.7383 17.332 L
84.5996 17.332 L
91.5605 10.373 L
91.5605 0.515625 L
67.7813 0.511719 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
67.7813 0.511719 m
67.7813 10.3691 L
74.7383 17.332 L
84.5996 17.332 L
91.5605 10.373 L
91.5605 0.515625 L
67.7813 0.511719 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
46.0313 5.4375 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
46.0313 5.4375 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
41.1035 0.5 m
41.1016 17.3281 L
50.959 17.3281 L
57.9199 10.3691 L
57.9219 0.511719 L
41.1035 0.5 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
41.1035 0.5 m
41.1016 17.3281 L
50.959 17.3281 L
57.9199 10.3691 L
57.9219 0.511719 L
41.1035 0.5 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
113.3086 5.44141 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
113.3086 5.44141 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
118.2188 0.515625 m
101.418 0.511719 L
101.418 10.3691 L
108.377 17.332 L
118.2363 17.332 L
118.2188 0.515625 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
118.2188 0.515625 m
101.418 0.511719 L
101.418 10.3691 L
108.377 17.332 L
118.2363 17.332 L
118.2188 0.515625 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
46.0273 39.0781 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
46.0273 39.0781 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
41.0977 50.9668 m
50.9551 50.9688 L
57.916 44.0078 L
57.918 34.1484 L
50.957 27.1875 L
41.0996 27.1875 L
41.0977 50.9668 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
41.0977 50.9668 m
50.9551 50.9688 L
57.916 44.0078 L
57.918 34.1484 L
50.957 27.1875 L
41.0996 27.1875 L
41.0977 50.9668 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
62.8477 22.2598 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
62.8477 22.2598 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.9199 10.3691 m
50.959 17.3281 L
50.957 27.1875 L
57.918 34.1484 L
67.7773 34.1484 L
74.7383 27.1914 L
74.7383 17.332 L
67.7813 10.3691 L
57.9199 10.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.9199 10.3691 m
50.959 17.3281 L
50.957 27.1875 L
57.918 34.1484 L
67.7773 34.1484 L
74.7383 27.1914 L
74.7383 17.332 L
67.7813 10.3691 L
57.9199 10.3691 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
96.4883 22.2637 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
96.4883 22.2637 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
91.5605 10.373 m
84.5996 17.332 L
84.5977 27.1914 L
91.5566 34.1523 L
101.416 34.1523 L
108.377 27.1953 L
108.377 17.334 L
101.418 10.373 L
91.5605 10.373 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
91.5605 10.373 m
84.5996 17.332 L
84.5977 27.1914 L
91.5566 34.1523 L
101.416 34.1523 L
108.377 27.1953 L
108.377 17.334 L
101.418 10.373 L
91.5605 10.373 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
113.3066 39.082 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
113.3066 39.082 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
118.2363 27.1914 m
108.377 27.1914 L
101.4141 34.1484 L
101.4141 44.0098 L
108.373 50.9707 L
118.2344 50.9707 L
118.2363 27.1914 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
118.2363 27.1914 m
108.377 27.1914 L
101.4141 34.1484 L
101.4141 44.0098 L
108.373 50.9707 L
118.2344 50.9707 L
118.2363 27.1914 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
96.4844 55.9023 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
96.4844 55.9023 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
91.5566 44.0117 m
84.5957 50.9707 L
84.5938 60.8311 L
91.5527 67.792 L
101.4141 67.792 L
108.373 60.834 L
108.373 50.9746 L
101.4141 44.0137 L
91.5566 44.0117 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
91.5566 44.0117 m
84.5957 50.9707 L
84.5938 60.8311 L
91.5527 67.792 L
101.4141 67.792 L
108.373 60.834 L
108.373 50.9746 L
101.4141 44.0137 L
91.5566 44.0117 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
62.8457 55.8994 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
62.8457 55.8994 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.916 44.0078 m
50.9551 50.9688 L
50.9531 60.8271 L
57.9141 67.7881 L
67.7734 67.7891 L
74.7344 60.8301 L
74.7363 50.9707 L
67.7773 44.0098 L
57.916 44.0078 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.916 44.0078 m
50.9551 50.9688 L
50.9531 60.8271 L
57.9141 67.7881 L
67.7734 67.7891 L
74.7344 60.8301 L
74.7363 50.9707 L
67.7773 44.0098 L
57.916 44.0078 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
46.0254 72.7168 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
46.0254 72.7168 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.9141 77.6484 m
57.9141 67.7881 L
50.9551 60.8271 L
41.0977 60.8262 L
41.0938 77.625 L
57.9141 77.6484 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.9141 77.6484 m
57.9141 67.7881 L
50.9551 60.8271 L
41.0977 60.8262 L
41.0938 77.625 L
57.9141 77.6484 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
79.6641 72.7207 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
79.6641 72.7207 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
91.5527 77.6523 m
91.5527 67.792 L
84.5957 60.8311 L
74.7363 60.8301 L
67.7734 67.7891 L
67.7734 77.6494 L
91.5527 77.6523 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
91.5527 77.6523 m
91.5527 67.792 L
84.5957 60.8311 L
74.7363 60.8301 L
67.7734 67.7891 L
67.7734 77.6494 L
91.5527 77.6523 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
113.3027 72.7207 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
113.3027 72.7207 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
118.2344 60.8311 m
108.373 60.8301 L
101.4141 67.7891 L
101.4121 77.6494 L
118.2188 77.6523 L
118.2344 60.8311 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
118.2344 60.8311 m
108.373 60.8301 L
101.4141 67.7891 L
101.4121 77.6494 L
118.2188 77.6523 L
118.2344 60.8311 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
79.666 39.082 m
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
79.666 39.082 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
74.7383 27.1914 m
67.7773 34.1484 L
67.7773 44.0098 L
74.7363 50.9707 L
84.5957 50.9707 L
91.5566 44.0117 L
91.5566 34.1523 L
84.5977 27.1914 L
74.7383 27.1914 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
74.7383 27.1914 m
67.7773 34.1484 L
67.7773 44.0098 L
74.7363 50.9707 L
84.5957 50.9707 L
91.5566 44.0117 L
91.5566 34.1523 L
84.5977 27.1914 L
74.7383 27.1914 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.78125 0.089844 0.457031 0 k
 0.78125 0.089844 0.457031 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
7.46094 27.1816 m
0.501953 34.1406 L
0.5 44 L
7.45898 50.9609 L
17.3184 50.9609 L
24.2793 44.0039 L
24.2813 34.1445 L
17.3223 27.1836 L
7.46094 27.1816 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.742188 0.980469 0.007813 0.003906 k
 0.742188 0.980469 0.007813 0.003906 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
7.46094 27.1816 m
0.501953 34.1406 L
0.5 44 L
7.45898 50.9609 L
17.3184 50.9609 L
24.2793 44.0039 L
24.2813 34.1445 L
17.3223 27.1836 L
7.46094 27.1816 L
s
101.4141 67.7891 m
101.4141 77.6494 L
91.5527 77.6494 L
91.5527 67.7891 L
101.4141 67.7891 L
f
67.7813 0.511719 m
67.7813 10.3691 L
57.9199 10.3691 L
57.9199 0.511719 L
67.7813 0.511719 L
f
101.418 0.511719 m
101.418 10.3691 L
91.5586 10.3691 L
91.5586 0.511719 L
101.418 0.511719 L
f
84.5996 17.332 m
84.5996 27.1914 L
74.7383 27.1914 L
74.7383 17.332 L
84.5996 17.332 L
f
67.7773 34.1484 m
67.7773 44.0098 L
57.918 44.0098 L
57.918 34.1484 L
67.7773 34.1484 L
f
50.957 17.3281 m
50.957 27.1875 L
41.1016 27.1875 L
41.1016 17.3281 L
50.957 17.3281 L
f
118.2363 17.332 m
118.2363 27.1914 L
108.377 27.1914 L
108.377 17.332 L
118.2363 17.332 L
f
101.4141 34.1484 m
101.4141 44.0098 L
91.5566 44.0098 L
91.5566 34.1484 L
101.4141 34.1484 L
f
84.5977 50.9707 m
84.5977 60.8301 L
74.7363 60.8301 L
74.7363 50.9707 L
84.5977 50.9707 L
f
67.7734 67.7891 m
67.7734 77.6494 L
57.9141 77.6494 L
57.9141 67.7891 L
67.7734 67.7891 L
f
50.9551 50.9688 m
50.9551 60.8271 L
41.0977 60.8271 L
41.0977 50.9688 L
50.9551 50.9688 L
f
118.2344 50.9707 m
118.2344 60.8301 L
108.373 60.8301 L
108.373 50.9707 L
118.2344 50.9707 L
f
17.3203 52.9609 m
17.3203 62.8213 L
7.46094 62.8213 L
7.46094 52.9609 L
17.3203 52.9609 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed 18)
0 A
u
u
0 J 0 j 1 w 4 M []0 d
0 XR
-3918.7319 4618.8438 m
-3810.1599 4618.8438 L
-3810.1599 4617.4312 L
-3918.7319 4617.4312 L
-3918.7319 4618.8438 L
n
u
0 O
0.695313 0.671875 0.636719 0.738281 k
-3810.1599 4617.4688 m
-3810.2112 4617.4312 L
-3810.3442 4617.5352 L
-3810.1599 4617.4688 L
f
-3811.0344 4617.6997 m
-3811.0088 4617.7188 -3811.0212 4617.75 -3810.9951 4617.769 C
-3810.4817 4617.4727 L
-3810.7112 4617.3047 -3810.8833 4617.8125 -3811.0344 4617.6997 c
f
-3811.1855 4617.6699 m
-3811.3848 4617.6006 -3811.4673 4617.7393 -3811.5137 4617.7871 C
-3811.4441 4617.6792 -3811.1423 4617.8203 -3811.1855 4617.6699 C
f
-3828.7217 4617.7393 m
-3828.7031 4617.7383 -3828.6785 4617.7344 -3828.6599 4617.73 C
-3828.6912 4617.7256 -3828.7112 4617.73 -3828.7217 4617.7393 C
f
-3833.2969 4618.2119 m
-3833.3447 4618.3232 L
-3832.4912 4618.125 -3831.5281 4618.3262 -3830.6252 4618.2393 C
-3830.6863 4618.2793 L
-3828.3953 4618.3223 -3826.2825 4618.1367 -3824.0095 4618.0518 C
-3824.0449 4618.0645 -3824.0569 4618.0967 -3824.0935 4618.1094 c
-3823.9839 4618.0713 -3823.8623 4618 -3823.7393 4618.0093 C
-3823.7073 4618.0342 -3823.7737 4618.061 -3823.8132 4618.0723 C
-3823.3333 4618.2559 -3822.4033 4617.9561 -3822.1033 4618.0977 C
-3821.9683 4618.0781 -3821.9087 4618.0015 -3821.9839 4617.9429 C
-3820.2048 4617.896 -3818.3015 4617.8608 -3816.4895 4617.7168 C
-3816.4023 4617.7422 -3816.3865 4617.792 -3816.4104 4617.8555 C
-3814.8616 4617.5576 -3813.2383 4617.6763 -3811.6536 4617.7246 C
-3811.5928 4617.6465 -3811.8152 4617.6416 -3811.6592 4617.5601 C
-3812.1687 4617.4624 -3812.5923 4617.7524 -3813.0544 4617.6094 C
-3812.9951 4617.5342 L
-3813.3313 4617.4854 -3813.0632 4617.7246 -3813.4121 4617.6274 C
-3813.5496 4617.5645 -3813.3777 4617.5313 -3813.4417 4617.5254 C
-3814.1563 4617.5566 -3814.9016 4617.4883 -3815.5745 4617.6719 C
-3815.7407 4617.5078 -3816.3423 4617.666 -3816.6064 4617.5093 C
-3816.7913 4617.5742 -3816.9768 4617.5576 -3817.0471 4617.666 C
-3819.5481 4617.5796 -3822.1033 4617.7383 -3824.6653 4617.7261 C
-3825.8643 4618.0435 -3827.3 4617.665 -3828.7231 4617.7715 C
-3828.7329 4617.7603 -3828.7312 4617.748 -3828.7217 4617.7393 C
-3829.1855 4617.8174 -3829.8616 4617.8545 -3830.4153 4617.8145 C
-3830.8843 4617.9492 L
-3834.2161 4617.6729 -3837.6208 4617.8672 -3841.0049 4617.7524 c
-3844.8503 4617.6729 -3848.2192 4617.4453 -3851.9641 4617.8633 C
-3851.9592 4617.832 -3851.9895 4617.8145 -3851.8928 4617.8022 C
-3852.9736 4617.8662 -3853.9583 4617.7524 -3854.9761 4617.8184 C
-3854.9729 4617.7871 L
-3857.4983 4618.0488 -3860.2295 4617.7524 -3862.6641 4618.0342 C
-3865.6279 4618.0059 -3868.9792 4618.0342 -3872.1162 4618.1152 C
-3872.1089 4618.0518 L
-3874.6191 4618.1846 -3877.0449 4617.8516 -3879.5496 4617.9517 C
-3882.1252 4617.8086 -3884.8464 4618.3125 -3887.4441 4618.1211 C
-3889.0513 4617.8125 -3891.1624 4618.4741 -3892.6721 4618.1543 C
-3895.7737 4617.6719 -3898.7825 4617.9824 -3901.8833 4618.2715 C
-3904.7439 4618.0996 -3907.6001 4618.541 -3910.3704 4618.1904 C
-3911.6831 4618.415 -3913.1328 4617.9121 -3914.5935 4617.9766 C
-3914.5413 4618.0547 L
-3915.0657 4617.8184 -3915.7097 4618.3853 -3916.0369 4618.0342 C
-3915.9817 4618.0181 L
-3916.2593 4617.8398 -3916.6265 4618.4385 -3916.7952 4618.2261 C
-3916.8401 4618.3145 L
-3917.1763 4618.3398 -3916.8799 4618.2144 -3917.1392 4618.1792 C
-3917.2368 4618.1904 -3917.1763 4618.3398 -3917.3799 4618.2891 C
-3917.4241 4617.9287 -3918.2031 4618.3672 -3918.2263 4617.9624 C
-3918.0425 4617.9624 -3918.5144 4617.8057 -3918.1016 4617.7207 C
-3918.2192 4617.6792 -3918.7825 4617.6992 -3918.7319 4617.8711 C
-3918.78 4618.0537 -3919 4618.2124 -3918.6577 4618.3535 C
-3918.5889 4618.2207 L
-3918.4736 4618.3535 -3918.5012 4618.2871 -3918.46 4618.3867 C
-3918.0127 4618.4043 -3917.9529 4618.5977 -3917.6321 4618.6772 C
-3917.6353 4618.6729 -3917.6384 4618.6699 -3917.6335 4618.6631 C
-3917.4143 4618.5039 -3917.1111 4618.5977 -3916.9375 4618.6211 C
-3916.8679 4618.6953 L
-3916.7625 4618.8496 -3916.3591 4618.3926 -3916.4951 4618.6582 C
-3915.5857 4618.5923 -3914.5432 4618.5957 -3913.5271 4618.5923 C
-3913.3848 4618.4912 -3912.7493 4618.6016 -3912.9712 4618.4072 c
-3912.7168 4618.6289 -3911.9607 4618.6846 -3911.6799 4618.6763 C
-3911.6904 4618.6973 -3911.7024 4618.7207 -3911.7463 4618.7124 C
-3911.2017 4619 -3911.1008 4618.4463 -3910.5903 4618.7979 C
-3910.5105 4618.5493 -3909.6631 4618.8774 -3909.3743 4618.5854 C
-3909.3113 4618.6406 -3909.2903 4618.6904 -3909.3132 4618.7344 C
-3908.3943 4618.7393 -3907.3792 4618.8296 -3906.6016 4618.8408 C
-3905.9373 4618.623 -3904.9929 4618.9395 -3904.4216 4618.6387 C
-3903.9482 4618.7017 -3903.1824 4618.8281 -3902.5215 4618.707 C
-3902.5857 4618.7437 L
-3901.8401 4618.7261 -3900.9087 4618.7104 -3900.3972 4618.5215 C
-3900.1768 4618.8096 -3899.8545 4618.7524 -3899.5322 4618.8438 C
-3899.0344 4618.7104 -3898.0295 4618.75 -3897.27 4618.6289 C
-3897.1536 4618.7617 -3896.6433 4618.5723 -3896.6042 4618.7656 C
-3894.4761 4618.3926 -3891.8447 4618.5225 -3889.5723 4618.8047 C
-3889.6052 4618.8184 L
-3889.3103 4618.7124 -3888.9705 4618.4785 -3888.6704 4618.3413 C
-3888.6409 4618.3584 -3888.6443 4618.3896 -3888.7073 4618.3896 C
-3888.2922 4618.3535 -3887.9041 4618.5435 -3887.4895 4618.5078 C
-3887.4929 4618.54 -3887.4929 4618.54 -3887.5601 4618.5703 C
-3887.1711 4618.4844 -3886.7561 4618.7246 -3886.2969 4618.5752 C
-3886.2712 4618.6265 L
-3885.9792 4618.5547 L
-3885.9863 4618.6182 -3885.9976 4618.7144 -3886.1536 4618.6934 C
-3882.5903 4618.7559 -3878.9121 4618.4248 -3875.2537 4618.4727 C
-3875.3879 4618.5332 L
-3874.6785 4618.4248 L
-3874.6824 4618.457 -3874.7161 4618.4727 -3874.75 4618.4873 C
-3873.8464 4618.5957 -3872.9087 4618.415 -3872.0281 4618.4424 C
-3872.0322 4618.4736 -3872.1655 4618.5352 -3872.0422 4618.5703 C
-3871.3904 4618.396 -3870.9951 4618.7964 -3870.6687 4618.4351 C
-3870.6384 4618.4517 -3870.6177 4618.5332 -3870.6841 4618.5625 C
-3868.8704 4618.4424 -3867.0081 4618.4492 -3865.1809 4618.5078 C
-3863.6592 4618.1807 -3861.9583 4618.4766 -3860.3777 4618.2168 C
-3860.3855 4618.2822 L
-3858.3391 4618.0537 -3856.1682 4618.2979 -3854.0471 4618.2524 C
-3853.1663 4618.2783 -3852.5713 4618.2012 -3851.6863 4618.1973 C
-3851.6641 4618.2783 L
-3850.1743 4617.9688 -3848.5327 4618.5566 -3846.9785 4618.2158 C
-3847.0857 4618.3262 L
-3846.8447 4618.1553 -3846.1455 4618.3867 -3846.2375 4618.0933 C
-3845.9631 4618.1816 L
-3844.9072 4617.7949 -3844.0413 4618.3608 -3842.7473 4618.1094 C
-3842.8323 4618.1792 L
-3842.4883 4618.125 -3842.0872 4618.082 -3841.8323 4618.1465 C
-3841.8721 4618.1563 -3841.8535 4618.1768 -3841.9353 4618.1953 C
-3840.8577 4618.4707 -3839.6584 4618.166 -3838.5215 4618.1768 C
-3838.6504 4618.3062 L
-3838.1008 4618.1543 -3837.0928 4618.2959 -3836.3704 4618.2261 C
-3836.4143 4618.2871 L
-3836.0488 4618.2012 L
-3836.0393 4618.3232 L
-3835.0991 4618.332 -3834.2144 4618.2261 -3833.2969 4618.2119 C
f
-3823.8132 4618.0723 m
-3823.8159 4618.0713 -3823.8201 4618.0713 -3823.8232 4618.0684 C
-3823.8513 4618.0791 -3823.8376 4618.0781 -3823.8132 4618.0723 C
f
-3917.5168 4618.7017 m
-3917.5601 4618.6953 -3917.5959 4618.6875 -3917.6321 4618.6772 C
-3917.6233 4618.7017 -3917.5537 4618.6973 -3917.5168 4618.7017 c
f
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 2)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-7791.3833 8491.4551 m
-7699.5479 8491.4551 L
-7699.5479 8487.1758 L
-7791.3833 8487.1758 L
-7791.3833 8491.4551 L
n
0 O
0.695313 0.671875 0.636719 0.738281 k
-7791.1631 8488.7754 m
-7791.5 8488.8418 -7790.9814 8489.0313 -7791.3833 8488.8887 C
-7791.3379 8488.7705 -7791.2725 8488.6816 -7791.1631 8488.7754 C
f
-7700.6675 8488.9414 m
-7701.7524 8489.7041 -7703.1816 8488.9336 -7704.3701 8489.4199 C
-7704.5098 8489.4521 -7704.3345 8489.002 -7704.6484 8489.1025 C
-7705.8008 8489.6953 -7707.6162 8489.3418 -7709.0195 8488.8848 C
-7708.9346 8488.7666 L
-7709.2017 8488.6816 -7709.5283 8489.0723 -7709.8115 8489.0176 C
-7709.8135 8488.9395 -7709.7207 8488.9063 -7709.7861 8488.7979 C
-7709.8574 8489.0352 -7710.2983 8488.9082 -7710.4185 8489.084 C
-7710.5303 8488.9922 -7710.5195 8488.8047 -7710.6641 8488.7002 C
-7710.8262 8488.9697 L
-7711.2769 8489.6094 -7711.9209 8488.9258 -7712.5361 8489.2559 C
-7712.5063 8489.1934 -7712.4453 8489.1445 -7712.4941 8489.084 C
-7713.4814 8489.4727 -7714.7168 8489.3994 -7715.8208 8489.543 C
-7715.7769 8489.4482 -7715.7363 8489.2754 -7715.8008 8489.168 C
-7715.8555 8489.4512 -7716.1963 8489.5225 -7716.4922 8489.5781 C
-7716.6255 8489.2871 -7716.9995 8489.8438 -7717.3467 8489.6826 C
-7717.3169 8489.6191 L
-7717.5732 8489.9238 -7717.6973 8489.4434 -7717.9053 8489.8086 C
-7718.0684 8489.5801 L
-7718.1807 8489.9902 -7718.4395 8489.3672 -7718.6514 8489.5762 C
-7718.6445 8489.6602 L
-7718.8442 8489.7598 -7718.9482 8489.5537 -7719.1338 8489.623 C
-7719.1514 8489.5762 L
-7719.5854 8489.6826 -7719.8379 8489.4551 -7719.8271 8489.7754 C
-7719.9795 8489.5186 -7719.4063 8489.6582 -7719.6455 8489.2842 C
-7721.0732 8489.6152 -7722.5459 8489.5498 -7723.9834 8489.5566 C
-7724.1465 8489.4277 -7724.2505 8489.3887 -7724.2871 8489.2666 C
-7724.4307 8489.332 -7724.8281 8489.3262 -7724.9585 8489.4902 C
-7724.9102 8489.4834 -7725.0513 8489.3262 -7725.1274 8489.3105 C
-7725.3887 8489.1895 -7725.4131 8489.6621 -7725.7002 8489.5186 C
-7725.5859 8489.4336 -7725.5469 8489.3301 -7725.5854 8489.2109 C
-7725.8301 8489.4609 -7726.1577 8489.4209 -7726.4473 8489.502 C
-7726.4023 8489.4482 -7726.3325 8489.416 -7726.3433 8489.3154 C
-7726.6602 8489.5986 -7726.9209 8489.2559 -7727.1982 8489.4346 C
-7727.0947 8489.25 L
-7727.5415 8489.0254 -7727.2266 8489.6367 -7727.6128 8489.5039 C
-7727.52 8489.4453 -7727.5527 8489.373 -7727.5361 8489.2979 C
-7727.8965 8489.6338 -7728.4795 8489.5225 -7728.8389 8489.6367 C
-7728.8174 8489.6113 -7728.8232 8489.5605 Y
-7729.2148 8489.6025 -7729.6245 8489.498 -7730.0552 8489.6445 C
-7730.2119 8489.5625 -7730.0039 8489.1934 -7730.4185 8489.2617 C
-7730.4033 8489.6328 -7731.1221 8489.4141 -7730.8779 8489.834 C
-7731.2319 8489.7734 -7731.7925 8489.6338 -7732.0283 8489.7598 C
-7731.8691 8489.6191 -7732.2007 8489.3066 -7731.9063 8489.2754 C
-7732.1289 8489.0498 L
-7732.0957 8488.8984 -7731.8999 8489.1016 -7731.9707 8488.9102 C
-7732.1182 8488.9258 -7732.5479 8489.0723 -7732.6797 8489.0117 C
-7732.9531 8489.2393 -7733.2041 8489.6641 -7733.6465 8489.7109 C
-7733.4385 8489.5664 -7733.7646 8489.3018 -7733.6235 8489.2383 C
-7734.2407 8489.9482 L
-7734.3877 8489.9658 -7734.2725 8489.6563 -7734.4854 8489.7529 C
-7734.4746 8489.8506 -7734.5674 8489.9121 -7734.6318 8489.9922 C
-7734.6875 8489.9482 -7735.2441 8490.084 -7735.3081 8489.7178 C
-7735.3735 8489.5762 -7735.0684 8489.6426 -7735.2314 8489.5117 C
-7735.5029 8489.5146 -7735.5151 8489.6406 -7735.7871 8489.6465 C
-7735.7925 8489.5977 L
-7735.9717 8489.543 -7736.3213 8489.7529 -7736.1265 8489.9551 C
-7736.0015 8489.9658 -7736.1738 8489.7354 -7735.9888 8489.8418 C
-7736.1152 8490.0537 -7736.4312 8490.1133 -7736.7031 8490.1162 C
-7736.6104 8490.0586 -7736.6216 8489.9609 -7736.5845 8489.8574 C
-7736.9497 8490.1445 -7737.3369 8490.2354 -7737.7451 8490.3555 C
-7737.7515 8490.5293 -7737.5928 8490.0391 -7737.5327 8490.1309 C
-7738.0557 8489.8896 -7738.6128 8490.4727 -7739.0479 8490.1201 C
-7738.9766 8490.0898 -7739.0098 8490.3672 -7739.0146 8490.3184 C
-7739.2666 8490.2969 -7739.2549 8490.0449 -7739.4189 8490.1377 C
-7739.4355 8489.9902 -7739.6255 8490.1855 -7739.7944 8490.2305 C
-7739.8818 8490.3369 -7739.8384 8490.1582 -7739.6914 8490.1426 C
-7739.9268 8490.2666 -7740.8691 8490.4941 -7741.4131 8490.2793 C
-7741.4023 8490.377 -7741.7471 8490.6377 -7741.8721 8490.627 C
-7741.8232 8490.3984 L
-7741.9375 8490.2617 -7742.2422 8490.418 -7742.2632 8490.2227 C
-7742.5303 8490.5 -7741.2344 8489.9863 -7741.5957 8490.2002 C
-7741.6895 8490.0098 -7742.0991 8490.5645 -7742.0215 8490.2529 C
-7742.2725 8490.2617 -7742.5161 8490.5186 -7742.7559 8490.3047 C
-7742.6865 8490.3418 -7742.5522 8489.9873 -7742.7549 8490.0039 C
-7743.1123 8490.0449 -7742.8564 8490.1133 -7743.1465 8490.1895 C
-7743.3281 8490.2832 L
-7743.3398 8490.5059 -7743.6475 8490.2529 -7743.5146 8490.502 C
-7743.5586 8490.3184 -7744.0337 8490.6152 -7743.9971 8490.2461 C
-7743.9473 8489.9551 L
-7744.1016 8489.9766 -7744.2002 8490.2617 -7744.3213 8490.3896 C
-7744.3418 8490.3633 -7744.3823 8490.3047 -7744.3745 8490.2578 C
-7744.3994 8490.7031 -7744.7432 8490.2207 -7744.9268 8490.5645 C
-7745.2505 8490.4102 -7745.7495 8490.5498 -7745.9023 8490.2734 C
-7746.1514 8490.4082 -7746.3784 8490.5674 -7746.6621 8490.4727 C
-7746.6055 8490.4307 -7746.5283 8490.418 -7746.5122 8490.3223 C
-7746.6904 8490.1914 -7746.7344 8490.3086 -7746.8975 8490.3809 C
-7746.8608 8490.3145 -7747.2539 8490.1201 -7747.4521 8489.9629 C
-7747.6992 8490.0957 -7747.6143 8490.3359 -7747.6392 8490.4824 C
-7747.8652 8490.043 -7748.3379 8490.7656 -7748.6211 8490.3672 C
-7748.5352 8490.3066 -7748.2598 8490.1514 -7748.4658 8490.041 C
-7748.6919 8489.6025 -7748.9219 8490.3643 -7749.2861 8490.1543 C
-7749.1968 8490.5186 L
-7749.3594 8490.293 -7749.7334 8490.7305 -7749.6963 8490.3594 C
-7749.8184 8490.4902 -7750.1265 8490.2383 -7750.0859 8490.5938 C
-7750.6846 8490.293 -7751.5425 8490.7754 -7751.9102 8490.1377 C
-7751.9961 8490.1973 -7752.2104 8490.1367 -7752.1665 8490.3193 C
-7752.0239 8490.5176 -7751.9673 8490.1777 -7751.9141 8490.3125 C
-7751.9912 8490.3232 -7752.0078 8490.4209 -7752.0161 8490.4697 C
-7752.2021 8490.3887 -7752.3486 8490.3633 -7752.1729 8490.0674 C
-7752.5869 8489.8477 -7752.6001 8490.6719 -7753.1274 8490.5322 C
-7753.1035 8490.3857 -7753.1436 8490.3301 -7753.2979 8490.3535 C
-7753.5903 8490.6055 L
-7753.9312 8490.5469 -7753.7842 8490.2705 -7753.7925 8490.0215 C
-7753.9746 8490.0645 -7754.1973 8490.0527 -7754.2803 8490.2383 C
-7754.5015 8489.9258 L
-7754.3398 8490.1514 -7754.6514 8490.0762 -7754.7368 8490.1367 C
-7754.6514 8490.0762 L
-7754.6846 8489.9697 -7754.8955 8490.0352 -7755.0024 8490.0664 C
-7754.9766 8490.2207 -7754.7617 8490.2832 -7754.6445 8490.3281 C
-7754.7373 8490.4375 -7754.8823 8490.4121 -7755.0059 8490.541 C
-7754.9648 8490.2969 -7755.3027 8490.3672 -7755.4473 8490.3418 C
-7755.6133 8490.2891 -7755.6348 8490.5605 -7755.6831 8490.5527 C
-7755.6875 8490.4258 -7755.9541 8490.5313 -7755.8247 8490.3535 C
-7755.7681 8490.3125 -7755.6953 8490.4766 -7755.6016 8490.3643 C
-7755.7109 8490.2705 -7755.6982 8490.0498 -7755.9258 8490.2109 C
-7756.0967 8490.332 -7755.8818 8490.6934 -7756.2061 8490.5391 C
-7756.1211 8490.4785 -7756.1055 8490.3809 -7756.0391 8490.293 C
-7756.3433 8490.166 L
-7756.3564 8490.3887 L
-7756.3975 8490.332 -7756.3691 8490.3125 -7756.3877 8490.2832 C
-7756.4785 8490.5176 -7756.8521 8490.3555 -7756.9209 8490.6191 C
-7757.0742 8490.6426 -7757.2441 8490.4648 -7757.3906 8490.4395 C
-7757.3623 8490.4199 L
-7757.5415 8490.2891 -7757.7793 8490.375 -7757.9297 8490.5254 C
-7757.9219 8490.4766 L
-7758.0195 8490.459 -7758.2505 8490.4941 -7758.3735 8490.625 C
-7758.6201 8490.457 -7758.4561 8489.7842 -7758.7295 8490.0645 C
-7758.98 8490.0723 -7759.1221 8490.4727 -7759.0215 8490.6152 C
-7759.4717 8490.4648 -7759.9834 8490.8281 -7760.4009 8490.4824 C
-7760.4658 8490.5723 -7760.4248 8490.6289 -7760.5586 8490.6816 C
-7761.2197 8490.5938 -7761.9551 8490.9453 -7762.4814 8490.5078 C
-7762.29 8490.4141 -7762.4688 8490.2842 -7762.4727 8490.1582 C
-7762.6309 8490.3574 -7762.6631 8489.9512 -7762.7197 8490.293 C
-7762.7041 8490.4941 -7762.7197 8490.5918 -7762.5337 8490.6729 C
-7762.9282 8490.7813 -7763.5283 8490.7813 -7763.7471 8490.5938 C
-7763.6377 8490.6865 -7763.7227 8490.748 -7763.8086 8490.8086 C
-7763.7803 8490.4873 -7764.0713 8490.4395 -7764.2915 8490.5527 C
-7764.3223 8490.748 L
-7764.4658 8490.5469 L
-7764.5503 8490.6094 -7764.5591 8490.957 -7764.7773 8490.7695 C
-7764.7891 8490.6934 -7764.8018 8490.6162 -7764.8418 8490.5605 C
-7765.0693 8490.7207 -7765.3906 8490.9922 -7765.6377 8490.8262 C
-7765.8398 8490.541 L
-7765.9453 8490.5723 -7766.1235 8490.7441 -7765.9375 8490.8262 C
-7766.3594 8490.6543 -7766.6309 8490.6328 -7766.7646 8490.3857 C
-7767.4912 8490.9873 -7768.5459 8491.0117 -7769.3906 8490.9688 C
-7769.3652 8490.8223 L
-7769.5923 8490.6855 -7769.4834 8491.0781 -7769.6416 8490.9766 C
-7769.5684 8490.8369 -7769.8145 8490.6729 -7769.6362 8490.502 C
-7769.9609 8490.3477 -7770.0547 8490.7559 -7770.2656 8490.8223 C
-7770.2979 8491.0146 -7770.0957 8490.6992 -7770.1367 8490.9434 C
-7770.1729 8491.0117 -7770.5859 8490.793 -7770.6362 8491.084 C
-7770.7178 8490.9697 -7770.6543 8490.7559 -7770.6104 8490.6377 C
-7770.8086 8490.7793 L
-7771.0513 8490.4395 -7770.2559 8490.1719 -7770.5107 8489.7529 C
-7770.6934 8489.7979 L
-7770.8682 8489.4941 -7770.21 8489.4551 -7770.6689 8489.3506 C
-7770.8682 8489.4941 -7771.0381 8489.916 -7770.8608 8490.0449 C
-7771.2754 8490.125 -7771.0527 8490.7383 -7771.4985 8490.7139 C
-7771.6201 8490.543 -7771.1416 8490.6729 -7771.2275 8490.4336 C
-7771.4375 8490.1992 -7771.6484 8490.5645 -7771.8354 8490.4824 C
-7771.6279 8490.5918 -7771.8032 8490.8857 -7771.9375 8490.9395 C
-7772.1641 8490.8018 -7771.79 8490.6641 -7772.1113 8490.6338 C
-7772.1641 8490.8018 -7772.4595 8490.9277 -7772.2041 8491.0449 C
-7772.3203 8491.4258 -7772.5381 8490.9395 -7772.7129 8491.2344 C
-7772.8174 8490.9658 -7772.3823 8490.6152 -7772.7354 8490.4814 C
-7772.6792 8490.7393 -7773.1704 8490.832 -7772.9839 8491.2139 C
-7773.1221 8491.1406 -7773.1367 8490.9375 -7773.0361 8490.7793 C
-7773.2334 8490.6201 -7773.5151 8491.25 -7773.5801 8490.7383 C
-7773.6479 8491.002 L
-7773.71 8490.916 -7773.7983 8490.8506 -7773.8994 8490.709 C
-7774.0732 8490.7041 -7774.46 8491.0664 -7774.4443 8490.668 C
-7774.5 8490.709 -7774.8975 8490.6914 -7774.7441 8490.9658 C
-7774.4971 8491.1338 -7774.46 8490.7656 -7774.3223 8491.1377 C
-7774.4971 8490.834 -7774.6787 8491.1777 -7774.8213 8491.2793 C
-7774.8447 8491.125 L
-7774.9297 8491.1855 -7775.1255 8491.1514 -7775.1787 8491.3184 C
-7775.1133 8491.2305 -7775.1475 8491.125 -7775.2148 8491.0879 C
-7775.3042 8491.3223 L
-7775.6494 8491.4395 -7775.3857 8490.9102 -7775.7217 8490.9785 C
-7775.4663 8490.7969 L
-7775.5225 8490.8359 -7775.6367 8490.6162 -7775.7979 8490.6895 C
-7775.8604 8490.9033 -7775.9775 8491.1602 -7776.0313 8491.3262 C
-7776.2207 8491.4199 -7776.1162 8491.085 -7776.3027 8491.3047 C
-7776.0586 8491.0469 L
-7776.0215 8490.9766 -7776.2231 8490.6934 -7776.4761 8490.6992 C
-7776.6377 8490.7734 -7776.8887 8491.082 -7776.6338 8491.1992 C
-7776.7607 8491.2031 -7776.9385 8491.0723 -7776.8379 8490.916 C
-7777.1255 8490.9902 -7776.7998 8491.1465 -7777.0479 8491.2793 C
-7777.1494 8491.1367 -7777.4658 8490.9336 -7777.6563 8490.7266 C
-7777.3975 8490.3682 L
-7777.5693 8490.3643 L
-7777.3467 8490.0781 -7777.6826 8490.1465 -7777.5566 8489.8438 C
-7777.6743 8489.7969 -7777.8169 8489.8994 -7777.9307 8489.9785 C
-7777.5864 8490.4629 -7778.3159 8490.6406 -7778.2158 8491.082 C
-7778.6875 8491.2031 -7778.5107 8490.0078 -7779.0024 8490.6992 C
-7778.9219 8490.8145 -7779.1533 8491.1504 -7778.8564 8491.0225 C
-7779.1494 8490.9746 -7779.0557 8491.4658 -7779.4014 8491.2832 C
-7779.1455 8491.1016 -7779.6763 8490.8359 -7779.3066 8490.5723 C
-7779.3311 8490.7178 -7779.1001 8490.6826 -7779.0435 8490.6426 C
-7779.1641 8490.4727 -7779.0186 8490.1973 -7779.3184 8490.1973 C
-7779.5015 8490.2393 -7779.7524 8490.248 -7779.7158 8490.4785 C
-7779.7085 8490.7314 -7779.4365 8490.4512 -7779.5537 8490.707 C
-7779.9185 8490.7949 -7779.9795 8490.4102 -7780.1304 8490.8594 C
-7779.8999 8490.8232 -7779.8423 8491.084 -7779.8467 8491.2578 C
-7780.1143 8491.3633 L
-7780.0625 8491.1953 L
-7780.4922 8491.0742 -7780.1895 8491.5 -7780.6055 8491.4551 C
-7780.8008 8491.123 L
-7780.7017 8490.8369 -7780.1953 8491.25 -7780.2695 8490.7842 C
-7780.54 8490.7656 -7780.6299 8491.002 -7780.8848 8490.8818 C
-7780.8281 8490.8418 -7780.7505 8490.8301 -7780.6943 8490.7891 C
-7780.7915 8490.7734 -7780.8877 8490.1563 -7781.2734 8490.5176 C
-7781.4727 8490.6582 -7781.3262 8490.6826 -7781.3311 8490.8574 C
-7781.7656 8490.9102 -7781.8955 8491.0879 -7782.1753 8491.1152 C
-7782.1177 8490.7754 -7782.6699 8491.082 -7782.3608 8490.7344 C
-7782.2188 8490.9336 -7781.5903 8490.9141 -7781.4365 8490.5898 C
-7781.5947 8490.1865 -7781.0952 8490.6465 -7781.0024 8490.2383 C
-7781.3506 8490.2285 -7781.3335 8489.832 -7781.3896 8489.5723 C
-7781.4863 8489.5537 -7781.5801 8489.6641 -7781.6377 8489.7041 C
-7781.6787 8489.9482 -7781.5522 8489.9453 -7781.5449 8490.1973 C
-7781.9336 8490.1309 -7782.3081 8490.2666 -7782.5225 8490.5059 C
-7782.6523 8490.3848 -7782.6113 8490.1406 -7782.4575 8490.1162 C
-7782.9199 8490.1895 -7783.4141 8490.1563 -7783.8535 8490.082 C
-7783.5693 8490.4814 -7784.3433 8490.1758 -7784.1494 8490.5078 C
-7783.9141 8490.5977 -7783.7119 8490.8818 -7783.8418 8491.0605 C
-7783.9888 8491.0352 -7783.8369 8490.8857 -7783.8984 8490.8008 C
-7784.0859 8491.0186 -7784.1895 8490.4512 -7784.3735 8490.7949 C
-7783.9512 8490.666 -7784.2915 8490.3086 -7784.2139 8489.9961 C
-7784.5186 8490.1719 -7784.2007 8489.7734 -7784.5024 8489.7734 C
-7784.8057 8489.9473 -7785.1787 8490.084 -7785.5161 8490.1514 C
-7785.9399 8489.8555 -7786.5898 8490.1465 -7786.9683 8490.1582 C
-7787.1665 8490 -7787.0322 8489.6465 -7787.2471 8489.585 C
-7787.4995 8489.5918 -7787.0601 8489.9658 -7787.4336 8489.8047 C
-7787.3975 8489.7344 L
-7787.5107 8489.8154 -7788.0825 8489.4941 -7788.1929 8490.002 C
-7788.0776 8489.6191 L
-7788.1475 8489.584 -7788.2119 8489.6719 -7788.2695 8489.7129 C
-7788.2725 8489.5879 -7788.3535 8489.4746 -7788.2402 8489.3926 C
-7788.4707 8489.1289 -7788.7241 8489.4346 -7788.9746 8489.4453 C
-7788.8135 8489.6719 L
-7789.2422 8489.8496 -7789.5293 8489.625 -7789.9443 8489.7041 C
-7789.9316 8489.4824 L
-7790.1787 8489.6152 L
-7790.1182 8489.3994 -7790.3447 8489.2617 -7790.4751 8489.4414 C
-7789.8335 8488.8984 L
-7789.6553 8489.0293 -7790.0283 8489.166 -7789.9165 8489.3848 C
-7789.8213 8489.5762 -7789.4375 8489.5146 -7789.3755 8489.3018 C
-7789.5225 8489.2773 -7789.5293 8489.3262 -7789.6436 8489.4063 C
-7789.6919 8489.0977 -7789.4688 8489.1094 -7789.3584 8488.9033 C
-7789.4355 8488.916 -7789.5449 8488.8223 -7789.5615 8488.9199 C
-7789.4102 8488.7695 -7789.2578 8488.7461 -7789.0059 8488.7383 C
-7789.1763 8488.8594 -7788.9131 8488.9297 -7788.9775 8489.0176 C
-7788.9575 8488.7461 -7788.7168 8488.6621 -7788.4053 8488.7383 C
-7788.1831 8489.0527 -7787.8208 8488.5361 -7787.46 8488.623 C
-7787.6064 8488.8984 -7787.7935 8489.1191 -7788.0127 8489.2305 C
-7787.7861 8489.3682 -7787.7607 8489.2227 -7787.5337 8489.3613 C
-7787.4238 8489.1563 -7787.3457 8488.8418 -7787.0503 8488.7168 C
-7787.0342 8488.9199 L
-7786.7666 8488.8154 -7786.7666 8488.5146 -7786.4258 8488.5723 C
-7785.8418 8488.6719 -7785.2407 8488.6719 -7784.7949 8488.6973 C
-7784.7783 8488.8994 L
-7784.5303 8488.4658 -7783.9521 8488.7393 -7783.6182 8488.5469 C
-7783.0503 8488.7422 -7782.3848 8488.3535 -7782.0938 8488.7031 C
-7781.0913 8488.5469 -7780.2148 8488.3945 -7779.1768 8488.4688 C
-7779.3516 8488.7637 L
-7779.1655 8488.5469 -7779.2305 8488.9336 -7779.0479 8488.8896 C
-7779.2578 8488.6543 -7778.7949 8488.584 -7778.6665 8488.4033 C
-7778.2041 8488.6328 -7777.6104 8488.3818 -7777.2007 8488.1758 C
-7777.1846 8488.3789 L
-7776.7705 8487.998 -7776.2759 8488.332 -7775.7598 8488.3945 C
-7775.7007 8488.4785 -7775.6074 8488.6689 -7775.4536 8488.6465 C
-7775.1738 8488.3184 -7775.0273 8488.3418 -7774.6167 8488.1367 C
-7774.3169 8488.1367 -7773.8301 8488.2178 -7773.5254 8488.3457 C
-7772.3975 8487.8848 -7771.2456 8488.1797 -7770.0732 8487.9023 C
-7769.9888 8488.1406 L
-7768.8521 8487.6309 -7767.4541 8488.0938 -7766.4839 8487.832 C
-7766.5776 8488.2393 L
-7766.2734 8488.3643 -7765.8843 8488.1328 -7765.9619 8487.8438 C
-7765.6567 8487.9688 -7765.2007 8487.6465 -7765.0068 8487.9814 C
-7764.6953 8488.0566 -7764.6255 8487.793 -7764.3662 8487.7383 C
-7763.7422 8487.8926 -7763.5107 8487.8574 -7762.9224 8487.7813 C
-7763.0684 8487.7559 L
-7763.1328 8487.8457 -7763.1387 8488.0186 -7762.9922 8488.0449 C
-7762.7725 8487.9307 -7762.1846 8488.1543 -7762.4033 8487.668 C
-7761.7754 8487.9482 -7760.9385 8487.4395 -7760.3271 8487.8184 C
-7760.3789 8487.6855 -7760.2246 8487.6602 -7760.1602 8487.5703 C
-7759.6089 8487.5645 -7759.0293 8487.8359 -7758.5898 8487.6094 C
-7758.5024 8487.6758 -7758.7295 8487.8359 -7758.5049 8487.8496 C
-7758.3721 8487.7979 -7758.5024 8487.6758 -7758.3384 8487.6016 C
-7757.4453 8487.3535 -7756.5303 8487.8574 -7755.7188 8487.793 C
-7754.2754 8487.5361 -7752.7695 8487.666 -7751.3867 8487.623 C
-7751.4023 8487.7207 L
-7750.9395 8487.3477 -7750.3159 8488.1025 -7749.9463 8487.541 C
-7749.8369 8487.6338 -7749.5283 8487.585 -7749.6094 8487.7734 C
-7749.2407 8487.5098 -7748.5771 8488.0215 -7748.0439 8487.6865 C
-7748.0928 8487.6777 -7748.1211 8487.6973 -7748.1777 8487.7393 C
-7747.6392 8487.9551 -7747.1641 8487.6602 -7746.5957 8487.8555 C
-7746.6533 8487.8975 -7746.7583 8487.9277 -7746.7754 8488.0254 C
-7746.5557 8488.2129 -7746.2549 8487.6133 -7746.1348 8488.084 C
-7746.0088 8488.0801 -7746.0449 8487.8477 -7746.1221 8487.8613 C
-7744.8779 8488.0449 -7743.5498 8487.7441 -7742.2549 8487.6367 C
-7741.3271 8487.918 -7742.1982 8488.4297 -7741.4663 8488.0781 C
-7741.4063 8488.1689 -7741.4229 8487.8984 -7741.4131 8487.9961 C
-7741.1299 8487.8643 -7740.9717 8488.5215 -7740.7754 8488.2754 C
-7740.8564 8487.9863 -7740.6445 8488.1133 -7740.6387 8487.9375 C
-7740.0713 8488.125 -7739.9575 8488.3857 -7739.5098 8488.166 C
-7739.5435 8488.3184 L
-7739.0186 8487.8887 -7738.4102 8488.1191 -7737.9673 8487.623 C
-7735.0728 8487.5322 -7732.2983 8487.2578 -7729.4761 8487.2002 C
-7726.6865 8487.2949 -7723.9551 8487.0723 -7721.1221 8487.3359 C
-7720.4585 8487.7354 -7720.4087 8487.7246 -7719.6797 8487.5625 C
-7719.7095 8487.627 -7719.7549 8487.6426 -7719.7061 8487.7031 C
-7719.6699 8487.375 -7719.1929 8487.6719 -7719.1235 8487.3594 C
-7718.0762 8487.4199 -7717.1113 8487.3301 -7716.0337 8487.3281 C
-7716.2041 8487.3633 -7716.2896 8487.6309 -7716.0869 8487.6094 C
-7715.8755 8487.3994 L
-7715.8408 8487.4922 L
-7715.7021 8487.4434 -7715.5513 8487.2813 -7715.6943 8487.1758 C
-7712.9873 8486.8926 -7710.3242 8487.5498 -7707.6729 8487.4697 C
-7707.0435 8487.6064 -7706.1475 8487.4814 -7705.4629 8487.4141 C
-7703.4355 8487.8506 -7701.6079 8488.2041 -7699.5479 8487.8984 C
-7699.8169 8488.7461 -7700.6675 8488.9414 V
f
-7790.7578 8488.7422 m
-7790.6855 8488.9063 -7790.4497 8488.9961 -7790.6377 8489.2139 C
-7790.6611 8489.0605 -7790.7822 8488.8887 -7790.7578 8488.7422 C
f
-7784.4619 8490.4297 m
-7784.4536 8490.3809 -7784.3721 8490.4961 -7784.3521 8490.5225 C
-7784.4297 8490.5352 -7784.5024 8490.6729 -7784.5645 8490.5879 C
-7784.4854 8490.5762 -7784.4976 8490.498 -7784.4619 8490.4297 C
f
-7782.8521 8490.5273 m
-7782.8765 8490.6729 -7783.2207 8490.7891 -7783.4238 8490.8066 C
-7782.8521 8490.5273 L
f
-7781.3521 8491.1289 m
-7781.2227 8491.252 -7781.2583 8491.3193 -7781.4326 8491.3154 C
-7781.4453 8491.2383 -7781.3877 8491.1992 -7781.3521 8491.1289 C
f
-7781.2456 8490.7969 m
-7781.1211 8490.793 -7781.0591 8490.8789 -7780.9985 8490.9629 C
-7781.0029 8490.8369 -7781.2871 8491.041 -7781.2456 8490.7969 C
f
-7777.9893 8491.2207 m
-7777.9111 8491.209 -7777.7417 8491.0879 -7777.6689 8491.25 C
-7777.7505 8491.1367 -7778.0498 8491.4346 -7777.9893 8491.2207 C
f
-7776.4761 8491 m
-7776.4272 8491.0098 -7776.4072 8491.0361 -7776.3506 8490.9961 C
-7776.2607 8491.0625 -7776.3555 8491.1689 -7776.4312 8491.1826 C
-7776.4761 8491 L
f
-7748.9287 8490.4141 m
-7749.0923 8490.4863 L
-7749.0684 8490.3418 L
-7748.9287 8490.4141 L
f
-7736.8574 8490.4063 m
-7736.6943 8490.3145 -7736.7441 8490.543 -7736.7168 8490.5645 C
-7736.8643 8490.5801 -7736.6621 8490.3848 -7736.8574 8490.4063 C
f
-7730.3486 8489.6777 m
-7730.3984 8489.6816 L
-7730.3818 8489.3818 L
-7730.3486 8489.6777 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 3)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-7791.5 8489.5273 m
-7577.5361 8489.5273 L
-7577.5361 8438.7266 L
-7791.5 8438.7266 L
-7791.5 8489.5273 L
n
u
0 R
0.742188 0.980469 0.007813 0.003906 K
1 J 3 w
-7775.3838 8473.0879 m
-7775.3838 8480.4658 l
-7758.9268 8487.2832 l
-7758.9268 8478.8281 l
S
1 Ap
0 O
0.019531 0.992188 0.972656 0 k
0 J
-7783.1016 8462.9727 m
-7783.1016 8467.2871 -7784.6455 8470.7842 -7786.5508 8470.7842 c
-7788.4561 8470.7842 -7790 8467.2871 -7790 8462.9727 c
-7790 8458.6582 -7788.4561 8455.1602 -7786.5508 8455.1602 c
-7784.6455 8455.1602 -7783.1016 8458.6582 -7783.1016 8462.9727 c
b
u
0 Ap
0.144531 1 1 0.046875 k
1 w
-7782.1484 8461.7461 m
-7785.5508 8461.752 L
-7788.9541 8461.7617 L
-7788.9814 8462.1582 -7789 8462.5605 -7789 8462.9727 c
-7789 8462.9766 -7789 8462.9785 -7789 8462.9824 C
-7785.5508 8463.709 L
-7782.1631 8464.4209 L
-7739.1699 8473.4727 L
-7739.1699 8461.6445 L
-7782.1484 8461.7461 L
f
0.019531 0.992188 0.972656 0 k
-7782.5439 8459.1504 m
-7785.5508 8459.7969 L
-7788.8213 8460.502 L
-7788.8809 8460.9082 -7788.9248 8461.3301 -7788.9541 8461.7617 C
-7785.5508 8461.752 L
-7782.1484 8461.7461 L
-7739.1699 8461.6445 L
-7739.1699 8449.8047 L
-7782.5439 8459.1504 L
f
0.234375 1 1 0.179688 k
-7782.1631 8464.4209 m
-7785.5508 8463.709 L
-7789 8462.9824 L
-7788.9971 8467.293 -7787.4551 8470.7842 -7785.5508 8470.7842 c
-7785.0303 8470.7842 -7784.5391 8470.5176 -7784.0967 8470.0488 C
-7739.1699 8485.7168 L
-7739.1699 8473.4727 L
-7782.1631 8464.4209 L
f
0.003906 0.816406 0.585938 0 k
-7784.0547 8455.9414 m
-7784.5078 8455.4453 -7785.0137 8455.1602 -7785.5508 8455.1602 c
-7787.0742 8455.1602 -7788.3643 8457.3984 -7788.8213 8460.502 C
-7785.5508 8459.7969 L
-7782.5439 8459.1504 L
-7739.1699 8449.8047 L
-7739.1699 8440.2266 L
-7784.0547 8455.9414 L
f
U
1 Ap
0.695313 0.671875 0.636719 0.738281 k
0 R
0.742188 0.980469 0.007813 0.003906 K
3 w
-7739.1699 8440.2266 m
-7733.6235 8440.2266 -7729.1279 8450.4102 -7729.1279 8462.9727 c
-7729.1279 8475.5352 -7733.6235 8485.7168 -7739.1699 8485.7168 c
-7744.7158 8485.7168 -7749.2109 8475.5352 -7749.2109 8462.9727 c
-7749.2109 8450.4102 -7744.7158 8440.2266 -7739.1699 8440.2266 c
B
u
0 Ap
0.664063 0 0.347656 0 k
1 w
-7577.6758 8443.9697 m
-7614.0205 8453.5303 -7685.8193 8439.2686 -7722.4155 8439.8994 C
-7724.4775 8440.0723 -7725.5117 8440.1914 -7727.5742 8440.501 c
-7729.6367 8440.8096 -7730.6675 8440.998 -7732.7295 8441.458 c
-7734.7925 8441.917 -7735.8223 8442.1846 -7737.8848 8442.8105 c
-7738.2021 8442.9063 -7738.7109 8443.0723 -7739.3154 8443.2754 c
-7740.5088 8443.6738 -7742.0908 8444.2207 -7743.4268 8444.6865 C
-7745.9072 8448.2354 -7747.8555 8454.8018 -7747.8555 8463.0322 c
-7747.8555 8471.7031 -7745.6973 8478.5488 -7743.0283 8481.9434 C
-7741.9346 8481.6641 -7740.4951 8481.3887 -7739.3154 8481.1309 c
-7738.7529 8481.0098 -7738.2515 8480.8906 -7737.8848 8480.7793 c
-7735.8223 8480.1553 -7734.7925 8479.8857 -7732.7295 8479.4258 c
-7730.6675 8478.9658 -7729.6367 8478.7793 -7727.5742 8478.4697 c
-7725.5117 8478.1602 -7724.4775 8478.042 -7722.4155 8477.8682 C
-7685.8193 8477.2354 -7614.0205 8491.5 -7577.6758 8481.9395 C
-7586.0762 8477.3857 -7590.2754 8474.2617 -7598.6758 8467.1738 C
-7591.1045 8459.8818 -7584.3809 8452.0498 -7577.6758 8443.9697 C
f
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 5)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-7791.5 8491.5 m
-7567.7979 8491.5 L
-7567.7979 8448.123 L
-7791.5 8448.123 L
-7791.5 8491.5 L
n
u
0 O
0.742188 0.980469 0.007813 0.003906 k
-7791.5 8491.5 m
-7742.5986 8491.5 L
-7749.1279 8488.708 L
-7769.4326 8480.0273 L
-7769.4326 8463.9482 L
-7769.4326 8461.3193 L
-7791.5 8461.3193 L
-7788.9033 8463.9482 L
-7775.9404 8477.0674 L
-7788.7705 8488.708 L
-7791.5 8491.5 L
f
0.621094 0.847656 0 0 k
-7769.4316 8448.123 m
-7769.4316 8451.3506 L
-7769.4316 8476.5449 L
-7769.4316 8480.0273 L
-7589.8662 8480.0273 L
-7589.8662 8476.5449 L
-7589.8662 8451.3506 L
-7589.8662 8448.123 L
-7769.4316 8448.123 L
f
0.742188 0.980469 0.007813 0.003906 k
-7583.3584 8477.0674 m
-7570.3965 8463.9482 L
-7567.7979 8461.3193 L
-7589.8662 8461.3193 L
-7589.8662 8463.9482 L
-7589.8662 8480.0273 L
-7610.1709 8488.708 L
-7616.7002 8491.5 L
-7567.7979 8491.5 L
-7570.5283 8488.708 L
-7583.3584 8477.0674 L
f
-7742.5986 8491.5 m
-7769.4326 8480.0273 L
N
u
0 O
0.847656 1 0.261719 0.160156 k
-7597.0215 8480.0273 m
-7616.7002 8480.0273 L
-7616.7002 8488.4395 L
-7616.7002 8491.5 L
-7589.8662 8480.0273 L
-7597.0215 8480.0273 L
f
-7769.4326 8480.0273 m
-7742.5986 8491.5 L
-7742.5986 8488.4395 L
-7742.5986 8480.0273 L
-7762.2764 8480.0273 L
-7769.4326 8480.0273 L
f
U
U
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -
( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 3 pt. ) -
(Flat/ Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe Calligr) -
(aphic Brush Tool/ 3 pt. Round/ Adobe Calligraphic Brush Tool/ ) -
(7 pt. Round/ Adobe ArtOnPath Brush Tool/ Charcoal/ Adobe ArtOn) -
(Path Brush Tool/ Pencil - Thin/ Adobe ArtOnPath Brush Tool/ Ba) -
(nner 1/ Adobe ArtOnPath Brush Tool/ Banner 2/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt. Oval)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Flat)
(1 3 3 9 9 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Round)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Oval)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt. Round)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Banner 1)
(1 / Unnamed Brush Pat 5/ / / / / 5 0.47451 0.278431 0.623529 /) -
(  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Banner 2)
(1 / Unnamed Brush Pat 3/ / / / / 5 0.25098 0.74902 0.713726 / ) -
( 1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Pencil - Thin)
(1 / Unnamed 18/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 k
(White)
Pc
0.746094 0.675781 0.667969 0.898438 k
(Black)
Pc
0 0.988281 1 0 k
(RGB Red)
Pc
0.0625 0 0.960938 0 k
(RGB Yellow)
Pc
0.625 0 1 0 k
(RGB Green)
Pc
0.515625 0 0.125 0 k
(RGB Cyan)
Pc
0.878906 0.765625 0 0 k
(RGB Blue)
Pc
0.269531 0.8125 0 0 k
(RGB Magenta)
Pc
0.167969 0.976563 0.921875 0.066406 k
(R=193 G=39 B=45)
Pc
0.003906 0.988281 0.96875 0 k
(R=237 G=28 B=36)
Pc
0 0.792969 0.964844 0 k
(R=241 G=90 B=36)
Pc
0 0.5 0.980469 0 k
(R=247 G=147 B=30)
Pc
0 0.347656 0.867188 0 k
(R=251 G=176 B=59)
Pc
0.046875 0 0.929688 0 k
(R=252 G=238 B=33)
Pc
0.1875 0 0.976563 0 k
(R=217 G=224 B=33)
Pc
0.5 0 0.988281 0 k
(R=140 G=198 B=63)
Pc
0.742188 0 0.992188 0 k
(R=57 G=181 B=74)
Pc
0.859375 0.175781 1 0.039063 k
(R=0 G=146 B=69)
Pc
0.898438 0.332031 0.984375 0.257813 k
(R=0 G=104 B=55)
Pc
0.757813 0 0.746094 0 k
(R=34 G=181 B=115)
Pc
0.78125 0.089844 0.457031 0 k
(R=0 G=169 B=157)
Pc
0.695313 0.148438 0 0 k
(R=41 G=171 B=226)
Pc
0.871094 0.523438 0 0 k
(R=0 G=113 B=188)
Pc
0.988281 0.960938 0.035156 0.003906 k
(R=46 G=49 B=146)
Pc
1 1 0.261719 0.246094 k
(R=27 G=20 B=100)
Pc
0.742188 0.980469 0.007813 0.003906 k
(R=102 G=45 B=145)
Pc
0.492188 0.988281 0.011719 0 k
(R=147 G=39 B=143)
Pc
0.347656 1 0.371094 0.109375 k
(R=158 G=0 B=93)
Pc
0.117188 1 0.492188 0.007813 k
(R=212 G=20 B=90)
Pc
0 0.964844 0.203125 0 k
(R=237 G=30 B=121)
Pc
0.226563 0.273438 0.398438 0 k
(R=199 G=178 B=153)
Pc
0.398438 0.425781 0.523438 0.066406 k
(R=153 G=134 B=117)
Pc
0.503906 0.527344 0.605469 0.234375 k
(R=115 G=99 B=87)
Pc
0.574219 0.601563 0.636719 0.417969 k
(R=83 G=71 B=65)
Pc
0.226563 0.382813 0.632813 0.011719 k
(R=198 G=156 B=109)
Pc
0.316406 0.488281 0.738281 0.097656 k
(R=166 G=124 B=82)
Pc
0.359375 0.570313 0.835938 0.226563 k
(R=140 G=98 B=57)
Pc
0.390625 0.636719 0.929688 0.355469 k
(R=117 G=76 B=36)
Pc
0.414063 0.695313 0.964844 0.488281 k
(R=96 G=56 B=19)
Pc
0.476563 0.730469 0.832031 0.679688 k
(R=66 G=33 B=11)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
Bb
2 (Red Linear Gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Red Linear Gradient)
Pc
Bb
2 (Gray Linear Gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Gray Linear Gradient)
Pc
Bb
0 0 0 0 Bh
2 (Purple Radial Gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Purple Radial Gradient)
Pc
(Checked Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Checked Pattern)
Pc
0.007813 0.988281 0.96875 0 k
(R=236 G=28 B=36)
Pc
0.78125 0.089844 0.457031 0 k
(R=0 G=169 B=157)
Pc
0.742188 0.980469 0.007813 0.003906 k
(R=102 G=45 B=145)
Pc
0.484375 0.363281 0.335938 0.015625 k
(R=139 G=146 B=152 1)
Pc
0 g
(K=100)
Pc
0.1 g
(K=90)
Pc
0.2 g
(K=80)
Pc
0.3 g
(K=70)
Pc
0.4 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.6 g
(K=40)
Pc
0.7 g
(K=30)
Pc
0.8 g
(K=20)
Pc
0.9 g
(K=10)
Pc
0.95 g
(K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
u
u
*u
0 O
0 0.91 0.72 0.23 k
0 J 0 j 1 w 4 M []0 d
0 XR
395.6953 284.0488 m
395.6953 280.4766 L
303.8809 280.4766 L
303.8809 284.0488 L
395.6953 284.0488 L
f
*U
U
U
U
*u
0 0 0 1 k
355.2373 313.7598 m
353.9609 314.1348 L
353.8291 314.1807 353.7266 314.2813 353.7266 314.4131 c
353.7266 314.5098 L
353.7266 314.6416 353.8291 314.7383 353.9609 314.7383 c
355.2373 314.7383 L
355.2373 315.8203 L
355.2373 315.9375 355.3281 316.0371 355.4658 316.0605 C
356.3379 316.2051 L
356.4531 316.2246 356.5664 316.1475 356.5664 316.0127 c
356.5664 314.7383 L
357.7559 314.7383 L
357.8887 314.7383 357.9961 314.6299 357.9961 314.4971 c
357.9961 313.9385 L
357.9961 313.8066 357.8887 313.6973 357.7559 313.6973 c
356.5664 313.6973 L
356.5664 309.7119 L
356.5664 309.0801 356.668 308.9961 357.125 308.9961 c
357.7803 308.9961 L
357.9424 308.9961 358.0332 308.9424 358.0332 308.8223 c
358.0332 308.2324 l
358.0332 308.1191 357.9668 308.0469 357.8105 308.0225 c
357.5459 307.9805 357.2578 307.9502 357.0107 307.9502 c
355.7783 307.9502 355.2373 308.2451 355.2373 309.7119 C
355.2373 313.7598 L
f
/BBAccumShear (347.611328 -180.000000) XT
1 D
359.2119 314.7383 m
359.0801 314.7383 358.9766 314.6299 358.9766 314.4971 C
358.9766 314.5508 358.9766 314.4199 v
358.9766 314.2881 359.0664 314.1777 359.2119 314.1348 C
360.418 313.7695 L
360.418 308.2871 L
360.418 308.1543 360.5273 308.041 360.6533 308.041 C
361.501 308.041 l
361.6328 308.041 361.7412 308.1602 361.7412 308.2871 C
361.7412 313.2227 l
362.2939 313.5352 362.7988 313.6914 363.4004 313.6914 c
363.5508 313.6914 363.6465 313.7822 363.6465 313.9141 c
363.6465 314.5938 l
363.6465 314.7324 363.5508 314.8223 363.4004 314.8223 c
362.8887 314.8223 362.3115 314.6973 361.6367 314.2051 C
361.626 314.4971 l
361.6211 314.6299 361.5156 314.7383 361.3828 314.7383 C
359.2119 314.7383 L
f
/BBAccumShear (343.902222 0.000000) XT
352.5352 309.166 m
352.0332 309.1289 351.7119 309.0869 351.0264 309.0869 c
350.2568 309.0869 349.6973 309.5742 349.6973 310.8721 C
349.6973 311.9004 l
349.6973 313.2051 350.2637 313.6855 351.0264 313.6855 c
351.7119 313.6855 352.0322 313.6289 352.541 313.6045 C
352.582 313.6025 L
352.6973 313.5977 352.8008 313.6621 352.8008 313.7822 C
352.8008 314.3887 l
352.8008 314.5693 352.752 314.6357 352.5537 314.6777 c
352.2168 314.75 351.6699 314.8223 351.0264 314.8223 c
349.4219 314.8223 348.375 313.7637 348.375 311.9004 C
348.375 310.8721 l
348.375 309.0088 349.4277 307.9502 351.0264 307.9502 c
351.6758 307.9502 352.2168 308.0225 352.5537 308.0947 c
352.752 308.1367 352.8008 308.209 352.8008 308.3828 c
352.8008 308.9902 l
352.8008 309.1113 352.6914 309.1768 352.5771 309.168 C
352.5352 309.166 L
f
0 D
408.3994 312.459 m
408.3994 311.7979 408.0918 311.3711 406.9443 311.3711 c
405.6934 311.3711 405.4834 311.9727 405.4834 312.459 C
405.4834 312.5557 l
405.4834 313.1748 405.7598 313.71 406.9443 313.71 c
408.1113 313.71 408.3994 313.2051 408.3994 312.5557 c
408.3994 312.459 L
f
1 D
409.2393 313.7832 m
410.1387 314.0508 L
410.2852 314.0938 410.374 314.2031 410.374 314.335 c
410.374 314.4668 410.374 314.4971 Y
410.374 314.6299 410.2715 314.7383 410.1387 314.7383 C
406.9443 314.7383 L
404.8701 314.7383 404.1787 313.7031 404.1787 312.5674 C
404.1787 312.4775 l
404.1787 311.8701 404.335 311.4375 404.7012 311.0762 C
404.3711 310.8662 404.2148 310.5059 404.2148 310.1563 C
404.2148 310.1445 l
404.2148 309.7422 404.4023 309.3154 404.8037 309.1055 C
404.4131 308.7793 404.1182 308.2637 404.1182 307.6797 C
404.1182 307.5723 l
404.1182 306.3516 405.0684 305.6172 406.9922 305.6172 c
409 305.6172 409.8359 306.3027 409.8359 307.4932 C
409.8359 307.584 l
409.8359 308.792 408.7422 309.0869 407.335 309.4297 C
405.7305 309.8262 l
405.4531 309.8926 405.3398 309.9941 405.3398 310.2168 c
405.3398 310.3613 405.417 310.4814 405.5918 310.5781 C
405.8857 310.457 406.3066 310.3555 406.9443 310.3555 c
408.7773 310.3555 409.7031 311.0645 409.7031 312.4775 C
409.7031 312.5674 l
409.7031 313.0762 409.5488 313.4785 409.2393 313.7832 C
f
/BBAccumShear (341.902222 0.000000) XT
0 D
408.5137 307.4932 m
408.5137 306.9473 408.2549 306.6279 406.9922 306.6279 c
405.7598 306.6279 405.4111 306.9883 405.4111 307.5723 C
405.4111 307.6797 l
405.4111 308.209 405.5918 308.4375 405.8564 308.7139 C
407.0703 308.4141 l
408.2422 308.125 408.5137 307.9512 408.5137 307.584 c
408.5137 307.4932 L
f
458.501 312.459 m
458.501 311.7979 458.1934 311.3711 457.0459 311.3711 c
455.7949 311.3711 455.585 311.9727 455.585 312.459 C
455.585 312.5557 l
455.585 313.1748 455.8613 313.71 457.0459 313.71 c
458.2119 313.71 458.501 313.2051 458.501 312.5557 c
458.501 312.459 L
f
1 D
459.3408 313.7832 m
460.2402 314.0508 L
460.3867 314.0938 460.4756 314.2031 460.4756 314.335 c
460.4756 314.4668 460.4756 314.4971 Y
460.4756 314.6299 460.373 314.7383 460.2402 314.7383 C
457.0459 314.7383 L
454.9717 314.7383 454.2803 313.7031 454.2803 312.5674 C
454.2803 312.4775 l
454.2803 311.8701 454.4365 311.4375 454.8027 311.0762 C
454.4727 310.8662 454.3164 310.5059 454.3164 310.1563 C
454.3164 310.1445 l
454.3164 309.7422 454.5039 309.3154 454.9053 309.1055 C
454.5146 308.7793 454.2207 308.2637 454.2207 307.6797 C
454.2207 307.5723 l
454.2207 306.3516 455.1699 305.6172 457.0938 305.6172 c
459.1016 305.6172 459.9375 306.3027 459.9375 307.4932 C
459.9375 307.584 l
459.9375 308.792 458.8438 309.0869 457.4365 309.4297 C
455.832 309.8262 l
455.5547 309.8926 455.4404 309.9941 455.4404 310.2168 c
455.4404 310.3613 455.5186 310.4814 455.6934 310.5781 C
455.9873 310.457 456.4082 310.3555 457.0459 310.3555 c
458.8789 310.3555 459.8047 311.0645 459.8047 312.4775 C
459.8047 312.5674 l
459.8047 313.0762 459.6504 313.4785 459.3408 313.7832 C
f
/BBAccumShear (341.902222 0.000000) XT
0 D
458.6152 307.4932 m
458.6152 306.9473 458.3564 306.6279 457.0938 306.6279 c
455.8613 306.6279 455.5127 306.9883 455.5127 307.5723 C
455.5127 307.6797 l
455.5127 308.209 455.6934 308.4375 455.957 308.7139 C
457.1719 308.4141 l
458.3438 308.125 458.6152 307.9512 458.6152 307.584 c
458.6152 307.4932 L
f
1 D
394.7305 308.2754 m
394.7305 308.9668 l
394.7305 309.0742 394.6523 309.1582 394.5449 309.1582 C
392.1582 309.1582 l
391.1719 309.1582 390.9434 309.4473 390.9434 310.3008 C
390.9434 312.0859 L
394.418 312.0859 l
394.5508 312.0859 394.6582 312.1953 394.6582 312.3271 C
394.6582 312.9883 l
394.6582 313.1211 394.5508 313.2285 394.418 313.2285 C
390.9434 313.2285 L
390.9434 314.7139 l
390.9434 315.5674 391.1719 315.8555 392.1582 315.8555 C
394.5449 315.8555 l
394.6523 315.8555 394.7305 315.9404 394.7305 316.0488 C
394.7305 316.7344 l
394.7305 316.8535 394.6777 316.9277 394.5508 316.9443 c
394.1064 317.0029 393.3066 317.0645 392.2363 317.0645 c
391.3076 317.0645 390.5791 316.9414 390.0996 316.4551 c
389.7227 316.0732 389.5664 315.5264 389.5664 314.7139 C
389.5664 310.3008 l
389.5664 309.499 389.7178 308.957 390.085 308.5742 c
390.5635 308.0781 391.2988 307.9512 392.2363 307.9512 c
393.3066 307.9512 394.1309 308.0078 394.5508 308.0645 c
394.6777 308.082 394.7305 308.1543 394.7305 308.2754 c
f
413.7715 315.958 m
413.7715 316.9688 l
413.7715 317.1006 413.6631 317.209 413.5313 317.209 C
412.6406 317.209 l
412.5078 317.209 412.3945 317.1006 412.3945 316.9688 C
412.3945 315.958 l
412.3945 315.8262 412.5078 315.7178 412.6406 315.7178 C
413.5313 315.7178 l
413.6631 315.7178 413.7715 315.8262 413.7715 315.958 c
f
412.418 308.2871 m
412.418 308.1543 412.5264 308.041 412.6582 308.041 C
413.5 308.041 l
413.6328 308.041 413.7412 308.1543 413.7412 308.2871 c
413.7412 314.498 l
413.7412 314.6299 413.6328 314.7383 413.5 314.7383 C
411.1631 314.7383 l
411.0303 314.7383 410.9277 314.6299 410.9277 314.4971 C
410.9277 314.5508 410.9277 314.4199 v
410.9277 314.2881 411.0166 314.1777 411.1631 314.1357 C
412.418 313.7695 L
412.418 308.2871 L
f
/BBAccumShear (341.902222 0.000000) XT
397.1689 308.2871 m
397.1689 308.1543 397.2773 308.041 397.4033 308.041 C
398.252 308.041 l
398.3838 308.041 398.4922 308.1602 398.4922 308.2871 C
398.4922 313.2412 l
399.0215 313.5117 399.5254 313.6914 399.9824 313.6914 c
400.9023 313.6914 401.1553 313.3555 401.1553 312.2246 C
401.1553 308.2871 l
401.1553 308.1543 401.2637 308.041 401.3965 308.041 C
402.2373 308.041 l
402.3691 308.041 402.4775 308.1543 402.4775 308.2871 c
402.4775 312.3672 l
402.4775 313.7021 402.0166 314.8223 400.3916 314.8223 c
399.6406 314.8223 399.1367 314.668 398.4053 314.2168 C
398.3955 314.498 l
398.3906 314.6299 398.2852 314.7383 398.1523 314.7383 C
395.9199 314.7383 l
395.7871 314.7383 395.6855 314.6299 395.6855 314.4971 C
395.6855 314.5508 395.6855 314.4199 v
395.6855 314.2881 395.7734 314.1777 395.9199 314.1357 C
397.1689 313.7695 L
397.1689 308.2871 L
f
/BBAccumShear (343.902222 0.000000) XT
444.6875 315.958 m
444.6875 316.9688 l
444.6875 317.1006 444.5801 317.209 444.4473 317.209 C
443.5566 317.209 l
443.4248 317.209 443.3105 317.1006 443.3105 316.9688 C
443.3105 315.958 l
443.3105 315.8262 443.4248 315.7178 443.5566 315.7178 C
444.4473 315.7178 l
444.5801 315.7178 444.6875 315.8262 444.6875 315.958 c
f
443.335 308.2871 m
443.335 308.1543 443.4434 308.041 443.5752 308.041 C
444.417 308.041 l
444.5488 308.041 444.6572 308.1543 444.6572 308.2871 c
444.6572 314.498 l
444.6572 314.6299 444.5488 314.7383 444.417 314.7383 C
442.0791 314.7383 l
441.9473 314.7383 441.8438 314.6299 441.8438 314.4971 C
441.8438 314.5508 441.8438 314.4199 v
441.8438 314.2881 441.9336 314.1777 442.0791 314.1357 C
443.335 313.7695 L
443.335 308.2871 L
f
/BBAccumShear (341.902222 0.000000) XT
447.2559 308.2871 m
447.2559 308.1543 447.3643 308.041 447.4902 308.041 C
448.3379 308.041 l
448.4707 308.041 448.5781 308.1602 448.5781 308.2871 C
448.5781 313.2412 l
449.1074 313.5117 449.6123 313.6914 450.0693 313.6914 c
450.9893 313.6914 451.2422 313.3555 451.2422 312.2246 C
451.2422 308.2871 l
451.2422 308.1543 451.3506 308.041 451.4824 308.041 C
452.3242 308.041 l
452.457 308.041 452.5645 308.1543 452.5645 308.2871 c
452.5645 312.3672 l
452.5645 313.7021 452.1035 314.8223 450.4785 314.8223 c
449.7266 314.8223 449.2227 314.668 448.4922 314.2168 C
448.4824 314.498 l
448.4775 314.6299 448.3711 314.7383 448.2393 314.7383 C
446.0059 314.7383 l
445.874 314.7383 445.7715 314.6299 445.7715 314.4971 C
445.7715 314.5508 445.7715 314.4199 v
445.7715 314.2881 445.8604 314.1777 446.0059 314.1357 C
447.2559 313.7695 L
447.2559 308.2871 L
f
/BBAccumShear (343.902222 0.000000) XT
0 D
427.4785 311.9121 m
424.6113 311.9121 L
424.6113 311.9912 l
424.6113 313.127 425.1699 313.6914 426.0605 313.6914 c
426.9619 313.6914 427.4785 313.1514 427.4785 311.9912 c
427.4785 311.9121 L
f
1 D
428.3281 309.2178 m
427.7871 309.1738 426.9502 309.0986 426.1621 309.0986 c
425.0322 309.0986 424.6055 309.7783 424.6055 310.8418 C
424.6055 310.9443 L
428.5791 310.9443 l
428.7354 310.9443 428.8145 311.0527 428.8145 311.2266 c
428.8145 311.6045 l
428.8145 313.3535 428.167 314.8223 426.0605 314.8223 c
423.9785 314.8223 423.2832 313.4023 423.2832 311.6045 C
423.2832 311.1865 l
423.2832 308.8838 424.4316 307.9512 426.1016 307.9512 c
427.0469 307.9512 427.6104 308.0215 428.3447 308.1543 c
428.5488 308.1914 428.5908 308.2754 428.5908 308.4492 C
428.5908 309.0508 l
428.5908 309.1709 428.4834 309.2305 428.375 309.2217 C
428.3281 309.2178 L
f
/BBAccumRotation (0.080112) XT
436.752 314.7383 m
436.6191 314.7383 436.5176 314.6299 436.5176 314.4971 C
436.5176 314.5508 436.5176 314.4199 v
436.5176 314.2881 436.6055 314.1777 436.752 314.1357 C
437.959 313.7695 L
437.959 308.2871 L
437.959 308.1543 438.0664 308.041 438.1934 308.041 C
439.041 308.041 l
439.1729 308.041 439.2813 308.1602 439.2813 308.2871 C
439.2813 313.2227 l
439.834 313.5352 440.3398 313.6914 440.9404 313.6914 c
441.0908 313.6914 441.1875 313.7822 441.1875 313.9141 c
441.1875 314.5938 l
441.1875 314.7324 441.0908 314.8223 440.9404 314.8223 c
440.4297 314.8223 439.8516 314.6973 439.1768 314.2051 C
439.166 314.498 l
439.1621 314.6299 439.0557 314.7383 438.9238 314.7383 C
436.752 314.7383 L
f
/BBAccumShear (343.902222 0.000000) XT
0 D
434.4434 311.9121 m
431.5762 311.9121 L
431.5762 311.9912 l
431.5762 313.127 432.1348 313.6914 433.0244 313.6914 c
433.9258 313.6914 434.4434 313.1514 434.4434 311.9912 c
434.4434 311.9121 L
f
1 D
435.292 309.2178 m
434.751 309.1738 433.9141 309.0986 433.127 309.0986 c
431.9961 309.0986 431.5693 309.7783 431.5693 310.8418 C
431.5693 310.9443 L
435.543 310.9443 l
435.6992 310.9443 435.7773 311.0527 435.7773 311.2266 c
435.7773 311.6045 l
435.7773 313.3535 435.1309 314.8223 433.0244 314.8223 c
430.9414 314.8223 430.2461 313.4023 430.2461 311.6045 C
430.2461 311.1865 l
430.2461 308.8838 431.3955 307.9512 433.0664 307.9512 c
434.0098 307.9512 434.5742 308.0215 435.3086 308.1543 c
435.5137 308.1914 435.5547 308.2754 435.5547 308.4492 C
435.5547 309.0508 l
435.5547 309.1709 435.4473 309.2305 435.3398 309.2217 C
435.292 309.2178 L
f
/BBAccumRotation (0.080112) XT
416.3398 308.2871 m
416.3398 308.1543 416.4473 308.041 416.5742 308.041 C
417.4219 308.041 l
417.5537 308.041 417.6621 308.1602 417.6621 308.2871 C
417.6621 313.2412 l
418.1914 313.5117 418.6963 313.6914 419.1533 313.6914 c
420.0732 313.6914 420.3252 313.3555 420.3252 312.2246 C
420.3252 308.2871 l
420.3252 308.1543 420.4336 308.041 420.5664 308.041 C
421.4082 308.041 l
421.54 308.041 421.6484 308.1543 421.6484 308.2871 c
421.6484 312.3672 l
421.6484 313.7021 421.1875 314.8223 419.5625 314.8223 c
418.8105 314.8223 418.3066 314.668 417.5762 314.2168 C
417.5654 314.498 l
417.5605 314.6299 417.4551 314.7383 417.3223 314.7383 C
415.0898 314.7383 l
414.957 314.7383 414.8555 314.6299 414.8555 314.4971 C
414.8555 314.5508 414.8555 314.4199 v
414.8555 314.2881 414.9443 314.1777 415.0898 314.1357 C
416.3398 313.7695 L
416.3398 308.2871 L
f
/BBAccumShear (343.902222 0.000000) XT
335.7314 308.2754 m
335.7314 308.9668 l
335.7314 309.0742 335.6533 309.1582 335.5449 309.1582 C
333.1582 309.1582 l
332.1719 309.1582 331.9443 309.4473 331.9443 310.3008 C
331.9443 312.0859 L
335.4189 312.0859 l
335.5508 312.0859 335.6592 312.1953 335.6592 312.3271 C
335.6592 312.9883 l
335.6592 313.1211 335.5508 313.2285 335.4189 313.2285 C
331.9443 313.2285 L
331.9443 314.7139 l
331.9443 315.5674 332.1719 315.8555 333.1582 315.8555 C
335.5449 315.8555 l
335.6533 315.8555 335.7314 315.9404 335.7314 316.0488 C
335.7314 316.7344 l
335.7314 316.8535 335.6777 316.9277 335.5508 316.9443 c
335.1074 317.0029 334.3066 317.0645 333.2363 317.0645 c
332.3086 317.0645 331.5801 316.9414 331.0996 316.4551 c
330.7246 316.0732 330.5674 315.5264 330.5674 314.7139 C
330.5674 310.3008 l
330.5674 309.499 330.7188 308.957 331.0859 308.5742 c
331.5645 308.0781 332.2988 307.9502 333.2363 307.9502 c
334.3066 307.9502 335.1309 308.0078 335.5508 308.0645 c
335.6777 308.082 335.7314 308.1543 335.7314 308.2754 c
f
338.1787 308.2871 m
338.1787 308.1543 338.2813 308.041 338.4082 308.041 C
339.2793 308.041 l
339.4121 308.041 339.502 308.1602 339.502 308.2871 c
339.502 316.9023 l
339.502 317.0342 339.4053 317.1367 339.2793 317.1367 C
336.9414 317.1367 l
336.8086 317.1367 336.707 317.0283 336.707 316.8965 C
336.707 316.9502 336.707 316.8184 v
336.707 316.6875 336.7949 316.5771 336.9414 316.5342 C
338.1787 316.168 L
338.1787 308.2871 L
f
/BBAccumShear (341.902222 0.000000) XT
0 D
345.5039 311.9121 m
342.6367 311.9121 L
342.6367 311.9912 l
342.6367 313.127 343.1953 313.6914 344.085 313.6914 c
344.9863 313.6914 345.5039 313.1514 345.5039 311.9912 c
345.5039 311.9121 L
f
1 D
346.3525 309.2178 m
345.8115 309.1738 344.9746 309.0986 344.1875 309.0986 c
343.0566 309.0986 342.6299 309.7783 342.6299 310.8418 C
342.6299 310.9443 L
346.6035 310.9443 l
346.7598 310.9443 346.8389 311.0527 346.8389 311.2266 c
346.8389 311.6035 l
346.8389 313.3535 346.1914 314.8223 344.085 314.8223 c
342.0029 314.8223 341.3076 313.4023 341.3076 311.6035 C
341.3076 311.1865 l
341.3076 308.8838 342.4561 307.9502 344.127 307.9502 c
345.0713 307.9502 345.6348 308.0215 346.3691 308.1543 c
346.5742 308.1914 346.6162 308.2754 346.6162 308.4492 C
346.6162 309.0508 l
346.6162 309.1709 346.5078 309.2305 346.4004 309.2217 C
346.3525 309.2178 L
f
/BBAccumRotation (0.080112) XT
0 D
378.4453 309.4238 m
377.9824 309.1709 377.5127 309.0146 377.0205 309.0146 c
376.3711 309.0146 376.0342 309.207 376.0342 309.9346 C
376.0342 310.0303 l
376.0342 310.7939 376.3467 311.1309 377.6211 311.1309 C
378.4453 311.1309 l
378.4453 309.4238 L
f
1 D
379.7676 309 m
379.7676 312.5439 L
379.7676 314.0225 378.9619 314.8223 377.2725 314.8223 c
376.4492 314.8223 375.8242 314.7383 375.3369 314.6484 c
375.1738 314.6172 375.0957 314.5391 375.0957 314.4072 C
375.0957 313.8125 l
375.0957 313.6504 375.2051 313.6064 375.3193 313.6152 C
375.3789 313.6191 L
375.8203 313.6504 376.4971 313.71 377.2725 313.71 c
378.0957 313.71 378.4453 313.4395 378.4453 312.5439 C
378.4453 312.0391 L
377.6211 312.0391 l
375.5049 312.0391 374.7051 311.3594 374.7051 310.0244 C
374.7051 309.9277 l
374.7051 308.3652 375.7148 307.9512 376.7256 307.9512 c
377.3506 307.9512 378.0146 308.2061 378.5557 308.5488 C
378.5645 308.2813 l
378.5703 308.1484 378.6816 308.041 378.8145 308.041 C
380.8467 308.041 l
380.9785 308.041 381.0879 308.1484 381.0879 308.2813 c
381.0879 308.209 381.0879 308.3398 v
381.0879 308.4785 380.9814 308.6084 380.8467 308.6523 C
379.7676 309 L
f
/BBAccumRotation (0.026797) XT
/BBAccumShear (343.902222 0.000000) XT
373.1484 309.166 m
372.6465 309.1289 372.3252 309.0869 371.6406 309.0869 c
370.8711 309.0869 370.3105 309.5742 370.3105 310.873 C
370.3105 311.9004 l
370.3105 313.2051 370.877 313.6855 371.6406 313.6855 c
372.3252 313.6855 372.6465 313.6289 373.1543 313.6045 C
373.1953 313.6025 L
373.3105 313.5977 373.4141 313.6621 373.4141 313.7822 C
373.4141 314.3887 l
373.4141 314.5693 373.3652 314.6357 373.167 314.6777 c
372.8301 314.75 372.2832 314.8223 371.6406 314.8223 c
370.0352 314.8223 368.9883 313.7637 368.9883 311.9004 C
368.9883 310.873 l
368.9883 309.0088 370.041 307.9512 371.6406 307.9512 c
372.2891 307.9512 372.8301 308.0225 373.167 308.0947 c
373.3652 308.1367 373.4141 308.209 373.4141 308.3828 c
373.4141 308.9902 l
373.4141 309.1113 373.3047 309.1768 373.1914 309.168 C
373.1484 309.166 L
f
382.2188 308.2871 m
382.2188 308.1543 382.3203 308.041 382.4473 308.041 C
383.3184 308.041 l
383.4512 308.041 383.541 308.1602 383.541 308.2871 c
383.541 316.9023 l
383.541 317.0352 383.4453 317.1367 383.3184 317.1367 C
380.9805 317.1367 l
380.8486 317.1367 380.7461 317.0283 380.7461 316.8965 C
380.7461 316.9502 380.7461 316.8184 v
380.7461 316.6875 380.835 316.5771 380.9805 316.5342 C
382.2188 316.168 L
382.2188 308.2871 L
f
/BBAccumShear (341.902222 0.000000) XT
367.1328 315.958 m
367.1328 316.9688 l
367.1328 317.1006 367.0254 317.209 366.8926 317.209 C
366.0029 317.209 l
365.8711 317.209 365.7568 317.1006 365.7568 316.9688 C
365.7568 315.958 l
365.7568 315.8262 365.8711 315.7178 366.0029 315.7178 C
366.8926 315.7178 l
367.0254 315.7178 367.1328 315.8262 367.1328 315.958 c
f
365.7871 308.2871 m
365.7871 308.1543 365.8945 308.041 366.0273 308.041 C
366.8682 308.041 l
367.001 308.041 367.1094 308.1543 367.1094 308.2871 c
367.1094 314.498 l
367.1094 314.6299 367.001 314.7383 366.8682 314.7383 C
364.5313 314.7383 l
364.3984 314.7383 364.2959 314.6299 364.2959 314.4971 C
364.2959 314.5508 364.2959 314.4199 v
364.2959 314.2881 364.3848 314.1777 364.5313 314.1357 C
365.7871 313.7695 L
365.7871 308.2871 L
f
/BBAccumShear (341.902222 0.000000) XT
0 D
316.9395 315.8086 m
314.7148 315.8086 L
314.7148 308.2813 L
314.7148 308.1553 314.6191 308.041 314.4863 308.041 c
313.5605 308.041 L
313.4336 308.041 313.332 308.1484 313.332 308.2813 c
313.332 315.8086 L
311.1074 315.8086 L
310.9756 315.8086 310.8672 315.8809 310.8672 316.0127 c
310.8672 316.752 L
310.8672 316.8789 310.9756 316.9746 311.1074 316.9746 c
316.9395 316.9746 L
317.0713 316.9746 317.1738 316.8848 317.1738 316.752 c
317.1738 316.0127 l
317.1738 315.8867 317.0713 315.8086 316.9395 315.8086 c
f
321.498 307.9512 m
319.5566 307.9512 318.3057 308.8887 318.3057 311.3174 c
318.3057 316.7461 L
318.3057 316.873 318.4082 316.9746 318.541 316.9746 c
319.46 316.9746 L
319.5859 316.9746 319.6953 316.8789 319.6953 316.7461 c
319.6953 311.3174 L
319.6953 309.8564 320.1035 309.1113 321.498 309.1113 c
322.8926 309.1113 323.3018 309.8506 323.3018 311.3174 c
323.3018 316.7461 L
323.3018 316.873 323.4043 316.9746 323.5361 316.9746 c
324.4561 316.9746 L
324.582 316.9746 324.6904 316.8789 324.6904 316.7461 c
324.6904 311.3174 l
324.6904 308.8887 323.4395 307.9512 321.498 307.9512 c
f
1 D
308.7754 313.0146 m
308.7754 314.1738 308.6221 314.8906 308.1074 315.3682 c
307.6895 315.7549 307.1055 315.8926 306.4424 315.8926 c
305.9375 315.8926 305.5947 315.875 305.2705 315.8564 c
305.2705 309.1523 L
305.5889 309.1348 305.9375 309.123 306.4424 309.123 c
307.1328 309.123 307.7363 309.2734 308.1582 309.6992 C
308.6426 310.1885 308.7754 310.877 308.7754 312.001 C
308.7754 313.0146 l
f
0 D
309.2119 308.8652 m
308.5732 308.2363 307.6113 307.9512 306.4424 307.9512 c
305.5586 307.9512 304.5195 308.0234 304.1641 308.083 c
303.9844 308.1133 303.8809 308.209 303.8809 308.4199 c
303.8809 316.5957 L
303.8809 316.8008 303.9844 316.9023 304.1641 316.9326 c
304.5195 316.9922 305.5586 317.0645 306.4424 317.0645 c
307.5996 317.0645 308.5557 316.7891 309.1934 316.1719 c
309.9531 315.4395 310.1523 314.4326 310.1523 313.0713 c
310.1523 311.9443 l
310.1523 310.5977 309.96 309.6035 309.2119 308.8652 c
f
*U
*u
0 0 0 0.56 k
388.9951 294.2734 m
388.5381 294.2256 387.3594 294.2129 386.6504 294.2129 c
384.9668 294.2129 384.0889 294.8506 384.0889 296.4502 c
384.0889 301.0801 L
384.0889 302.6797 384.9668 303.3164 386.6504 303.3164 c
387.3594 303.3164 388.4902 303.293 388.9951 303.2441 c
389.0674 303.2324 389.1152 303.1484 389.1152 303.0762 c
389.1152 302.4746 L
389.1152 302.3906 389.0674 302.3301 388.9834 302.3301 c
386.6621 302.3301 L
385.3867 302.3301 385.1836 301.9941 385.1836 301.0801 c
385.1836 299.4082 L
388.875 299.4082 L
389.0068 299.4082 389.1152 299.3008 389.1152 299.168 c
389.1152 298.7109 L
389.1152 298.5781 389.0068 298.4707 388.875 298.4707 c
385.1836 298.4707 L
385.1836 296.4502 L
385.1836 295.5361 385.3867 295.1992 386.6621 295.1992 c
388.9834 295.1992 L
389.0674 295.1992 389.1152 295.1396 389.1152 295.0547 c
389.1152 294.4414 l
389.1152 294.3691 389.0674 294.2852 388.9951 294.2734 c
f
391.5566 294.2969 m
390.9316 294.2969 L
390.8105 294.2969 390.7148 294.4063 390.7148 294.5381 c
390.7148 303.1123 L
390.7148 303.2324 390.7988 303.3408 390.9316 303.3408 c
391.5566 303.3408 L
391.6768 303.3408 391.7734 303.2441 391.7734 303.1123 c
391.7734 294.5381 l
391.7734 294.418 391.6885 294.2969 391.5566 294.2969 c
f
398.3984 297.2676 m
394.3701 297.2676 L
394.3701 297.0996 L
394.3701 295.668 394.9355 295.1396 396.042 295.1396 c
396.7393 295.1396 397.6289 295.1875 398.1816 295.2715 c
398.2061 295.2715 398.2188 295.2715 398.2422 295.2715 c
398.3389 295.2715 398.4346 295.2236 398.4346 295.1035 c
398.4346 294.6943 L
398.4346 294.5381 398.3867 294.4541 398.1943 294.418 c
397.5088 294.2852 396.8477 294.2129 396.042 294.2129 c
394.6592 294.2129 393.3125 294.8633 393.3125 297.0996 c
393.3125 298.1816 L
393.3125 299.9014 394.2617 300.9961 395.9814 300.9961 c
397.7373 300.9961 398.627 299.8896 398.627 298.1816 c
398.627 297.5322 l
398.627 297.376 398.543 297.2676 398.3984 297.2676 c
f
1 D
397.5566 298.1816 m
397.5566 299.541 397.04 300.0703 395.9814 300.0703 c
394.9473 300.0703 394.3701 299.4805 394.3701 298.1816 c
394.3701 298.0742 L
397.5566 298.0742 L
397.5566 298.1816 l
f
0 D
403.918 294.3457 m
403.5215 294.2734 402.9805 294.2129 402.415 294.2129 c
400.7793 294.2129 399.8535 295.3672 399.8535 297.1357 c
399.8535 298.0742 L
399.8535 299.8418 400.7676 300.9961 402.415 300.9961 c
402.9688 300.9961 403.5215 300.9355 403.918 300.8633 c
404.1113 300.8281 404.1592 300.7676 404.1592 300.5986 c
404.1592 300.166 L
404.1592 300.0459 404.0625 299.9854 403.9551 299.9854 c
403.9307 299.9854 403.918 299.9854 403.9063 299.9854 c
403.377 300.0459 403.0039 300.0703 402.415 300.0703 c
401.4531 300.0703 400.9121 299.4326 400.9121 298.0742 c
400.9121 297.1357 L
400.9121 295.7891 401.4414 295.1396 402.415 295.1396 c
403.0039 295.1396 403.377 295.1641 403.9063 295.2236 c
403.918 295.2236 403.9307 295.2236 403.9551 295.2236 c
404.0625 295.2236 404.1592 295.1641 404.1592 295.043 c
404.1592 294.6104 l
404.1592 294.4541 404.1113 294.3818 403.918 294.3457 c
f
408.7148 294.2734 m
408.4746 294.2373 408.1621 294.2129 407.9336 294.2129 c
406.8271 294.2129 406.2988 294.502 406.2988 295.8242 c
406.2988 300.0215 L
405.1318 300.1543 L
404.999 300.166 404.9033 300.2383 404.9033 300.3711 c
404.9033 300.6953 L
404.9033 300.8281 404.999 300.9121 405.1318 300.9121 c
406.2988 300.9121 L
406.2988 302.0898 L
406.2988 302.2109 406.3818 302.3066 406.5146 302.3301 c
407.1396 302.4268 L
407.1523 302.4268 407.1641 302.4268 407.1758 302.4268 c
407.2725 302.4268 407.3564 302.3428 407.3564 302.2227 c
407.3564 300.9121 L
408.6553 300.9121 L
408.7871 300.9121 408.8955 300.8027 408.8955 300.6709 c
408.8955 300.2617 L
408.8955 300.1299 408.7871 300.0215 408.6553 300.0215 c
407.3564 300.0215 L
407.3564 295.8242 L
407.3564 295.1641 407.5254 295.0674 408.0059 295.0674 c
408.6797 295.0674 L
408.8477 295.0674 408.9316 295.0195 408.9316 294.8984 c
408.9316 294.4785 l
408.9316 294.3691 408.8711 294.2969 408.7148 294.2734 c
f
412.8535 300.082 m
412.2998 300.082 411.7949 299.9375 411.1934 299.5762 c
411.1934 294.5381 L
411.1934 294.418 411.0859 294.2969 410.9531 294.2969 c
410.3633 294.2969 L
410.2441 294.2969 410.1348 294.4063 410.1348 294.5381 c
410.1348 300.6709 L
410.1348 300.8027 410.2314 300.9121 410.3633 300.9121 c
410.9297 300.9121 L
411.0615 300.9121 411.1582 300.8027 411.1582 300.6709 c
411.1582 300.418 L
411.7588 300.8398 412.3125 300.9961 412.8535 300.9961 c
413.0215 300.9961 413.1055 300.9238 413.1055 300.7793 c
413.1055 300.2861 l
413.1055 300.1543 413.0215 300.082 412.8535 300.082 c
f
415.2227 301.9697 m
414.6094 301.9697 L
414.4766 301.9697 414.3682 302.0781 414.3682 302.2109 c
414.3682 303.1719 L
414.3682 303.3047 414.4766 303.4131 414.6094 303.4131 c
415.2227 303.4131 L
415.3545 303.4131 415.4629 303.3047 415.4629 303.1719 c
415.4629 302.2109 l
415.4629 302.0781 415.3545 301.9697 415.2227 301.9697 c
f
415.1982 294.2969 m
414.6211 294.2969 L
414.4883 294.2969 414.3809 294.4063 414.3809 294.5381 c
414.3809 300.6709 L
414.3809 300.8027 414.4883 300.9121 414.6211 300.9121 c
415.1982 300.9121 L
415.3301 300.9121 415.4385 300.8027 415.4385 300.6709 c
415.4385 294.5381 l
415.4385 294.4063 415.3301 294.2969 415.1982 294.2969 c
f
421.0664 294.3457 m
420.6699 294.2734 420.1289 294.2129 419.5625 294.2129 c
417.9277 294.2129 417.002 295.3672 417.002 297.1357 c
417.002 298.0742 L
417.002 299.8418 417.916 300.9961 419.5625 300.9961 c
420.1162 300.9961 420.6699 300.9355 421.0664 300.8633 c
421.2588 300.8281 421.3066 300.7676 421.3066 300.5986 c
421.3066 300.166 L
421.3066 300.0459 421.2109 299.9854 421.1025 299.9854 c
421.0781 299.9854 421.0664 299.9854 421.0547 299.9854 c
420.5254 300.0459 420.1523 300.0703 419.5625 300.0703 c
418.6016 300.0703 418.0605 299.4326 418.0605 298.0742 c
418.0605 297.1357 L
418.0605 295.7891 418.5889 295.1396 419.5625 295.1396 c
420.1523 295.1396 420.5254 295.1641 421.0547 295.2236 c
421.0664 295.2236 421.0781 295.2236 421.1025 295.2236 c
421.2109 295.2236 421.3066 295.1641 421.3066 295.043 c
421.3066 294.6104 l
421.3066 294.4541 421.2588 294.3818 421.0664 294.3457 c
f
426.877 294.2969 m
426.3242 294.2969 L
426.1914 294.2969 426.083 294.4063 426.083 294.5381 c
426.083 294.8027 L
425.5059 294.4658 424.9043 294.2129 424.2314 294.2129 c
423.209 294.2129 422.2715 294.6582 422.2715 296.1621 c
422.2715 296.3057 L
422.2715 297.6045 423.0283 298.2539 425.1689 298.2539 c
426.0586 298.2539 L
426.0586 298.7344 L
426.0586 299.7451 425.7109 300.0938 424.7725 300.0938 c
423.9902 300.0938 423.4131 300.0459 422.9326 299.998 c
422.9082 299.998 422.8965 299.998 422.8721 299.998 c
422.7637 299.998 422.6563 300.0332 422.6563 300.1895 c
422.6563 300.6113 L
422.6563 300.7432 422.7402 300.8154 422.9082 300.8398 c
423.4014 300.9238 423.9551 300.9961 424.7725 300.9961 c
426.4434 300.9961 427.1172 300.1543 427.1172 298.7344 c
427.1172 294.5381 l
427.1172 294.4063 427.0088 294.2969 426.877 294.2969 c
f
1 D
426.0586 297.4961 m
425.1689 297.4961 L
423.7139 297.4961 423.3291 297.1719 423.3291 296.3184 c
423.3291 296.1738 L
423.3291 295.3076 423.7383 295.0791 424.4355 295.0791 c
424.9883 295.0791 425.4814 295.248 426.0586 295.5605 C
426.0586 297.4961 l
f
0 D
429.7148 294.2969 m
429.0898 294.2969 L
428.9697 294.2969 428.873 294.4063 428.873 294.5381 c
428.873 303.1123 L
428.873 303.2324 428.957 303.3408 429.0898 303.3408 c
429.7148 303.3408 L
429.835 303.3408 429.9316 303.2441 429.9316 303.1123 c
429.9316 294.5381 l
429.9316 294.418 429.8477 294.2969 429.7148 294.2969 c
f
440.0527 294.2734 m
439.5967 294.2256 438.418 294.2129 437.709 294.2129 c
436.0254 294.2129 435.1475 294.8506 435.1475 296.4502 c
435.1475 301.0801 L
435.1475 302.6797 436.0254 303.3164 437.709 303.3164 c
438.418 303.3164 439.5488 303.293 440.0527 303.2441 c
440.125 303.2324 440.1738 303.1484 440.1738 303.0762 c
440.1738 302.4746 L
440.1738 302.3906 440.125 302.3301 440.041 302.3301 c
437.7207 302.3301 L
436.4453 302.3301 436.2412 301.9941 436.2412 301.0801 c
436.2412 299.4082 L
439.9336 299.4082 L
440.0654 299.4082 440.1738 299.2998 440.1738 299.168 c
440.1738 298.7109 L
440.1738 298.5781 440.0654 298.4707 439.9336 298.4707 c
436.2412 298.4707 L
436.2412 296.4502 L
436.2412 295.5361 436.4453 295.1992 437.7207 295.1992 c
440.041 295.1992 L
440.125 295.1992 440.1738 295.1387 440.1738 295.0547 c
440.1738 294.4414 l
440.1738 294.3691 440.125 294.2852 440.0527 294.2734 c
f
446.4746 294.2969 m
445.8984 294.2969 L
445.7656 294.2969 445.6572 294.4063 445.6572 294.5381 c
445.6572 298.4941 L
445.6572 299.709 445.248 300.082 444.334 300.082 c
443.8291 300.082 443.2637 299.8887 442.7109 299.6123 c
442.7109 294.5381 L
442.7109 294.418 442.6035 294.2969 442.4707 294.2969 c
441.8809 294.2969 L
441.7617 294.2969 441.6523 294.4063 441.6523 294.5381 c
441.6523 300.6709 L
441.6523 300.8027 441.749 300.9111 441.8809 300.9111 c
442.4824 300.9111 L
442.6152 300.9111 442.7109 300.8027 442.7109 300.6709 c
442.7109 300.4424 L
443.373 300.8154 443.9131 300.9961 444.623 300.9961 c
446.0664 300.9961 446.7158 300.0938 446.7158 298.4941 c
446.7158 294.5381 l
446.7158 294.4063 446.6074 294.2969 446.4746 294.2969 c
f
453.6055 300.1055 m
453.1729 300.0215 L
453.3896 299.793 453.582 299.4326 453.582 298.7832 c
453.582 298.6865 L
453.582 297.3643 452.7637 296.6309 450.9121 296.6309 c
450.2754 296.6309 449.8662 296.7266 449.5176 296.8711 c
449.3125 296.7744 449.2168 296.6426 449.2168 296.4619 c
449.2168 296.2578 449.3125 296.1494 449.5898 296.0771 c
451.3809 295.6201 L
452.5596 295.3203 453.6904 294.9824 453.6904 293.8525 c
453.6904 293.7559 L
453.6904 292.6016 452.9209 291.8926 450.9482 291.8926 c
449.0488 291.8926 448.1826 292.626 448.1826 293.8047 c
448.1826 293.9121 L
448.1826 294.5859 448.543 295.1387 448.9395 295.4395 c
448.8555 295.4756 L
448.4707 295.6445 448.3027 296.041 448.3027 296.4141 c
448.3027 296.4258 L
448.3027 296.75 448.459 297.0996 448.7959 297.292 c
448.4229 297.6406 448.2422 298.0742 448.2422 298.6865 c
448.2422 298.7832 L
448.2422 299.8535 448.8438 300.9111 450.9121 300.9111 c
453.5449 300.9111 L
453.6904 300.9111 453.8223 300.791 453.8223 300.6465 c
453.8223 300.334 l
453.8223 300.1777 453.7383 300.1299 453.6055 300.1055 c
f
1 D
452.6318 293.8525 m
452.6318 294.3223 452.2471 294.5137 451.165 294.791 c
449.8057 295.1387 L
449.457 294.8389 449.2168 294.5381 449.2168 293.9121 c
449.2168 293.8047 L
449.2168 293.1309 449.6133 292.71 450.9482 292.71 c
452.3193 292.71 452.6318 293.0947 452.6318 293.7559 C
452.6318 293.8525 l
f
452.5352 298.7832 m
452.5352 299.5039 452.2109 300.0703 450.9121 300.0703 c
449.5654 300.0703 449.2891 299.457 449.2891 298.7832 c
449.2891 298.6865 L
449.2891 298.1582 449.5293 297.46 450.9121 297.46 c
452.2109 297.46 452.5352 297.9648 452.5352 298.6865 C
452.5352 298.7832 l
f
0 D
456.0469 301.9697 m
455.4336 301.9697 L
455.3018 301.9697 455.1934 302.0781 455.1934 302.2109 c
455.1934 303.1719 L
455.1934 303.3047 455.3018 303.4121 455.4336 303.4121 c
456.0469 303.4121 L
456.1797 303.4121 456.2871 303.3047 456.2871 303.1719 c
456.2871 302.2109 l
456.2871 302.0781 456.1797 301.9697 456.0469 301.9697 c
f
456.0234 294.2969 m
455.4453 294.2969 L
455.3135 294.2969 455.2051 294.4063 455.2051 294.5381 c
455.2051 300.6709 L
455.2051 300.8027 455.3135 300.9111 455.4453 300.9111 c
456.0234 300.9111 L
456.1553 300.9111 456.2637 300.8027 456.2637 300.6709 c
456.2637 294.5381 l
456.2637 294.4063 456.1553 294.2969 456.0234 294.2969 c
f
462.8652 294.2969 m
462.2881 294.2969 L
462.1563 294.2969 462.0479 294.4063 462.0479 294.5381 c
462.0479 298.4941 L
462.0479 299.709 461.6387 300.082 460.7246 300.082 c
460.2197 300.082 459.6543 299.8887 459.1016 299.6123 c
459.1016 294.5381 L
459.1016 294.418 458.9932 294.2969 458.8613 294.2969 c
458.2715 294.2969 L
458.1514 294.2969 458.043 294.4063 458.043 294.5381 c
458.043 300.6709 L
458.043 300.8027 458.1387 300.9111 458.2715 300.9111 c
458.873 300.9111 L
459.0049 300.9111 459.1016 300.8027 459.1016 300.6709 c
459.1016 300.4424 L
459.7627 300.8154 460.3047 300.9961 461.0137 300.9961 c
462.457 300.9961 463.1055 300.0938 463.1055 298.4941 c
463.1055 294.5381 l
463.1055 294.4063 462.998 294.2969 462.8652 294.2969 c
f
469.6113 297.2676 m
465.583 297.2676 L
465.583 297.0996 L
465.583 295.668 466.1484 295.1387 467.2539 295.1387 c
467.9521 295.1387 468.8418 295.1875 469.3945 295.2715 c
469.4189 295.2715 469.4316 295.2715 469.4551 295.2715 c
469.5508 295.2715 469.6475 295.2236 469.6475 295.1035 c
469.6475 294.6943 L
469.6475 294.5381 469.5996 294.4541 469.4063 294.418 c
468.7217 294.2852 468.0605 294.2129 467.2539 294.2129 c
465.8711 294.2129 464.5244 294.8623 464.5244 297.0996 c
464.5244 298.1816 L
464.5244 299.9014 465.4746 300.9961 467.1943 300.9961 c
468.9502 300.9961 469.8398 299.8887 469.8398 298.1816 c
469.8398 297.5322 l
469.8398 297.376 469.7559 297.2676 469.6113 297.2676 c
f
1 D
468.7695 298.1816 m
468.7695 299.541 468.2529 300.0703 467.1943 300.0703 c
466.1602 300.0703 465.583 299.4805 465.583 298.1816 c
465.583 298.0742 L
468.7695 298.0742 L
468.7695 298.1816 l
f
0 D
476.1523 297.2676 m
472.125 297.2676 L
472.125 297.0996 L
472.125 295.668 472.6895 295.1387 473.7969 295.1387 c
474.4941 295.1387 475.3838 295.1875 475.9365 295.2715 c
475.9609 295.2715 475.9727 295.2715 475.9961 295.2715 c
476.0938 295.2715 476.1895 295.2236 476.1895 295.1035 c
476.1895 294.6943 L
476.1895 294.5381 476.1416 294.4541 475.9492 294.418 c
475.2637 294.2852 474.6016 294.2129 473.7969 294.2129 c
472.4131 294.2129 471.0664 294.8623 471.0664 297.0996 c
471.0664 298.1816 L
471.0664 299.9014 472.0166 300.9961 473.7363 300.9961 c
475.4922 300.9961 476.3818 299.8887 476.3818 298.1816 c
476.3818 297.5322 l
476.3818 297.376 476.2969 297.2676 476.1523 297.2676 c
f
1 D
475.3115 298.1816 m
475.3115 299.541 474.7949 300.0703 473.7363 300.0703 c
472.7021 300.0703 472.125 299.4805 472.125 298.1816 c
472.125 298.0742 L
475.3115 298.0742 L
475.3115 298.1816 l
f
0 D
480.542 300.082 m
479.9893 300.082 479.4844 299.9375 478.8828 299.5762 c
478.8828 294.5381 L
478.8828 294.418 478.7744 294.2969 478.6426 294.2969 c
478.0527 294.2969 L
477.9326 294.2969 477.8242 294.4063 477.8242 294.5381 c
477.8242 300.6709 L
477.8242 300.8027 477.9209 300.9111 478.0527 300.9111 c
478.6182 300.9111 L
478.75 300.9111 478.8467 300.8027 478.8467 300.6709 c
478.8467 300.418 L
479.4473 300.8398 480.001 300.9961 480.542 300.9961 c
480.7109 300.9961 480.7949 300.9238 480.7949 300.7793 c
480.7949 300.2861 l
480.7949 300.1543 480.7109 300.082 480.542 300.082 c
f
482.9111 301.9697 m
482.2979 301.9697 L
482.166 301.9697 482.0576 302.0781 482.0576 302.2109 c
482.0576 303.1719 L
482.0576 303.3047 482.166 303.4121 482.2979 303.4121 c
482.9111 303.4121 L
483.043 303.4121 483.1523 303.3047 483.1523 303.1719 c
483.1523 302.2109 l
483.1523 302.0781 483.043 301.9697 482.9111 301.9697 c
f
482.8867 294.2969 m
482.3105 294.2969 L
482.1777 294.2969 482.0693 294.4063 482.0693 294.5381 c
482.0693 300.6709 L
482.0693 300.8027 482.1777 300.9111 482.3105 300.9111 c
482.8867 300.9111 L
483.0195 300.9111 483.1279 300.8027 483.1279 300.6709 c
483.1279 294.5381 l
483.1279 294.4063 483.0195 294.2969 482.8867 294.2969 c
f
489.7295 294.2969 m
489.1523 294.2969 L
489.0195 294.2969 488.9121 294.4063 488.9121 294.5381 c
488.9121 298.4941 L
488.9121 299.709 488.5029 300.082 487.5889 300.082 c
487.084 300.082 486.5186 299.8887 485.9658 299.6123 c
485.9658 294.5381 L
485.9658 294.418 485.8574 294.2969 485.7246 294.2969 c
485.1367 294.2969 L
485.0156 294.2969 484.9082 294.4063 484.9082 294.5381 c
484.9082 300.6709 L
484.9082 300.8027 485.0039 300.9111 485.1367 300.9111 c
485.7373 300.9111 L
485.8691 300.9111 485.9658 300.8027 485.9658 300.6709 c
485.9658 300.4424 L
486.627 300.8154 487.168 300.9961 487.8779 300.9961 c
489.3203 300.9961 489.9697 300.0938 489.9697 298.4941 c
489.9697 294.5381 l
489.9697 294.4063 489.8613 294.2969 489.7295 294.2969 c
f
496.8594 300.1055 m
496.4268 300.0215 L
496.6426 299.793 496.8359 299.4326 496.8359 298.7832 c
496.8359 298.6865 L
496.8359 297.3643 496.0176 296.6309 494.166 296.6309 c
493.5293 296.6309 493.1201 296.7266 492.7715 296.8711 c
492.5664 296.7744 492.4707 296.6426 492.4707 296.4619 c
492.4707 296.2578 492.5664 296.1494 492.8438 296.0771 c
494.6348 295.6201 L
495.8135 295.3203 496.9434 294.9824 496.9434 293.8525 c
496.9434 293.7559 L
496.9434 292.6016 496.1738 291.8926 494.2021 291.8926 c
492.3027 291.8926 491.4375 292.626 491.4375 293.8047 c
491.4375 293.9121 L
491.4375 294.5859 491.7969 295.1387 492.1943 295.4395 c
492.1094 295.4756 L
491.7246 295.6445 491.5566 296.041 491.5566 296.4141 c
491.5566 296.4258 L
491.5566 296.75 491.7129 297.0996 492.0498 297.292 c
491.6768 297.6406 491.4961 298.0742 491.4961 298.6865 c
491.4961 298.7832 L
491.4961 299.8535 492.0977 300.9111 494.166 300.9111 c
496.7998 300.9111 L
496.9434 300.9111 497.0762 300.791 497.0762 300.6465 c
497.0762 300.334 l
497.0762 300.1777 496.9922 300.1299 496.8594 300.1055 c
f
1 D
495.8857 293.8525 m
495.8857 294.3223 495.501 294.5137 494.418 294.791 c
493.0605 295.1387 L
492.7109 294.8389 492.4707 294.5381 492.4707 293.9121 c
492.4707 293.8047 L
492.4707 293.1309 492.8672 292.71 494.2021 292.71 c
495.5732 292.71 495.8857 293.0947 495.8857 293.7559 C
495.8857 293.8525 l
f
495.7891 298.7832 m
495.7891 299.5039 495.4648 300.0703 494.166 300.0703 c
492.8193 300.0703 492.543 299.457 492.543 298.7832 c
492.543 298.6865 L
492.543 298.1582 492.7832 297.46 494.166 297.46 c
495.4648 297.46 495.7891 297.9648 495.7891 298.6865 C
495.7891 298.7832 l
f
0 D
306.4082 294.2129 m
305.4941 294.2129 304.5684 294.2734 304.2197 294.334 c
304.0635 294.3574 303.9668 294.4541 303.9668 294.6348 c
303.9668 302.8965 L
303.9668 303.0645 304.0635 303.1719 304.2197 303.1963 c
304.5684 303.2568 305.4941 303.3164 306.4082 303.3164 c
308.6328 303.3164 310.0527 302.1738 310.0527 299.5762 c
310.0527 297.9531 l
310.0527 295.3799 308.6328 294.2129 306.4082 294.2129 c
f
1 D
308.958 299.5762 m
308.958 301.7539 307.8516 302.3789 306.4082 302.3789 c
305.8438 302.3789 305.4707 302.3672 305.0742 302.3428 c
305.0742 295.1758 L
305.459 295.1514 305.8438 295.1514 306.4082 295.1514 c
307.8516 295.1514 308.958 295.7891 308.958 297.9531 C
308.958 299.5762 l
f
0 D
316.4258 297.2676 m
312.3965 297.2676 L
312.3965 297.0996 L
312.3965 295.668 312.9619 295.1396 314.0684 295.1396 c
314.7656 295.1396 315.6563 295.1875 316.209 295.2715 c
316.2324 295.2715 316.2451 295.2715 316.2695 295.2715 c
316.3652 295.2715 316.4619 295.2236 316.4619 295.1035 c
316.4619 294.6943 L
316.4619 294.5381 316.4141 294.4541 316.2207 294.418 c
315.5352 294.2852 314.875 294.2129 314.0684 294.2129 c
312.6855 294.2129 311.3389 294.8633 311.3389 297.0996 c
311.3389 298.1816 L
311.3389 299.9014 312.2891 300.9961 314.0078 300.9961 c
315.7637 300.9961 316.6543 299.8896 316.6543 298.1816 c
316.6543 297.5322 l
316.6543 297.377 316.5703 297.2676 316.4258 297.2676 c
f
1 D
315.584 298.1816 m
315.584 299.541 315.0664 300.0703 314.0078 300.0703 c
312.9746 300.0703 312.3965 299.4805 312.3965 298.1816 c
312.3965 298.0742 L
315.584 298.0742 L
315.584 298.1816 l
f
0 D
320.5625 294.2129 m
320.1895 294.2129 319.625 294.2617 319.1553 294.3457 c
319.1553 292.1689 L
319.1553 292.0488 319.0586 291.9404 318.9268 291.9404 c
318.3135 291.9404 L
318.1934 291.9404 318.0967 292.0371 318.0967 292.1689 c
318.0967 300.4424 L
318.0967 300.5996 318.1328 300.6709 318.3496 300.7188 c
318.9863 300.875 319.8291 300.9961 320.5625 300.9961 c
322.3535 300.9961 323.1836 299.8291 323.1836 298.0254 c
323.1836 297.1602 l
323.1836 295.2715 322.3184 294.2129 320.5625 294.2129 c
f
1 D
322.125 298.0254 m
322.125 299.2881 321.7529 300.1055 320.5625 300.1055 c
320.0566 300.1055 319.4922 300.0459 319.1553 299.9863 c
319.1553 295.2236 L
319.5527 295.1514 320.1777 295.1035 320.5625 295.1035 c
321.7402 295.1035 322.125 295.873 322.125 297.1602 C
322.125 298.0254 l
f
0 D
328.9678 294.2969 m
328.4141 294.2969 L
328.2832 294.2969 328.1738 294.4063 328.1738 294.5381 c
328.1738 294.8027 L
327.5977 294.4658 326.9961 294.2129 326.3223 294.2129 c
325.3008 294.2129 324.3623 294.6582 324.3623 296.1621 c
324.3623 296.3057 L
324.3623 297.6045 325.1201 298.2539 327.2598 298.2539 c
328.1504 298.2539 L
328.1504 298.7344 L
328.1504 299.7451 327.8018 300.0938 326.8633 300.0938 c
326.082 300.0938 325.5039 300.0459 325.0234 299.998 c
325 299.998 324.9873 299.998 324.9629 299.998 c
324.8555 299.998 324.7471 300.0342 324.7471 300.1895 c
324.7471 300.6113 L
324.7471 300.7432 324.8311 300.8154 325 300.8398 c
325.4922 300.9238 326.0449 300.9961 326.8633 300.9961 c
328.5352 300.9961 329.209 300.1543 329.209 298.7344 c
329.209 294.5381 l
329.209 294.4063 329.0996 294.2969 328.9678 294.2969 c
f
1 D
328.1504 297.4961 m
327.2598 297.4961 L
325.8047 297.4961 325.4199 297.1719 325.4199 296.3184 c
325.4199 296.1738 L
325.4199 295.3076 325.8291 295.0791 326.5264 295.0791 c
327.0801 295.0791 327.5723 295.248 328.1504 295.5605 C
328.1504 297.4961 l
f
0 D
333.5615 300.082 m
333.0088 300.082 332.5039 299.9375 331.9023 299.5762 c
331.9023 294.5381 L
331.9023 294.418 331.7939 294.2969 331.6621 294.2969 c
331.0723 294.2969 L
330.9521 294.2969 330.8438 294.4063 330.8438 294.5381 c
330.8438 300.6709 L
330.8438 300.8027 330.9395 300.9121 331.0723 300.9121 c
331.6377 300.9121 L
331.7695 300.9121 331.8662 300.8027 331.8662 300.6709 c
331.8662 300.4189 L
332.4668 300.8398 333.0205 300.9961 333.5615 300.9961 c
333.7305 300.9961 333.8145 300.9238 333.8145 300.7793 c
333.8145 300.2861 l
333.8145 300.1543 333.7305 300.082 333.5615 300.082 c
f
338.252 294.2734 m
338.0117 294.2383 337.6982 294.2129 337.4697 294.2129 c
336.3633 294.2129 335.834 294.502 335.834 295.8242 c
335.834 300.0215 L
334.668 300.1543 L
334.5352 300.166 334.4395 300.2383 334.4395 300.3711 c
334.4395 300.6953 L
334.4395 300.8281 334.5352 300.9121 334.668 300.9121 c
335.834 300.9121 L
335.834 302.0898 L
335.834 302.2109 335.918 302.3066 336.0508 302.3301 c
336.6758 302.4268 L
336.6875 302.4268 336.7002 302.4268 336.7119 302.4268 c
336.8086 302.4268 336.8926 302.3428 336.8926 302.2227 c
336.8926 300.9121 L
338.1914 300.9121 L
338.3242 300.9121 338.4316 300.8027 338.4316 300.6709 c
338.4316 300.2617 L
338.4316 300.1299 338.3242 300.0215 338.1914 300.0215 c
336.8926 300.0215 L
336.8926 295.8242 L
336.8926 295.1631 337.0605 295.0674 337.542 295.0674 c
338.2148 295.0674 L
338.3838 295.0674 338.4678 295.0195 338.4678 294.8984 c
338.4678 294.4785 l
338.4678 294.3701 338.4082 294.2969 338.252 294.2734 c
f
347.3066 294.2969 m
346.7285 294.2969 L
346.5967 294.2969 346.4883 294.4063 346.4883 294.5381 c
346.4883 298.7949 L
346.4883 299.8047 346.0195 300.082 345.3945 300.082 c
344.9609 300.082 344.457 299.9375 343.9873 299.7568 c
344.0596 299.4922 344.0957 299.1797 344.0957 298.8193 c
344.0957 294.5381 L
344.0957 294.418 344.0117 294.2969 343.8789 294.2969 c
343.2422 294.2969 L
343.1211 294.2969 343.0371 294.4063 343.0371 294.5381 c
343.0371 298.8193 L
343.0371 299.8652 342.7363 300.082 342.1113 300.082 c
341.6787 300.082 341.1494 299.8652 340.6445 299.6133 c
340.6445 294.5381 L
340.6445 294.418 340.5605 294.2969 340.4277 294.2969 c
339.791 294.2969 L
339.6699 294.2969 339.5859 294.4063 339.5859 294.5381 c
339.5859 300.6709 L
339.5859 300.8027 339.6816 300.9121 339.8145 300.9121 c
340.416 300.9121 L
340.5488 300.9121 340.6445 300.8027 340.6445 300.6709 c
340.6445 300.4424 L
341.125 300.7432 341.7383 301.0078 342.4004 301.0078 c
342.917 301.0078 343.3018 300.8633 343.6025 300.5146 c
344.2637 300.8281 344.9736 301.0078 345.5996 301.0078 c
346.6816 301.0078 347.5469 300.4668 347.5469 298.7949 c
347.5469 294.5381 l
347.5469 294.4063 347.4385 294.2969 347.3066 294.2969 c
f
354.0527 297.2676 m
350.0234 297.2676 L
350.0234 297.0996 L
350.0234 295.668 350.5898 295.1396 351.6953 295.1396 c
352.3926 295.1396 353.2832 295.1875 353.8359 295.2715 c
353.8604 295.2715 353.8721 295.2715 353.8965 295.2715 c
353.9922 295.2715 354.0889 295.2236 354.0889 295.1035 c
354.0889 294.6943 L
354.0889 294.5381 354.041 294.4541 353.8477 294.418 c
353.1621 294.2852 352.502 294.2129 351.6953 294.2129 c
350.3125 294.2129 348.9658 294.8633 348.9658 297.0996 c
348.9658 298.1816 L
348.9658 299.9014 349.916 300.9961 351.6357 300.9961 c
353.3906 300.9961 354.2813 299.8896 354.2813 298.1816 c
354.2813 297.5322 l
354.2813 297.377 354.1973 297.2676 354.0527 297.2676 c
f
1 D
353.2109 298.1816 m
353.2109 299.541 352.6934 300.0703 351.6357 300.0703 c
350.6016 300.0703 350.0234 299.4805 350.0234 298.1816 c
350.0234 298.0742 L
353.2109 298.0742 L
353.2109 298.1816 l
f
0 D
360.5469 294.2969 m
359.9688 294.2969 L
359.8369 294.2969 359.7285 294.4063 359.7285 294.5381 c
359.7285 298.4941 L
359.7285 299.709 359.3203 300.082 358.4063 300.082 c
357.9004 300.082 357.3359 299.8896 356.7822 299.6133 c
356.7822 294.5381 L
356.7822 294.418 356.6738 294.2969 356.542 294.2969 c
355.9531 294.2969 L
355.832 294.2969 355.7246 294.4063 355.7246 294.5381 c
355.7246 300.6709 L
355.7246 300.8027 355.8203 300.9121 355.9531 300.9121 c
356.5537 300.9121 L
356.6855 300.9121 356.7822 300.8027 356.7822 300.6709 c
356.7822 300.4424 L
357.4434 300.8154 357.9844 300.9961 358.6943 300.9961 c
360.1367 300.9961 360.7871 300.0938 360.7871 298.4941 c
360.7871 294.5381 l
360.7871 294.4063 360.6787 294.2969 360.5469 294.2969 c
f
365.7168 294.2734 m
365.4766 294.2383 365.1641 294.2129 364.9355 294.2129 c
363.8291 294.2129 363.3008 294.502 363.3008 295.8242 c
363.3008 300.0215 L
362.1328 300.1543 L
362.001 300.166 361.9043 300.2383 361.9043 300.3711 c
361.9043 300.6953 L
361.9043 300.8281 362.001 300.9121 362.1328 300.9121 c
363.3008 300.9121 L
363.3008 302.0898 L
363.3008 302.2109 363.3848 302.3066 363.5166 302.3301 c
364.1416 302.4268 L
364.1543 302.4268 364.166 302.4268 364.1777 302.4268 c
364.2734 302.4268 364.3584 302.3428 364.3584 302.2227 c
364.3584 300.9121 L
365.6563 300.9121 L
365.7891 300.9121 365.8975 300.8027 365.8975 300.6709 c
365.8975 300.2617 L
365.8975 300.1299 365.7891 300.0215 365.6563 300.0215 c
364.3584 300.0215 L
364.3584 295.8242 L
364.3584 295.1631 364.5264 295.0674 365.0078 295.0674 c
365.6816 295.0674 L
365.8496 295.0674 365.9336 295.0195 365.9336 294.8984 c
365.9336 294.4785 l
365.9336 294.3701 365.873 294.2969 365.7168 294.2734 c
f
372.4189 294.2129 m
370.6504 294.2129 369.749 295.3799 369.749 297.1475 c
369.749 298.0615 L
369.749 299.8291 370.6504 300.9961 372.4189 300.9961 c
374.1865 300.9961 375.0996 299.8291 375.0996 298.0615 c
375.0996 297.1475 l
375.0996 295.3799 374.1865 294.2129 372.4189 294.2129 c
f
1 D
374.042 298.0615 m
374.042 299.2881 373.5488 300.0703 372.4189 300.0703 c
371.2998 300.0703 370.8066 299.3008 370.8066 298.0615 c
370.8066 297.1475 L
370.8066 295.9209 371.2881 295.1396 372.4189 295.1396 c
373.5371 295.1396 374.042 295.9092 374.042 297.1475 C
374.042 298.0615 l
f
0 D
379.7656 302.6074 m
379.1885 302.6074 L
378.623 302.6074 378.4551 302.4395 378.4551 301.7773 c
378.4551 300.9121 L
379.7178 300.9121 L
379.8496 300.9121 379.9463 300.8154 379.9463 300.6953 c
379.9463 300.2266 L
379.9463 300.1055 379.8496 300.0215 379.7178 300.0215 c
378.4551 300.0215 L
378.4551 294.5381 L
378.4551 294.418 378.3477 294.2969 378.2266 294.2969 c
377.6377 294.2969 L
377.5059 294.2969 377.3965 294.418 377.3965 294.5381 c
377.3965 300.0215 L
376.2305 300.1543 L
376.0977 300.166 376.002 300.25 376.002 300.3711 c
376.002 300.6953 L
376.002 300.8154 376.0977 300.9121 376.2305 300.9121 c
377.3965 300.9121 L
377.3965 301.7773 L
377.3965 303.0645 378.0225 303.4492 379.0801 303.4492 c
379.4053 303.4492 379.5977 303.4131 379.7539 303.377 c
379.8867 303.3408 379.9824 303.293 379.9824 303.1846 c
379.9824 302.7871 l
379.9824 302.6553 379.8984 302.6074 379.7656 302.6074 c
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 2101 347 a @beginspecial 0 @llx 0 @lly 246
@urx 57 @ury 2460 @rwi @setspecial
%%BeginDocument: figs/dtu_A1_UK.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (DTU UK A CMYK)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 10:53:50 07/01/08
%%For: (PeopleGroup)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 246 57
%%HiResBoundingBox: 0.0 0.0 246.367 56.659
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0


%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 10538 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2008-07-01T10:53:50+02:00</xap:CreateDate>
         <xap:ModifyDate>2008-07-01T10:53:50+02:00</xap:ModifyDate>
         <xap:MetadataDate>2008-07-01T10:53:50+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>60</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAPAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7NpX5pa9deYLvR77yhc6&#xA;aNMWCbWbye+08xWlvchyk0hWX4l4wuTwqRTfFWVWfnXyfe6Vcavaa5YT6XZ7Xd9HcxNDF/xkkDcU&#xA;+nFWNXf5z+ULXX7CymvbMaLqdvPcWnmFb2A2ha24iSJjXZ+TgAVxVkF75/8AIlhxF75j0y2LwrdR&#xA;rLeQIzQSCqSqC9WRv2WGx7YqsHnbR5/MemaLp9za3zahay3jSw3duzxxIEaFxCGMkiTBzxdBT4cV&#xA;XR/mF5Dkt7y5TzHpjW+nsqX0wvIOELOeKCRudF5MKLXqdhiqX6v+ZOlWjeXLjT1j1fSPMd/Hpdvq&#xA;dncRvHHPLyK1AryFI3rQ7EUOKptrvma30jUtDsJYXlfXLxrKF1IAjZYJJyzV6ikNNsVSuH8zfKy6&#xA;tren6peQaONGu4rH6xf3EMEc8ksCzgRF2WpAbp1xVdrH5l+VLTy/LrGn6pp+pok62kMaX9rEslwW&#xA;HKFZZHCcwlX41qQNsVTt/MXl+OGed9TtEhtrgWdzK08YWO5JUCB2LUWQl1HA77jxxVDf408ofpG7&#xA;039N2H6Q0+N5r60NzEJYY4xWR5E5VUIN2J+z3xVDn8xfy/FlLfDzLpbWcBjWa4W8gaNGm5emGZXI&#xA;Bf034jvxPhiqFn/MnyyNZ02xtNQ0+8tL22uby6v49QtAtvBbpyWUxl+bxvR/jXZeJriqv5a/MXyX&#xA;5jsobvS9WtpFuLh7SGFpo1laeMuPTEfLlyZYy6j9pPiG2Kp1b6rpdzHcyW15BPHZyPBdvHIjrDLF&#xA;/eRyFSeDJ+0p3GKsa1n82PImn+WNS8wQazZajbaaGVo7W6gdpJwrMkCHnT1JPTPEd6VFcVVE8/Wy&#xA;/lw/ne4tlNvFZSX0tra3EV0KRgkok8Z9N2+Ghp0O2KoXyz+ZY1LWm0PWtFuvLupm0OoWyXbwSwzW&#xA;qEB3jngd0qnIclNP14qmkX5i/l/LZTXyeZdLNlbyCGe5+u24iSRq8UZy/EFuB4+NNsVXL+YXkJra&#xA;4ux5k0v6rayrBc3H1239OOVwSiO/PiGYK1BXsfA4qtg/MXyBPcQ20HmXS5bi4l+rwQpeW7O8vTgq&#xA;hyS1dqeOKolPOXlJ9Zk0RNasW1iIMZdOFzEbheA5Nyj5cgVUVIpsN8VY55o/OHyrpOjvqulXdn5h&#xA;it2i+uRafe28kkUU06W6y8VZ6r6sqqcVZjZ6rpd7NcwWd5Bcz2T+leRQyJI8MlK8JVUko1OzYqis&#xA;VdiryGXy7p2v/mtrFhf8/Q9MyAxtxYMqRAGtD/NhQ7yXpaSa95j8lTzyyaRxcqOQDAwToARsVBYN&#xA;8VBvilKrXyZpEv5kzeXGaX9Hx8uJDD1NofU+1xp19sUJy+nwad+bWj2FvyMFtBHFGXNW4rA4FTti&#xA;qP8A/K3/APPD/sWxSgfPHkPzPrcv5kQ2MHH9O6bpMOlytIiLPJZtcPNFWp47MF+MU+LwrgVjb/ln&#xA;rl35f1m9tdH1YapcXWkXF1pmsTaSEv4tNnLtDGtisUS0Taswo21MKsvbQdS8wefPKuuXnll9P0qz&#xA;stTivLS8+quYpJTEIiyRSSr+8CmlPpxVLPJv5f61Cn5ZR6xpStHoOl6pBqqTelIsE0/1cQqRVgxb&#xA;g1CtcVQPlb8u/OcXl/yNY3Vq1nd6bouv2F/M0kbG2mvfSW1BKs3LZSRxrSmKqsFr+ZNl+VtloOje&#xA;VZdK1jR10+zv5EfTna8giHC6ks2cyx+o3HmGlT9rapxVKvLPkPzha6dpGlHQby1TTfO0Wtu9zJYk&#xA;CweGVS9bV1jLI1OapGBuOI8FXpP5l6X5gmk8ua1olj+lLjQNTF5cacsiRSS2728sEnpNIyJzUS8g&#xA;pIrgVgmteRvOeueS/PlzJozWuo+adU065sdGklgkmW3tJrVWaV1cxAskTNx5bDbCqZeavIGuTRfm&#xA;LDpelqIdaOjNpccRijWU2vD1yF5KF4cf2qV7Yqqav+XvmW4/NAGG3Q+TdQ1Kx8w31wHQcLvTreSH&#xA;0TETyb1pRBJWlPhOKpN5G/LTWtN84WR1fTtW56Xqd/fWmp282l/owrdtLR2BRb9vUjkCMhYmvgo2&#xA;VRFx+Xd5F+VFtp8/l26l8ww6pd38EumtZpdW83124ktblmmkSOVfSdVK1Y8WpQU2VTnStA893mvf&#xA;lnrGvWEcd9pVlqqeYHgMSxwy3MUSw1VGpyfgeXp1UNXoMCsX1LT77y9+VDfpWzTR9a8p65JrWlvd&#xA;T28cd+I76W5pC6uxJe2nePiwrWg74VZR5b8m6xefkNd6UOMfmDzNYXl7ctISgN3qgebjIdyKeqEP&#xA;ywKxqXyN5u1ax803kflj9Aev5Uj0G10j1LYtdXsTPJ6q+i7R8VBEaM5qRhV6V550DUL/APK7WND0&#xA;22D6hcaXLbW9qpRA0rRcQoJKoKt70wKwHWfKnnrz1PcXE+iv5chsPL1/pOnC8nhea5u75ESpWBpB&#xA;HEojoSWrv33wqlulflrrbeUfNNNG1i31278vnSIoNQn0k28rRrVEhWxWIko2yyS/smlcVTfzJ+Xm&#xA;vtcecU0rSlS11LynBp9nHCYY0lvYzLWMKGUcgGG5298VQutflhrkl35xktNFjpeHyt+h2T0Fr9Qn&#xA;U3vp/EOHBB8XTl2riqG1ny9+Zdx+Y9rruo6HeX9vo2vvPYS2baYtv+iXjdY+CN6N0Zvs+pzl4+3T&#xA;FUVq/wCW3mab8tvP+m22mcNa1zzLNe2JQwiWWzOpwTxycy1KCNWYKxr7Yqzb8otD1ry7oFz5d1aw&#xA;EM+nXUhTV42Vk1JZmMn1tqu8glbpKH79NugVnWKuxV5poX/k5tY/4wN/xGHCql5J/wDJs+Yv+Mdz&#xA;/wBREWKqOn/+Tvuf9n/1DDFVbVv/ACdWn/8AGNf+TL4qq/8Alb/+eH/Ytir0vArsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVULrT7C7MZu7aK4MR5ReqivxbxXkDQ4qr4q7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXm+oeV/PFr511DXtEjtmW5X04zO4+yUQH4dt6phVMfIXkvV9K1O/1vWpo5NRvwwKRmtA783J&#xA;NAN2AoBsMCqdp5P1mL8zJvMLLH+jn5cWD/HvAE+z/rYq7zn5Q1+bzJZ+ZfL5ie9tlVHt5TxqV5Ct&#xA;TQEFWodxiqzyr5S8yv5sn80eYjFFcshSK2hPIAlRH2LAKEHiSThVn2BXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq4kAVPTFXmvnf8APjyj5eEltp7jWdUWq+jb&#xA;sPRRv+LJqFfoSp8aZRPOBy3dzo+xM2XeXoj58/kk/lr/AJyV8s3gWLX7ObS5tgZ4q3EHuTxAkX5B&#xA;WyMdQOrkaj2eyx3xkSHyP6mZt+b35arbfWDr9t6f8o5l+lf7sLz/AAyzx4d7rv5K1N1wFhHmX/nJ&#xA;fy/a8ovL9hLqMo2FxP8AuIfmF+KRvkQuVy1HcHZ6f2dyS3yER925/V97IvJH54+T/MpS2uJP0Rqb&#xA;bfVrpgI3bwjm2VvkaHwGShnB57OHrOxs2HceuPeP1PRMvdQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXMqspVgCpFCDuCDiryn8xPyR8jX9pPqsE0Xlu4jBeW5&#xA;HFbQ/wDGSMlVX5oR8jmPkwx5jZ3ug7ZzxIgR4g+1IfIv5A+Sr20j1C81sa6poSlg6pbgkV4sylpC&#xA;fpU+2Qx4Qerla3tzNE8MYcH9bn+r73oB/Jn8sTB6H6Bh4UpUPMH/AOD58/xy7wIdzqv5X1N3xn7P&#xA;1POvPf5BeTtOtjfWevpoiH7MWpOrQsf5UequOvg2UZMIHV2+i7czTPDKHH/V5/j5Mr/L78k/I+kW&#xA;9vqcjx+YLxgHivH4vaj3hjUsh+bFvamWY8MefNwNf2xnyExH7sd3X4vTsyHSuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpuXE8SA1PhJFQD7ioxUPm784PIn5r&#xA;SXcmoX91J5g0pCXiNqpVYF97Va8NurLy92zBywlzO72PZWt0oHDEeHLz6/5zE/JP5ffmff3CXvl+&#xA;1utPBHw6iZGs14nurkozj/VByEYSPJz9ZrtNEcOQiXlzesv5C/P02HpDzjbl+NCgZwf+Rwg5198v&#xA;8PJ3/a6Ea7QcV+Efx5W8h85+QPzJ024kvPMFndXfLd9RDm7Q79WkUuV3/nplEoEc3oNJrtNMcOMg&#xA;eXL7Gdfk35E/Ne1uI7+2u20HR5SHlhu1L+uvtatTqP2jxPgcsxQnzGzq+1tbpZDhI45+XT/O/tfR&#xA;OZryLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaZgqljWgF&#xA;TQEnbwA3OKh4P+YX/OQ2o21zcaT5csHs5oiY5L6/jKzKf8i3YDifAyV/1cxJ6g8g9ToOwYkCeQ35&#xA;Dl8/1fNIfLX/ADkj5ssAkOtW0OrwjYyj/R56f6yAxn/gPpyMc8hz3crUez+KW8CYH5j8fFm7f85L&#xA;+VxZeuuj6iZenErEIq+Hq8yf+Fyz8yO7d1o9ncvFXFGvjfyYL5l/5yQ84ahyj0aCHR4D0cAXE9P9&#xA;eReA+hPpyuWeR8nZ6f2fww3mTM/Ifj4so/Lr/nIS71C6g0jzDp8lxdykJDe6fEZGY/8AFlutT8zH&#xA;/wADkoag8i4Ov7BEQZ45UO6X6/1/N7lmW8y7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq8/8AzY/5VZ+j/wDncvS+tcD9V9L/AHvpvT0uHx8a/wA3wV65Rm4O&#xA;vN23Zf5ri/c3XX+b8fxbGfy0/wCVA8Iv0b6P6Tp/0uuP1jlXbj6n7jl/xiyGPw/7fxTmdo/n/wCK&#xA;+H+hy/X83sL/AFX6sefD6tx35U9PhT32pTMnannxd+bxf8yf+hfvj+uen+ku/wCguPq178uH+jV8&#xA;ee+YuTw/7PxT0fZ/8odPp/p/ji+TNfys/wCVZ/ok/wCC/RrQfW+X+9ldv77n+8pX/Y/y5bi4Ojre&#xA;0/zPH++vy/m/Dp+l/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:2C8D48394B47DD119BE8D7DFED08E07B</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:2C8D48394B47DD119BE8D7DFED08E07B</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a3fad54f-d981-421f-b48f-34feba51cbe2</stRef:instanceID>
            <stRef:documentID>uuid:98DD0EE8BAC011DC9722AE09B9B5962D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">DTU UK A CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>PeopleGroup</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 246.367 56.659 rectclip
/N10 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

q
0.0 0.0 m
246.367 0.0 l
246.367 56.659 l
0.0 56.659 l
h
W
n
q
n
0.060005 56.659 246.307 -56.599 re
W
n
n
11.191 44.351 m
11.299 44.359 11.407 44.3 11.407 44.179 c
11.407 43.578 l
11.407 43.404 11.364 43.321 11.16 43.284 c
10.426 43.15 9.8623 43.079 8.918 43.079 c
7.2461 43.079 6.0986 44.011 6.0986 46.314 c
6.0986 46.733 l
6.0986 48.531 6.7944 49.951 8.8765 49.951 c
10.982 49.951 11.629 48.483 11.629 46.733 c
11.629 46.355 l
11.629 46.181 11.551 46.073 11.395 46.073 c
7.4214 46.073 l
7.4214 45.971 l
7.4214 44.906 7.8481 44.227 8.978 44.227 c
9.7642 44.227 10.604 44.303 11.143 44.347 c
11.191 44.351 l
h
10.294 47.12 m
10.294 48.28 9.7773 48.82 8.8765 48.82 c
7.9858 48.82 7.4277 48.255 7.4277 47.12 c
7.4277 47.041 l
10.294 47.041 l
10.294 47.12 l
h
90.285 44.351 m
90.393 44.359 90.501 44.3 90.501 44.179 c
90.501 43.578 l
90.501 43.404 90.459 43.321 90.254 43.284 c
89.521 43.15 88.956 43.079 88.012 43.079 c
86.34 43.079 85.192 44.011 85.192 46.314 c
85.192 46.733 l
85.192 48.531 85.888 49.951 87.971 49.951 c
90.077 49.951 90.724 48.483 90.724 46.733 c
90.724 46.355 l
90.724 46.181 90.645 46.073 90.489 46.073 c
86.514 46.073 l
86.514 45.971 l
86.514 44.906 86.942 44.227 88.072 44.227 c
88.86 44.227 89.696 44.303 90.237 44.347 c
90.285 44.351 l
h
89.388 47.12 m
89.388 48.28 88.872 48.82 87.971 48.82 c
87.08 48.82 86.521 48.255 86.521 47.12 c
86.521 47.041 l
89.388 47.041 l
89.388 47.12 l
h
150.266 44.351 m
150.373 44.359 150.48 44.3 150.48 44.179 c
150.48 43.578 l
150.48 43.404 150.439 43.321 150.233 43.284 c
149.5 43.15 148.936 43.079 147.992 43.079 c
146.321 43.079 145.172 44.011 145.172 46.314 c
145.172 46.733 l
145.172 48.531 145.868 49.951 147.95 49.951 c
150.057 49.951 150.703 48.483 150.703 46.733 c
150.703 46.355 l
150.703 46.181 150.625 46.073 150.469 46.073 c
146.495 46.073 l
146.495 45.971 l
146.495 44.906 146.922 44.227 148.053 44.227 c
148.84 44.227 149.677 44.303 150.217 44.347 c
150.266 44.351 l
h
149.369 47.12 m
149.369 48.28 148.852 48.82 147.95 48.82 c
147.06 48.82 146.502 48.255 146.502 47.12 c
146.502 47.041 l
149.369 47.041 l
149.369 47.12 l
h
142.735 43.993 m
142.098 43.364 141.135 43.079 139.967 43.079 c
139.084 43.079 138.043 43.151 137.689 43.211 c
137.509 43.241 137.405 43.338 137.405 43.548 c
137.405 51.724 l
137.405 51.928 137.509 52.03 137.689 52.061 c
138.043 52.122 139.084 52.193 139.967 52.193 c
141.125 52.193 142.08 51.917 142.718 51.299 c
143.477 50.567 143.677 49.562 143.677 48.2 c
143.677 47.072 l
143.677 45.727 143.484 44.732 142.735 43.993 c
h
142.299 48.143 m
142.299 49.303 142.146 50.02 141.633 50.496 c
141.215 50.883 140.629 51.021 139.967 51.021 c
139.463 51.021 139.119 51.002 138.794 50.984 c
138.794 44.282 l
139.112 44.264 139.463 44.251 139.967 44.251 c
140.656 44.251 141.262 44.401 141.682 44.827 c
142.168 45.316 142.299 46.005 142.299 47.13 c
142.299 48.143 l
h
183.04 51.297 m
181.784 51.663 l
181.637 51.707 181.549 51.815 181.549 51.947 c
181.549 52.079 181.549 52.024 181.549 52.024 c
181.549 52.156 181.651 52.266 181.784 52.266 c
184.122 52.266 l
184.253 52.266 184.362 52.156 184.362 52.024 c
184.362 46.875 l
186.625 49.74 l
186.7 49.837 186.785 49.866 186.881 49.866 c
187.961 49.866 l
188.08 49.866 188.143 49.812 188.145 49.734 c
188.146 49.692 188.129 49.65 188.094 49.608 c
185.652 46.709 l
188.365 43.421 l
188.391 43.391 188.404 43.355 188.406 43.32 c
188.408 43.241 188.353 43.169 188.262 43.169 c
187.022 43.169 l
186.891 43.169 186.791 43.253 186.704 43.368 c
184.362 46.359 l
184.362 43.416 l
184.362 43.284 184.253 43.169 184.122 43.169 c
183.279 43.169 l
183.146 43.169 183.04 43.284 183.04 43.416 c
183.04 51.297 l
h
112.334 41.014 m
112.19 41.028 112.084 41.147 112.084 41.277 c
112.084 41.343 112.084 41.288 112.084 41.354 c
112.084 41.486 112.187 41.595 112.334 41.617 c
114.08 41.862 l
114.561 41.931 114.822 42.092 114.987 42.742 c
115.094 43.169 l
114.92 43.169 l
114.565 43.169 114.193 43.253 113.952 44.083 c
112.366 49.584 l
112.321 49.734 112.385 49.866 112.575 49.866 c
113.513 49.866 l
113.616 49.866 113.704 49.763 113.73 49.662 c
115.046 44.606 l
115.101 44.383 115.167 44.342 115.245 44.342 c
115.396 44.342 l
116.777 49.675 l
116.805 49.777 116.898 49.866 117.013 49.866 c
117.961 49.866 l
118.132 49.866 118.19 49.71 118.154 49.584 c
118.056 49.233 116.159 42.609 116.159 42.609 c
115.878 41.631 115.601 41.352 115.186 41.098 c
114.78 40.848 114.318 40.816 113.369 40.911 c
112.334 41.014 l
h
179.195 49.866 m
179.328 49.866 179.435 49.759 179.438 49.627 c
179.449 49.334 l
180.125 49.826 180.703 49.951 181.213 49.951 c
181.363 49.951 181.46 49.86 181.46 49.723 c
181.46 49.043 l
181.46 48.911 181.363 48.82 181.213 48.82 c
180.611 48.82 180.106 48.665 179.554 48.352 c
179.554 43.416 l
179.554 43.29 179.445 43.169 179.314 43.169 c
178.466 43.169 l
178.34 43.169 178.23 43.284 178.23 43.416 c
178.23 48.898 l
177.023 49.265 l
176.879 49.307 176.791 49.417 176.791 49.549 c
176.791 49.68 176.791 49.626 176.791 49.626 c
176.791 49.759 176.892 49.866 177.023 49.866 c
179.195 49.866 l
h
152.799 48.898 m
151.549 49.265 l
151.404 49.307 151.315 49.417 151.315 49.549 c
151.315 49.68 151.315 49.626 151.315 49.626 c
151.315 49.759 151.416 49.866 151.549 49.866 c
153.781 49.866 l
153.914 49.866 154.021 49.759 154.024 49.627 c
154.035 49.346 l
154.766 49.796 155.27 49.951 156.021 49.951 c
157.646 49.951 158.107 48.831 158.107 47.495 c
158.107 43.416 l
158.107 43.284 158.0 43.169 157.867 43.169 c
157.026 43.169 l
156.894 43.169 156.786 43.284 156.786 43.416 c
156.786 47.354 l
156.786 48.484 156.532 48.82 155.611 48.82 c
155.155 48.82 154.65 48.64 154.121 48.37 c
154.121 43.416 l
154.121 43.29 154.014 43.169 153.881 43.169 c
153.034 43.169 l
152.907 43.169 152.799 43.284 152.799 43.416 c
152.799 48.898 l
h
160.544 48.898 m
159.266 49.265 l
159.118 49.307 159.029 49.417 159.029 49.549 c
159.029 49.68 159.029 49.626 159.029 49.626 c
159.029 49.759 159.133 49.866 159.266 49.866 c
161.528 49.866 l
161.66 49.866 161.766 49.759 161.771 49.627 c
161.779 49.346 l
162.329 49.7 162.889 49.957 163.575 49.957 c
164.176 49.957 164.59 49.783 164.88 49.439 c
165.516 49.764 166.141 49.957 166.868 49.957 c
168.076 49.957 168.84 49.27 168.84 47.73 c
168.84 43.416 l
168.84 43.284 168.732 43.169 168.6 43.169 c
167.759 43.169 l
167.627 43.169 167.519 43.284 167.519 43.416 c
167.519 47.588 l
167.519 48.555 167.188 48.814 166.539 48.814 c
166.207 48.814 165.727 48.706 165.275 48.502 c
165.33 48.237 165.354 47.931 165.354 47.6 c
165.354 43.416 l
165.354 43.29 165.258 43.169 165.125 43.169 c
164.254 43.169 l
164.129 43.169 164.031 43.284 164.031 43.416 c
164.031 47.6 l
164.031 48.586 163.804 48.814 163.153 48.814 c
162.81 48.814 162.366 48.64 161.867 48.381 c
161.867 43.416 l
161.867 43.29 161.771 43.169 161.639 43.169 c
160.768 43.169 l
160.641 43.169 160.544 43.284 160.544 43.416 c
160.544 48.898 l
h
176.619 43.781 m
176.754 43.736 176.859 43.607 176.859 43.469 c
176.859 43.338 176.859 43.409 176.859 43.409 c
176.859 43.277 176.751 43.169 176.619 43.169 c
174.586 43.169 l
174.453 43.169 174.342 43.277 174.336 43.409 c
174.328 43.678 l
173.787 43.334 173.123 43.079 172.497 43.079 c
171.486 43.079 170.478 43.494 170.478 45.057 c
170.478 45.153 l
170.478 46.487 171.277 47.167 173.393 47.167 c
174.217 47.167 l
174.217 47.673 l
174.217 48.568 173.868 48.838 173.045 48.838 c
172.27 48.838 171.592 48.78 171.15 48.748 c
171.092 48.744 l
170.977 48.735 170.867 48.779 170.867 48.941 c
170.867 49.535 l
170.867 49.668 170.945 49.746 171.107 49.775 c
171.595 49.866 172.221 49.951 173.045 49.951 c
174.734 49.951 175.539 49.151 175.539 47.673 c
175.539 44.129 l
176.619 43.781 l
h
174.217 46.259 m
173.393 46.259 l
172.118 46.259 171.805 45.923 171.805 45.159 c
171.805 45.063 l
171.805 44.335 172.143 44.143 172.791 44.143 c
173.285 44.143 173.754 44.3 174.217 44.552 c
174.217 46.259 l
h
108.324 48.888 m
107.049 49.263 l
106.916 49.309 106.813 49.41 106.813 49.542 c
106.813 49.638 l
106.813 49.771 106.916 49.866 107.049 49.866 c
108.324 49.866 l
108.324 50.949 l
108.324 51.065 108.415 51.166 108.553 51.189 c
109.424 51.334 l
109.539 51.353 109.652 51.276 109.652 51.142 c
109.652 49.866 l
110.843 49.866 l
110.975 49.866 111.083 49.759 111.083 49.627 c
111.083 49.067 l
111.083 48.935 110.975 48.827 110.843 48.827 c
109.652 48.827 l
109.652 44.84 l
109.652 44.208 109.755 44.125 110.212 44.125 c
110.868 44.125 l
111.03 44.125 111.119 44.071 111.119 43.951 c
111.119 43.361 l
111.119 43.247 111.053 43.176 110.897 43.151 c
110.632 43.109 110.344 43.079 110.098 43.079 c
108.866 43.079 108.324 43.373 108.324 44.84 c
108.324 48.888 l
h
61.694 43.079 m
59.753 43.079 58.502 44.017 58.502 46.445 c
58.502 51.875 l
58.502 52.001 58.604 52.103 58.736 52.103 c
59.656 52.103 l
59.782 52.103 59.892 52.007 59.892 51.875 c
59.892 46.445 l
59.892 44.985 60.299 44.239 61.694 44.239 c
63.09 44.239 63.498 44.979 63.498 46.445 c
63.498 51.875 l
63.498 52.001 63.6 52.103 63.732 52.103 c
64.653 52.103 l
64.779 52.103 64.887 52.007 64.887 51.875 c
64.887 46.445 l
64.887 44.017 63.637 43.079 61.694 43.079 c
h
93.869 49.866 m
94.002 49.866 94.107 49.759 94.112 49.627 c
94.122 49.334 l
94.797 49.826 95.375 49.951 95.886 49.951 c
96.036 49.951 96.132 49.86 96.132 49.723 c
96.132 49.043 l
96.132 48.911 96.036 48.82 95.886 48.82 c
95.284 48.82 94.779 48.665 94.226 48.352 c
94.226 43.416 l
94.226 43.29 94.118 43.169 93.986 43.169 c
93.138 43.169 l
93.013 43.169 92.905 43.284 92.905 43.416 c
92.905 48.898 l
91.697 49.265 l
91.552 49.307 91.463 49.417 91.463 49.549 c
91.463 49.68 91.463 49.626 91.463 49.626 c
91.463 49.759 91.565 49.866 91.697 49.866 c
93.869 49.866 l
h
67.493 48.898 m
66.244 49.265 l
66.098 49.307 66.008 49.417 66.008 49.549 c
66.008 49.68 66.008 49.626 66.008 49.626 c
66.008 49.759 66.111 49.866 66.244 49.866 c
68.476 49.866 l
68.609 49.866 68.713 49.759 68.719 49.627 c
68.729 49.346 l
69.46 49.796 69.963 49.951 70.715 49.951 c
72.34 49.951 72.801 48.831 72.801 47.495 c
72.801 43.416 l
72.801 43.284 72.694 43.169 72.561 43.169 c
71.72 43.169 l
71.587 43.169 71.479 43.284 71.479 43.416 c
71.479 47.354 l
71.479 48.484 71.227 48.82 70.307 48.82 c
69.85 48.82 69.345 48.64 68.815 48.37 c
68.815 43.416 l
68.815 43.29 68.709 43.169 68.576 43.169 c
67.727 43.169 l
67.601 43.169 67.493 43.284 67.493 43.416 c
67.493 48.898 l
h
104.089 48.898 m
102.834 49.265 l
102.688 49.307 102.599 49.417 102.599 49.549 c
102.599 49.68 102.599 49.626 102.599 49.626 c
102.599 49.759 102.702 49.866 102.834 49.866 c
105.171 49.866 l
105.303 49.866 105.413 49.759 105.413 49.627 c
105.413 43.416 l
105.413 43.284 105.303 43.169 105.171 43.169 c
104.33 43.169 l
104.198 43.169 104.089 43.284 104.089 43.416 c
104.089 48.898 l
h
105.202 50.846 m
104.312 50.846 l
104.179 50.846 104.065 50.955 104.065 51.087 c
104.065 52.097 l
104.065 52.229 104.179 52.337 104.312 52.337 c
105.202 52.337 l
105.333 52.337 105.442 52.229 105.442 52.097 c
105.442 51.087 l
105.442 50.955 105.333 50.846 105.202 50.846 c
h
75.366 48.898 m
74.111 49.265 l
73.964 49.307 73.875 49.417 73.875 49.549 c
73.875 49.68 73.875 49.626 73.875 49.626 c
73.875 49.759 73.979 49.866 74.111 49.866 c
76.448 49.866 l
76.58 49.866 76.69 49.759 76.69 49.627 c
76.69 43.416 l
76.69 43.284 76.58 43.169 76.448 43.169 c
75.607 43.169 l
75.475 43.169 75.366 43.284 75.366 43.416 c
75.366 48.898 l
h
76.479 50.846 m
75.588 50.846 l
75.456 50.846 75.342 50.955 75.342 51.087 c
75.342 52.097 l
75.342 52.229 75.456 52.337 75.588 52.337 c
76.479 52.337 l
76.611 52.337 76.718 52.229 76.718 52.097 c
76.718 51.087 l
76.718 50.955 76.611 50.846 76.479 50.846 c
h
80.954 44.492 m
81.018 44.233 81.087 44.167 81.194 44.167 c
81.293 44.167 81.371 44.231 81.436 44.492 c
82.703 49.632 l
82.737 49.767 82.837 49.866 82.944 49.866 c
83.877 49.866 l
84.016 49.866 84.098 49.744 84.055 49.584 c
82.487 43.987 l
82.286 43.27 81.76 43.079 81.194 43.079 c
80.558 43.079 80.093 43.324 79.907 43.987 c
78.338 49.584 l
78.297 49.734 78.37 49.866 78.52 49.866 c
79.451 49.866 l
79.554 49.866 79.648 49.786 79.686 49.632 c
80.954 44.492 l
h
97.42 44.301 m
98.002 44.272 98.967 44.173 99.364 44.173 c
100.128 44.173 100.386 44.401 100.386 44.888 c
100.386 45.183 100.206 45.37 99.67 45.694 c
98.241 46.56 l
97.579 46.962 97.123 47.522 97.123 48.249 c
97.123 49.476 97.969 49.951 99.353 49.951 c
100.175 49.951 100.772 49.868 101.361 49.752 c
101.511 49.723 101.583 49.632 101.583 49.494 c
101.583 48.946 l
101.583 48.802 101.505 48.73 101.384 48.73 c
101.366 48.73 101.354 48.73 101.342 48.73 c
100.961 48.751 100.098 48.851 99.419 48.851 c
98.794 48.851 98.444 48.743 98.444 48.249 c
98.444 47.973 98.674 47.799 99.099 47.546 c
100.482 46.711 l
101.487 46.109 101.72 45.55 101.72 44.888 c
101.72 43.752 100.879 43.079 99.419 43.079 c
98.962 43.079 98.024 43.131 97.392 43.29 c
97.243 43.326 97.152 43.409 97.152 43.548 c
97.152 44.119 l
97.152 44.221 97.252 44.31 97.372 44.304 c
97.42 44.301 l
h
6.0728 50.937 m
3.8477 50.937 l
3.8477 43.409 l
3.8477 43.284 3.7515 43.169 3.6191 43.169 c
2.6934 43.169 l
2.5674 43.169 2.4648 43.277 2.4648 43.409 c
2.4648 50.937 l
0.24122 50.937 l
0.10889 50.937 0.0 51.009 0.0 51.142 c
0.0 51.88 l
0.0 52.007 0.10889 52.103 0.24122 52.103 c
6.0728 52.103 l
6.2051 52.103 6.3066 52.013 6.3066 51.88 c
6.3066 51.142 l
6.3066 51.016 6.2051 50.937 6.0728 50.937 c
h
26.965 48.898 m
25.831 49.257 l
25.684 49.304 25.596 49.417 25.596 49.549 c
25.596 49.68 25.596 49.626 25.596 49.626 c
25.596 49.759 25.698 49.866 25.831 49.866 c
27.949 49.866 l
28.081 49.866 28.188 49.759 28.192 49.627 c
28.201 49.346 l
28.933 49.796 29.437 49.951 30.188 49.951 c
31.813 49.951 32.275 48.831 32.275 47.495 c
32.275 43.416 l
32.275 43.284 32.166 43.169 32.033 43.169 c
31.192 43.169 l
31.06 43.169 30.952 43.284 30.952 43.416 c
30.952 47.354 l
30.952 48.484 30.699 48.82 29.779 48.82 c
29.323 48.82 28.817 48.64 28.289 48.37 c
28.289 43.416 l
28.289 43.29 28.18 43.169 28.048 43.169 c
27.2 43.169 l
27.074 43.169 26.965 43.284 26.965 43.416 c
26.965 48.898 l
h
34.702 48.898 m
33.447 49.265 l
33.3 49.307 33.211 49.417 33.211 49.549 c
33.211 49.68 33.211 49.626 33.211 49.626 c
33.211 49.759 33.315 49.866 33.447 49.866 c
35.785 49.866 l
35.918 49.866 36.024 49.759 36.024 49.627 c
36.024 43.416 l
36.024 43.284 35.918 43.169 35.785 43.169 c
34.943 43.169 l
34.812 43.169 34.702 43.284 34.702 43.416 c
34.702 48.898 l
h
35.808 50.846 m
34.919 50.846 l
34.786 50.846 34.672 50.955 34.672 51.087 c
34.672 52.097 l
34.672 52.229 34.786 52.337 34.919 52.337 c
35.808 52.337 l
35.94 52.337 36.049 52.229 36.049 52.097 c
36.049 51.087 l
36.049 50.955 35.94 50.846 35.808 50.846 c
h
19.22 51.297 m
17.97 51.663 l
17.823 51.707 17.735 51.815 17.735 51.947 c
17.735 52.079 17.735 52.024 17.735 52.024 c
17.735 52.156 17.838 52.266 17.97 52.266 c
20.309 52.266 l
20.441 52.266 20.542 52.156 20.542 52.024 c
20.542 49.542 l
21.059 49.807 21.685 49.951 22.37 49.951 c
23.836 49.951 24.528 48.994 24.528 47.372 c
24.528 43.416 l
24.528 43.284 24.421 43.169 24.288 43.169 c
23.446 43.169 l
23.314 43.169 23.206 43.284 23.206 43.416 c
23.206 47.372 l
23.206 48.496 22.863 48.814 22.069 48.814 c
21.679 48.814 21.059 48.694 20.542 48.441 c
20.542 43.416 l
20.542 43.29 20.435 43.169 20.303 43.169 c
19.454 43.169 l
19.328 43.169 19.22 43.284 19.22 43.416 c
19.22 51.297 l
h
51.22 51.297 m
49.981 51.663 l
49.836 51.707 49.748 51.815 49.748 51.947 c
49.748 52.079 49.748 52.024 49.748 52.024 c
49.748 52.156 49.849 52.266 49.981 52.266 c
52.319 52.266 l
52.445 52.266 52.542 52.163 52.542 52.03 c
52.542 43.416 l
52.542 43.29 52.452 43.169 52.319 43.169 c
51.448 43.169 l
51.321 43.169 51.22 43.284 51.22 43.416 c
51.22 51.297 l
h
129.713 48.853 m
128.352 49.263 l
128.22 49.309 128.117 49.41 128.117 49.542 c
128.117 49.638 l
128.117 49.771 128.22 49.866 128.352 49.866 c
129.713 49.866 l
129.713 50.593 l
129.713 52.013 130.439 52.391 131.594 52.391 c
131.901 52.391 132.1 52.354 132.293 52.307 c
132.406 52.279 132.514 52.223 132.514 52.115 c
132.514 51.562 l
132.514 51.423 132.424 51.37 132.315 51.37 c
131.756 51.37 l
131.186 51.37 131.035 51.22 131.035 50.593 c
131.035 49.866 l
132.244 49.866 l
132.375 49.866 132.478 49.764 132.478 49.638 c
132.478 49.043 l
132.478 48.916 132.375 48.827 132.244 48.827 c
131.035 48.827 l
131.035 43.416 l
131.035 43.29 130.926 43.169 130.8 43.169 c
129.959 43.169 l
129.826 43.169 129.713 43.29 129.713 43.416 c
129.713 48.853 l
h
124.823 43.079 m
122.996 43.079 122.052 44.3 122.052 46.043 c
122.052 46.987 l
122.052 48.73 122.996 49.951 124.823 49.951 c
126.652 49.951 127.602 48.73 127.602 46.987 c
127.602 46.043 l
127.602 44.3 126.652 43.079 124.823 43.079 c
h
126.279 46.987 m
126.279 48.093 125.809 48.802 124.823 48.802 c
123.843 48.802 123.375 48.099 123.375 46.987 c
123.375 46.043 l
123.375 44.937 123.838 44.227 124.823 44.227 c
125.804 44.227 126.279 44.931 126.279 46.043 c
126.279 46.987 l
h
42.193 44.297 m
42.307 44.305 42.415 44.239 42.415 44.119 c
42.415 43.512 l
42.415 43.338 42.367 43.265 42.168 43.224 c
41.832 43.151 41.29 43.079 40.641 43.079 c
39.042 43.079 37.989 44.138 37.989 46.0 c
37.989 47.029 l
37.989 48.893 39.035 49.951 40.641 49.951 c
41.284 49.951 41.832 49.878 42.168 49.807 c
42.367 49.764 42.415 49.698 42.415 49.518 c
42.415 48.911 l
42.415 48.791 42.312 48.725 42.197 48.731 c
42.155 48.733 l
41.647 48.756 41.326 48.814 40.641 48.814 c
39.878 48.814 39.313 48.334 39.313 47.029 c
39.313 46.0 l
39.313 44.703 39.872 44.216 40.641 44.216 c
41.326 44.216 41.647 44.257 42.15 44.293 c
42.193 44.297 l
h
17.367 44.297 m
17.481 44.305 17.59 44.239 17.59 44.119 c
17.59 43.512 l
17.59 43.338 17.542 43.265 17.343 43.224 c
17.007 43.151 16.465 43.079 15.816 43.079 c
14.217 43.079 13.166 44.138 13.166 46.0 c
13.166 47.029 l
13.166 48.893 14.212 49.951 15.816 49.951 c
16.46 49.951 17.007 49.878 17.343 49.807 c
17.542 49.764 17.59 49.698 17.59 49.518 c
17.59 48.911 l
17.59 48.791 17.486 48.725 17.372 48.731 c
17.33 48.733 l
16.823 48.756 16.502 48.814 15.816 48.814 c
15.053 48.814 14.487 48.334 14.487 47.029 c
14.487 46.0 l
14.487 44.703 15.047 44.216 15.816 44.216 c
16.502 44.216 16.824 44.257 17.325 44.293 c
17.367 44.297 l
h
49.848 43.781 m
49.983 43.736 50.088 43.607 50.088 43.469 c
50.088 43.338 50.088 43.409 50.088 43.409 c
50.088 43.277 49.98 43.169 49.848 43.169 c
47.814 43.169 l
47.684 43.169 47.57 43.277 47.567 43.409 c
47.557 43.678 l
47.017 43.334 46.352 43.079 45.726 43.079 c
44.716 43.079 43.707 43.494 43.707 45.057 c
43.707 45.153 l
43.707 46.487 44.505 47.167 46.622 47.167 c
47.446 47.167 l
47.446 47.673 l
47.446 48.568 47.097 48.838 46.273 48.838 c
45.498 48.838 44.821 48.78 44.381 48.748 c
44.322 48.744 l
44.207 48.735 44.098 48.779 44.098 48.941 c
44.098 49.535 l
44.098 49.668 44.176 49.746 44.337 49.775 c
44.825 49.866 45.451 49.951 46.273 49.951 c
47.963 49.951 48.769 49.151 48.769 47.673 c
48.769 44.129 l
49.848 43.781 l
h
47.446 46.259 m
46.622 46.259 l
45.347 46.259 45.035 45.923 45.035 45.159 c
45.035 45.063 l
45.035 44.335 45.372 44.143 46.022 44.143 c
46.514 44.143 46.983 44.3 47.446 44.552 c
47.446 46.259 l
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E1 exch /ColorSpace defineRes

cs 0.13725 0.12157 0.12549 sc
f
n
210.025 56.659 m
209.871 56.659 209.775 56.615 209.709 56.544 c
209.641 56.477 209.595 56.383 209.595 56.228 c
209.595 36.516 l
209.595 36.36 209.641 36.267 209.709 36.198 c
209.775 36.129 209.871 36.083 210.025 36.083 c
215.182 36.083 l
217.186 36.083 218.406 36.54 219.148 37.498 c
220.24 38.807 220.273 40.919 220.273 44.16 c
220.273 48.584 l
220.273 51.823 220.24 53.935 219.148 55.245 c
218.406 56.204 217.186 56.659 215.182 56.659 c
210.025 56.659 l
h
212.865 54.254 m
214.684 54.254 l
215.487 54.254 215.966 54.123 216.337 53.677 c
216.91 52.991 216.959 51.605 216.959 48.81 c
216.959 43.934 l
216.959 41.137 216.91 39.751 216.337 39.066 c
215.966 38.62 215.487 38.489 214.684 38.489 c
212.865 38.489 l
212.865 54.254 l
h
244.186 56.228 m
244.186 56.383 244.139 56.477 244.069 56.544 c
244.002 56.615 243.907 56.659 243.753 56.659 c
241.344 56.659 l
241.189 56.659 241.094 56.615 241.027 56.544 c
240.959 56.477 240.911 56.383 240.911 56.228 c
240.911 41.675 l
240.911 40.156 240.797 39.252 240.304 38.711 c
239.969 38.344 239.496 38.165 238.832 38.165 c
238.23 38.165 237.773 38.331 237.426 38.714 c
236.959 39.229 236.816 40.102 236.816 41.675 c
236.816 56.228 l
236.816 56.383 236.77 56.477 236.701 56.544 c
236.633 56.615 236.539 56.659 236.383 56.659 c
233.975 56.659 l
233.819 56.659 233.727 56.615 233.656 56.544 c
233.588 56.477 233.543 56.383 233.543 56.228 c
233.543 41.67 l
233.543 39.552 233.83 38.222 234.673 37.297 c
235.549 36.334 236.87 35.823 238.875 35.823 c
240.9 35.823 242.207 36.365 243.01 37.299 c
243.953 38.396 244.186 39.703 244.186 41.67 c
244.186 56.228 l
h
228.625 36.516 m
228.625 36.36 228.58 36.267 228.512 36.198 c
228.441 36.129 228.349 36.083 228.194 36.083 c
225.559 36.083 l
225.403 36.083 225.309 36.129 225.241 36.198 c
225.172 36.267 225.127 36.36 225.127 36.516 c
225.127 54.06 l
222.031 54.06 l
221.875 54.06 221.782 54.105 221.713 54.174 c
221.645 54.241 221.599 54.336 221.599 54.491 c
221.599 56.228 l
221.599 56.383 221.645 56.477 221.713 56.544 c
221.782 56.615 221.875 56.659 222.031 56.659 c
231.722 56.659 l
231.875 56.659 231.971 56.615 232.039 56.544 c
232.107 56.477 232.154 56.383 232.154 56.228 c
232.154 54.491 l
232.154 54.336 232.107 54.241 232.039 54.174 c
231.971 54.105 231.875 54.06 231.722 54.06 c
228.625 54.06 l
228.625 36.516 l
0.53333 0.53725 0.54902 sc
f
n
246.367 25.787 m
238.102 21.449 l
227.397 25.611 226.495 25.611 215.791 21.449 c
207.525 25.787 l
215.791 30.127 l
226.495 25.962 227.397 25.962 238.102 30.127 c
246.367 25.787 l
h
246.367 15.063 m
238.102 10.725 l
227.397 14.887 226.495 14.887 215.791 10.725 c
207.525 15.063 l
215.791 19.401 l
226.495 15.238 227.397 15.238 238.102 19.401 c
246.367 15.063 l
h
246.367 4.3379 m
238.102 0.0 l
227.397 4.1612 226.495 4.1612 215.791 0.0 c
207.525 4.3379 l
215.791 8.6758 l
226.495 4.5127 227.397 4.5127 238.102 8.6758 c
246.367 4.3379 l
0.74902 0.18431 0.21569 sc
f
Q
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF

%%EndDocument
 @endspecial 382 1346 a Fr(MyAutho)m(r1)382 1496 y(MyAutho)m(r2)p
0 TeXcolorgray 0 TeXcolorgray 390 2690 a Fq(My)76 b(V)-6
b(ery)75 b(Long)g(and)h(Complicated)390 2939 y(Thesis)f(Title)p
0 TeXcolorgray 0 TeXcolorgray 390 3439 a Fp(Thesis)54
b(Subtitle)390 3887 y Fo(Master's)37 b(Thesis,)h(Month)g(y)m(ea)m(r)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.b) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.c) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 382 1346 a Fr(MyAutho)m(r1)382
1496 y(MyAutho)m(r2)p 0 TeXcolorgray 0 TeXcolorgray 390
2690 a Fq(My)76 b(V)-6 b(ery)75 b(Long)g(and)h(Complicated)390
2939 y(Thesis)f(Title)p 0 TeXcolorgray 0 TeXcolorgray
390 3439 a Fp(Thesis)54 b(Subtitle)390 3887 y Fo(Master's)37
b(Thesis,)h(Month)g(y)m(ea)m(r)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.d) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.e) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 95 170 a Fn(My)30 b(V)n(ery)f(Long)i(and)f
(Complicated)g(Thesis)g(Title,Thesis)f(Subtitle)95 874
y Fk(This)k(rep)s(o)m(rt)g(w)m(as)g(p)m(repa)m(red)i(b)m(y)175
987 y Fn(MyAutho)n(r1)175 1099 y(MyAutho)n(r2)95 1441
y Fk(Sup)s(erviso)m(rs)175 1554 y Fn(Sup)r(erviso)n(r)30
b(1)175 1667 y(Sup)r(erviso)n(r)g(2)p 125 4783 3161 4
v 175 4975 a(Release)g(date:)199 b(Date)30 b(published)175
5088 y(Catego)n(ry:)337 b(1)31 b(\(public\))175 5248
y(Edition:)403 b(First)175 5408 y(Comments:)271 b(This)24
b(rep)r(o)n(rt)i(is)e(pa)n(rt)g(of)h(the)g(requirements)g(to)g(achieve)
g(the)g(Master)f(of)873 5521 y(Science)h(in)f(Engineering)h
(\(M.Sc.Eng.\))39 b(at)24 b(the)g(T)-8 b(echnical)24
b(Universit)n(y)873 5634 y(of)31 b(Denma)n(rk.)40 b(This)29
b(rep)r(o)n(rt)i(rep)n(resents)f(30)h(ECTS)f(p)r(oints.)175
5778 y(Rights:)898 5775 y(c)873 5778 y Fl(\015)p Fn(MyOwner,)g(2008)175
3376 y(Depa)n(rtment)f(of)i(Electrical)f(Engineering)175
3489 y(Centre)h(fo)n(r)f(Electric)g(T)-8 b(echnology)32
b(\(CET\))175 3602 y(T)-8 b(echnical)30 b(Universit)n(y)f(of)h(Denma)n
(rk)175 3715 y(Elektrovej)i(building)d(325)175 3828 y(DK-2800)j(Kgs.)41
b(Lyngb)n(y)175 3940 y(Denma)n(rk)175 4124 y(www.elektro.dtu.dk/cet)184
4237 y(T)-8 b(el:)218 b(\(+45\))32 b(45)f(25)g(35)g(00)184
4350 y(F)n(ax:)198 b(\(+45\))32 b(45)f(88)g(61)g(11)175
4463 y(E-mail:)40 b(cet@elektro.dtu.dk)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 6
TeXDict begin 1 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.i) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(Preface)p 183
1361 2989 4 v 183 2025 a
SDict begin H.S end
 183 2025 a 183 2025 a
SDict begin 13.6 H.A end
 183 2025
a 183 2025 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.1) cvn /DEST pdfmark
end
 183 2025 a 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 2 7
TeXDict begin 2 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.ii) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 8
TeXDict begin 3 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.iii) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(Summa)-5 b(ry)p
183 1394 2989 4 v 183 2058 a
SDict begin H.S end
 183 2058 a 183 2058 a
SDict begin 13.6 H.A end
 183
2058 a 183 2058 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.2) cvn /DEST pdfmark
end
 183 2058 a 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 4 9
TeXDict begin 4 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.iv) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 10
TeXDict begin 5 9 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.v) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(Dansk)62 b(Resum)m(\023)-92
b(e)p 183 1361 2989 4 v 183 2025 a
SDict begin H.S end
 183 2025 a 183 2025
a
SDict begin 13.6 H.A end
 183 2025 a 183 2025 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.3) cvn /DEST pdfmark
end
 183 2025 a 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 6 11
TeXDict begin 6 10 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.vi) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 7 12
TeXDict begin 7 11 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.vii) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(Contents)p
183 1361 2989 4 v 183 2025 a
SDict begin H.S end
 183 2025 a 183 2025 a
SDict begin 13.6 H.A end
 183
2025 a 183 2025 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.4) cvn /DEST pdfmark
end
 183 2025 a 210 x Fi(List)34 b(of)h(Figures)p
1 0 0 TeXcolorrgb 3029 2235 a
SDict begin H.S end
 3029 2235 a Fi(viii)3171
2235 y
SDict begin 13.6 H.L end
 3171 2235 a 3171 2235 a
SDict begin [ /Subtype /Link /Dest (chapter*.4) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 2235 a 0 TeXcolorgray
183 2495 a Fi(List)f(of)h(T)-9 b(ables)p 1 0 0 TeXcolorrgb
3087 2495 a
SDict begin H.S end
 3087 2495 a Fi(ix)3171 2495 y
SDict begin 13.6 H.L end
 3171 2495 a
3171 2495 a
SDict begin [ /Subtype /Link /Dest (chapter*.5) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 2495 a 0 TeXcolorgray 183 2755 a Fi(1)84
b(In)m(tro)s(duction)p 1 0 0 TeXcolorrgb 3119 2755 a
SDict begin H.S end

3119 2755 a Fi(1)3171 2755 y
SDict begin 13.6 H.L end
 3171 2755 a 3171 2755 a
SDict begin [ /Subtype /Link /Dest (chapter.1) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end

3171 2755 a 0 TeXcolorgray 183 3016 a Fi(Nomenclature)p
1 0 0 TeXcolorrgb 3119 3016 a
SDict begin H.S end
 3119 3016 a Fi(1)3171 3016
y
SDict begin 13.6 H.L end
 3171 3016 a 3171 3016 a
SDict begin [ /Subtype /Link /Dest (chapter.1) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 3016 a 0 TeXcolorgray
183 3276 a Fi(2)g(Short)35 b(Title)p 1 0 0 TeXcolorrgb
3119 3276 a
SDict begin H.S end
 3119 3276 a Fi(5)3171 3276 y
SDict begin 13.6 H.L end
 3171 3276 a
3171 3276 a
SDict begin [ /Subtype /Link /Dest (chapter.2) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 3276 a 0 TeXcolorgray 319 3445 a Fh(2.1)94
b(Chapter)30 b(Summary)71 b(.)45 b(.)h(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h
(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)p
0 TeXcolorgray 1 0 0 TeXcolorrgb 3126 3445 a
SDict begin H.S end
 3126 3445
a Fh(5)3171 3445 y
SDict begin 13.6 H.L end
 3171 3445 a 3171 3445 a
SDict begin [ /Subtype /Link /Dest (section.2.1) cvn /H /I /Border
[0 0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 3445
a 0 TeXcolorgray 0 TeXcolorgray 183 3706 a Fi(3)84 b(P)m(ersp)s(ectiv)m
(es)p 1 0 0 TeXcolorrgb 3119 3706 a
SDict begin H.S end
 3119 3706 a Fi(7)3171
3706 y
SDict begin 13.6 H.L end
 3171 3706 a 3171 3706 a
SDict begin [ /Subtype /Link /Dest (chapter.3) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 3706 a 0 TeXcolorgray
319 3875 a Fh(3.1)94 b(F)-8 b(uture)30 b(W)-8 b(ork)88
b(.)45 b(.)h(.)g(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)p 0 TeXcolorgray
1 0 0 TeXcolorrgb 3126 3875 a
SDict begin H.S end
 3126 3875 a Fh(7)3171 3875
y
SDict begin 13.6 H.L end
 3171 3875 a 3171 3875 a
SDict begin [ /Subtype /Link /Dest (section.3.1) cvn /H /I /Border
[0 0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 3875 a 0 TeXcolorgray
0 TeXcolorgray 183 4135 a Fi(4)84 b(Conclusion)p 1 0 0
TeXcolorrgb 3119 4135 a
SDict begin H.S end
 3119 4135 a Fi(9)3171 4135 y
SDict begin 13.6 H.L end

3171 4135 a 3171 4135 a
SDict begin [ /Subtype /Link /Dest (chapter.4) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 4135 a 0 TeXcolorgray 183
4395 a Fi(References)p 1 0 0 TeXcolorrgb 3067 4395 a
SDict begin H.S end

3067 4395 a Fi(10)3171 4395 y
SDict begin 13.6 H.L end
 3171 4395 a 3171 4395 a
SDict begin [ /Subtype /Link /Dest (chapter.4) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end

3171 4395 a 0 TeXcolorgray 183 4656 a Fi(App)s(endix)p
1 0 0 TeXcolorrgb 3067 4656 a
SDict begin H.S end
 3067 4656 a Fi(12)3171
4656 y
SDict begin 13.6 H.L end
 3171 4656 a 3171 4656 a
SDict begin [ /Subtype /Link /Dest (chapter*.8) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 4656 a 0 TeXcolorgray
183 4916 a Fi(A)57 b(App)s(endix)35 b(A)p 1 0 0 TeXcolorrgb
3067 4916 a
SDict begin H.S end
 3067 4916 a Fi(13)3171 4916 y
SDict begin 13.6 H.L end
 3171 4916 a
3171 4916 a
SDict begin [ /Subtype /Link /Dest (appendix.A) cvn /H /I /Border [0
0 0]BorderArrayPatch /Color [1 0 0] H.B /ANN pdfmark end
 3171 4916 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 8 13
TeXDict begin 8 12 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.viii) cvn /DEST pdfmark
end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 581 263 a Fk(viii)p 581 301 2989 4 v 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 9 14
TeXDict begin 9 13 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.ix) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(List)61 b(of)i(Figures)p
183 1394 2989 4 v 183 2058 a
SDict begin H.S end
 183 2058 a 183 2058 a
SDict begin 13.6 H.A end
 183
2058 a 183 2058 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.5) cvn /DEST pdfmark
end
 183 2058 a 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 10 15
TeXDict begin 10 14 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray
573 174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.x) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray
0 TeXcolorgray 581 263 a Fk(x)2146 b(LIST)32 b(OF)h(FIGURES)p
581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 11 16
TeXDict begin 11 15 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray
174 174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.xi) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(List)61 b(of)i(T)-16
b(ables)p 183 1361 2989 4 v 183 2025 a
SDict begin H.S end
 183 2025 a 183
2025 a
SDict begin 13.6 H.A end
 183 2025 a 183 2025 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.6) cvn /DEST pdfmark
end
 183 2025 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 12 17
TeXDict begin 12 16 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray
573 174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.xii) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray
0 TeXcolorgray 581 263 a Fk(xii)2141 b(LIST)32 b(OF)h(T)-8
b(ABLES)p 581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 18
TeXDict begin 1 17 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 462 a
SDict begin H.S end
 183 462 a 183 462
a
SDict begin 13.6 H.A end
 183 462 a 183 462 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter.1) cvn /DEST pdfmark
end
 183 462 a 812 x Fg(Chapter)74 b
Fe(1)p 0 TeXcolorgray 0 TeXcolorgray 2009 1709 a Fq(Intro)6
b(duction)p 183 1837 2989 4 v 183 2625 a Fh(T)-8 b(ak)n(e)30
b(a)h(lo)r(ok)h(at)p 0 0 1 TeXcolorrgb 786 2625 a
SDict begin H.S end
 786
2625 a Fh(Kn)910 2629 y(\177)908 2625 y(upp)r(el)1128
2625 y
SDict begin 13.6 H.L end
 1128 2625 a 1128 2625 a
SDict begin [ /Subtype /Link /Dest (cite.knueppel2008) cvn /H /I /Border
[0 0 0]BorderArrayPatch /Color [0 1 0] H.B /ANN pdfmark end
 1128 2625 a 0 TeXcolorgray
28 w Fh(\()p 0 0 1 TeXcolorrgb 1191 2625 a
SDict begin H.S end
 1191 2625
a Fh(2008)1371 2625 y
SDict begin 13.6 H.L end
 1371 2625 a 1371 2625 a
SDict begin [ /Subtype /Link /Dest (cite.knueppel2008) cvn /H /I /Border
[0 0 0]BorderArrayPatch /Color [0 1 0] H.B /ANN pdfmark end
 1371 2625
a 0 TeXcolorgray Fh(\))h(to)e(see)g(this)f(template)h(in)f(action.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 19
TeXDict begin 2 18 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 581 263 a Fk(2)2427 b(Intro)s(duction)p
581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 20
TeXDict begin 3 19 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.3) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(Nomenclature)p
183 1361 2989 4 v 183 2025 a
SDict begin H.S end
 183 2025 a 183 2025 a
SDict begin 13.6 H.A end
 183
2025 a 183 2025 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.7) cvn /DEST pdfmark
end
 183 2025 a 119 x Fh(T)-8 b(o)30 b(create)i(the)e
(list)h(of)g(sym)n(b)r(ols)e(execute:)183 2314 y Fd(makeindex)44
b(<filenamee>.nlo)e(-s)47 b(nomencl.ist)d(-o)j(<filename>.nls)232
2570 y Fi(Abbreviations:)232 2683 y Fh(TSO)99 b(T)-8
b(ransmission)29 b(System)h(Op)r(erator)232 2796 y(ISO)132
b(Indep)r(enden)n(t)28 b(System)i(Op)r(erator)232 2909
y(.)15 b(.)g(.)183 3071 y(Upp)r(er-case)31 b(notation)h(of)f(v)n
(oltages)h(and)f(curren)n(ts)e(are)i(phasors.)41 b(V)-8
b(ectors)33 b(and)d(ma-)183 3184 y(trices)g(are)h(written)f(in)g
Fi(b)s(old)p Fh(.)p 0 TeXcolorgray 183 3428 a Fm(:)208
3442 y Fc(r)p 0 TeXcolorgray 464 3428 a Fh(Subscript)f(refers)g(to)i
(receiving)g(end)f(quan)n(tit)n(y,)f(page)i(5)p 0 TeXcolorgray
183 3615 a Fm(:)208 3629 y Fc(s)p 0 TeXcolorgray 464
3615 a Fh(Subscript)e(refers)g(to)i(sending)f(end)f(quan)n(tit)n(y,)h
(page)h(5)p 0 TeXcolorgray 183 3803 a Fm(I)p 0 TeXcolorgray
241 w Fh(Steady-state)h(curren)n(t)d(phasor,)g(page)i(5)1225
b(A)p 0 TeXcolorgray 183 3991 a Fm(V)p 0 TeXcolorgray
228 w Fh(Steady-state)32 b(v)n(oltage)g(phasor,)d(page)i(5)1228
b(V)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 21
TeXDict begin 4 20 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.4) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 581 263 a Fk(4)2427 b(Intro)s(duction)p
581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 22
TeXDict begin 5 21 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.5) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 462 a
SDict begin H.S end
 183 462 a 183 462
a
SDict begin 13.6 H.A end
 183 462 a 183 462 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter.2) cvn /DEST pdfmark
end
 183 462 a 812 x Fg(Chapter)74 b
Fe(2)p 0 TeXcolorgray 0 TeXcolorgray 971 1592 a Fq(V)-6
b(ery)75 b(Long)g(Title)g(fo)-6 b(r)76 b(the)855 1841
y(Content)g(in)f(This)g(Chapter)p 183 2009 2989 4 v 183
2793 a Fh(The)27 b(relation)h(b)r(et)n(w)n(een)g(sending)f(end)g(and)g
(receiving)h(end)f(quan)n(tities)h(are)g(giv)n(en)f(as)3171
2793 y
SDict begin H.S end
 3171 2793 a 3171 2793 a
SDict begin 13.6 H.A end
 3171 2793 a 3171 2793
a
SDict begin [ /View [/XYZ H.V] /Dest (equation.2.0.1) cvn /DEST pdfmark
end
 3171 2793 a 1357 2997 a Fm(V)1410 3011 y Fc(s)1472
2997 y Fh(=)e Fm(AV)1689 3011 y Fc(r)1747 2997 y Fh(+)20
b Fm(B)5 b(I)1952 3011 y Fc(r)2939 2997 y
SDict begin H.S end
 2939 2997 a
2939 2997 a
SDict begin 16.6 H.A end
 2939 2997 a 2939 2997 a
SDict begin [ /View [/XYZ H.V] /Dest (equation.2.0.1a) cvn /DEST pdfmark
end
 2939 2997 a Fh(\(2.1a\))1370
3135 y Fm(I)1410 3149 y Fc(s)1472 3135 y Fh(=)25 b Fm(C)7
b(V)1693 3149 y Fc(r)1751 3135 y Fh(+)19 b Fm(D)s(I)1959
3149 y Fc(r)2934 3135 y
SDict begin H.S end
 2934 3135 a 2934 3135 a
SDict begin 16.6 H.A end
 2934
3135 a 2934 3135 a
SDict begin [ /View [/XYZ H.V] /Dest (equation.2.0.1b) cvn /DEST pdfmark
end
 2934 3135 a Fh(\(2.1b\))183 3339 y(The)29
b(\014rst)g(time)i(a)f(parameter)h(or)f(v)-5 b(ariable)30
b(o)r(ccur)h(that)g(should)d(b)r(e)j(included)e(in)g(the)183
3452 y(list)h(of)h(sym)n(b)r(ols)e(write:)183 3621 y
Fd(\\nomenclature{$<sy)o(mb)o(ol>)o($}{)o(Ste)o(ad)o(y-s)o(tat)o(e)41
b(voltage)46 b(phasor\\nomunit{<u)o(nit)o(>}})183 3778
y
SDict begin H.S end
 183 3778 a 183 3778 a
SDict begin 13.6 H.A end
 183 3778 a 183 3778 a
SDict begin [ /View [/XYZ H.V] /Dest (section.2.1) cvn /DEST pdfmark
end
 183 3778
a 186 x Fb(2.1)135 b(Chapter)45 b(Summary)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 6 23
TeXDict begin 6 22 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.6) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 581 263 a Fk(6)2485 b(Sho)m(rt)33 b(Title)p
581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 7 24
TeXDict begin 7 23 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.7) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 462 a
SDict begin H.S end
 183 462 a 183 462
a
SDict begin 13.6 H.A end
 183 462 a 183 462 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter.3) cvn /DEST pdfmark
end
 183 462 a 812 x Fg(Chapter)74 b
Fe(3)p 0 TeXcolorgray 0 TeXcolorgray 2003 1689 a Fq(P)-6
b(ersp)6 b(ectives)p 183 1857 2989 4 v 183 2521 a
SDict begin H.S end
 183
2521 a 183 2521 a
SDict begin 13.6 H.A end
 183 2521 a 183 2521 a
SDict begin [ /View [/XYZ H.V] /Dest (section.3.1) cvn /DEST pdfmark
end
 183 2521 a 139
x Fb(3.1)135 b(F)-11 b(uture)44 b(W)-11 b(ork)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 8 25
TeXDict begin 8 24 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray 573
174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.8) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray 0
TeXcolorgray 581 263 a Fk(8)2425 b(P)m(ersp)s(ectives)p
581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 9 26
TeXDict begin 9 25 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray 174
174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.9) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 183 462 a
SDict begin H.S end
 183 462 a 183 462
a
SDict begin 13.6 H.A end
 183 462 a 183 462 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter.4) cvn /DEST pdfmark
end
 183 462 a 812 x Fg(Chapter)74 b
Fe(4)p 0 TeXcolorgray 0 TeXcolorgray 2158 1709 a Fq(Conclusion)p
183 1837 2989 4 v 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 10 27
TeXDict begin 10 26 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray
573 174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.10) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray
0 TeXcolorgray 581 263 a Fk(10)2443 b(Conclusion)p 581
301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 11 28
TeXDict begin 11 27 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray
174 174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.11) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 183 1233 a Fj(Bibliography)p
183 1394 2989 4 v 183 2058 a
SDict begin H.S end
 183 2058 a 183 2058 a
SDict begin 13.6 H.A end
 183
2058 a 183 2058 a
SDict begin [ /View [/XYZ H.V] /Dest (chapter*.8) cvn /DEST pdfmark
end
 183 2058 a 0 TeXcolorgray -45 2121
a
SDict begin H.S end
 -45 2121 a 137 2121 a
SDict begin 13.6 H.A end
 137 2121 a 137 2121 a
SDict begin [ /View [/XYZ H.V] /Dest (cite.knueppel2008) cvn /DEST
pdfmark end
 137 2121
a 0 TeXcolorgray 46 w Fh(Th)n(yge)26 b(Kn)581 2125 y(\177)579
2121 y(upp)r(el.)32 b(Structural)26 b(analysis)g(for)h(fault)f
(detection)i(and)e(isolation)i(in)e(elec-)274 2234 y(trical)32
b(distribution)e(systems.)44 b(Master's)33 b(thesis,)f(T)-8
b(ec)n(hnical)32 b(Univ)n(ersit)n(y)e(of)i(Den-)274 2347
y(mark,)i(Departmen)n(t)g(of)g(Electrical)h(Engineering,)g(Cen)n(tre)e
(for)h(Eletric)g(T)-8 b(ec)n(hnol-)274 2460 y(ogy)25
b(and)f(Section)i(for)e(Automation,)j(April)d(2008.)34
b(URL)p 0 1 0 0 TeXcolorcmyk 2266 2460 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 2266 2460 a
2266 2480 a
SDict begin BU.SS end
 2266 2480 a 0 1 0 0 TeXcolorcmyk -20 x Fd(http://)p
0 1 0 0 TeXcolorcmyk 2602 2397 a
SDict begin BU.SE end
 2602 2397 a 2602 2460
a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 2602 2460 a 2602 2460 a
SDict begin BU.SS end
 2602 2460 a 0 1 0 0 TeXcolorcmyk
Fd(www.)p 0 1 0 0 TeXcolorcmyk 2794 2421 a
SDict begin BU.SE end
 2794 2421
a 2794 2460 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 2794 2460 a 2794 2460 a
SDict begin BU.SS end
 2794 2460 a 0 1 0 0
TeXcolorcmyk Fd(elektro.)p 0 1 0 0 TeXcolorcmyk 3178
2404 a
SDict begin BU.SE end
 3178 2404 a 274 2573 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 274 2573 a 274 2573 a
SDict begin BU.SS end
 274
2573 a 0 1 0 0 TeXcolorcmyk Fd(dtu.)p 0 1 0 0 TeXcolorcmyk
466 2517 a
SDict begin BU.SE end
 466 2517 a 466 2573 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 466 2573 a 466 2581
a
SDict begin BU.SS end
 466 2581 a 0 1 0 0 TeXcolorcmyk -8 x Fd(dk/)p 0 1 0 0
TeXcolorcmyk 610 2510 a
SDict begin BU.SE end
 610 2510 a 610 2573 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 610 2573
a 610 2593 a
SDict begin BU.SS end
 610 2593 a 0 1 0 0 TeXcolorcmyk -20 x Fd(forskning/)p
0 1 0 0 TeXcolorcmyk 1089 2510 a
SDict begin BU.SE end
 1089 2510 a 1089 2573
a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 1089 2573 a 1089 2581 a
SDict begin BU.SS end
 1089 2581 a 0 1 0 0 TeXcolorcmyk
-8 x Fd(elt)o(ek/)p 0 1 0 0 TeXcolorcmyk 1375 2510 a
SDict begin BU.SE end

1375 2510 a 1375 2573 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 1375 2573 a 1375 2593 a
SDict begin BU.SS end
 1375
2593 a 0 1 0 0 TeXcolorcmyk -20 x Fd(pro)o(je)o(kte)o(r_)p
0 1 0 0 TeXcolorcmyk 1852 2517 a
SDict begin BU.SE end
 1852 2517 a 1852 2573
a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 1852 2573 a 1852 2581 a
SDict begin BU.SS end
 1852 2581 a 0 1 0 0 TeXcolorcmyk
-8 x Fd(u)o(dda)o(nn)o(els)o(e/)p 0 1 0 0 TeXcolorcmyk
2376 2510 a
SDict begin BU.SE end
 2376 2510 a 2376 2573 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 2376 2573 a 2376
2581 a
SDict begin BU.SS end
 2376 2581 a 0 1 0 0 TeXcolorcmyk -8 x Fd(0)o(8/)p
0 1 0 0 TeXcolorcmyk 2519 2510 a
SDict begin BU.SE end
 2519 2510 a 2519 2573
a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 2519 2573 a 2519 2573 a
SDict begin BU.SS end
 2519 2573 a 0 1 0 0 TeXcolorcmyk
Fd(t)o(k.)p 0 1 0 0 TeXcolorcmyk 2661 2517 a
SDict begin BU.SE end
 2661 2517
a 2661 2573 a
SDict begin /BU.L (http://www.elektro.dtu.dk/forskning/eltek/projekter_uddannelse/08/tk.aspx)
def end
 2661 2573 a 2661 2593 a
SDict begin BU.SS end
 2661 2593 a 0 1 0 0
TeXcolorcmyk -20 x Fd(asp)o(x)p 0 1 0 0 TeXcolorcmyk
2852 2534 a
SDict begin BU.SE end
 2852 2534 a 2852 2573 a
SDict begin BU.E end
 2852 2573 a 0 TeXcolorgray
Fh(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 12 29
TeXDict begin 12 28 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray
573 174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.12) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray
0 TeXcolorgray 581 263 a Fk(12)2171 b(BIBLIOGRAPHY)p
581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 13 30
TeXDict begin 13 29 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray
174 174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.13) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 183 462 a
SDict begin H.S end
 183 462 a 183
462 a
SDict begin 13.6 H.A end
 183 462 a 183 462 a
SDict begin [ /View [/XYZ H.V] /Dest (appendix.A) cvn /DEST pdfmark
end
 183 462 a 812 x Fg(Appendix)74
b Fe(A)p 0 TeXcolorgray 0 TeXcolorgray 2062 1689 a Fq(App)6
b(endix)75 b(A)p 183 1857 2989 4 v 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 14 31
TeXDict begin 14 30 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray
573 174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.14) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray
0 TeXcolorgray 581 263 a Fk(14)2401 b(App)s(endix)33
b(A)p 581 301 2989 4 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 15 32
TeXDict begin 15 31 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 174 174 a
SDict begin H.S end
 174 174 a 0 TeXcolorgray 0 TeXcolorgray
174 174 a
SDict begin H.R end
 174 174 a 174 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.15) cvn /DEST pdfmark end
 174 174 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 16 33
TeXDict begin 16 32 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 573 174 a
SDict begin H.S end
 573 174 a 0 TeXcolorgray 0 TeXcolorgray
573 174 a
SDict begin H.R end
 573 174 a 573 174 a
SDict begin [ /View [/XYZ H.V] /Dest (page.16) cvn /DEST pdfmark end
 573 174 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 94 4129 a Fp(www.elektro.dtu.dk)94
4355 y Fa(Depa)m(rtment)34 b(of)e(Electrical)h(Engineering)94
4467 y(Centre)h(fo)m(r)e(Electric)i(T)-8 b(echnology)31
b(\(CET\))94 4580 y(T)-8 b(echnical)33 b(Universit)m(y)g(of)f(Denma)m
(rk)94 4693 y(\037rsteds)i(Plads)94 4806 y(Building)e(348)94
4919 y(DK-2800)f(Kgs.)44 b(Lyngb)m(y)94 5032 y(Denma)m(rk)97
5147 y(T)-8 b(el:)218 b(\(+45\))31 b(45)h(25)g(38)g(00)97
5263 y(F)m(ax:)199 b(\(+45\))31 b(45)h(93)g(16)g(34)94
5377 y(Email:)43 b(info@elektro.dtu.dk)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
