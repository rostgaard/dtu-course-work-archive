<?xml version="1.0" encoding="UTF-8"?><!-- Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3.3-hudson-757-SNAPSHOT. --><definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://lameduck.ws" xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype" name="LameDuckWSDL" targetNamespace="http://lameduck.ws">
    <types>
        <xsd:schema xmlns:tns="http://lameduck.ws" targetNamespace="http://lameduck.ws">
            <xsd:complexType name="FlightInformation">
                <xsd:sequence maxOccurs="1" minOccurs="1">
                    <xsd:element name="bookingNumber" type="xsd:int"></xsd:element>
                    <xsd:element name="price" type="xsd:double"></xsd:element>
                    <xsd:element name="airlineReservationService" type="xsd:string"></xsd:element>
                    <xsd:element name="flight" type="tns:Flight"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="Flight">
                <xsd:sequence>
                    <xsd:element name="startAirport" type="xsd:string"></xsd:element>
                    <xsd:element name="endAirport" type="xsd:string"></xsd:element>
                    <xsd:element name="liftOff" type="xsd:date"></xsd:element>
                    <xsd:element name="landing" type="xsd:date"></xsd:element>
                    <xsd:element name="carrier" type="xsd:string"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="creditCardInformation">
                <xsd:sequence>
                    <xsd:element name="holder" type="xsd:string"></xsd:element>
                    <xsd:element name="creditCardNumber" type="xsd:int"></xsd:element>
                    <xsd:element name="expirationDate" type="tns:expirationDateType"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="bookFlightFaultMsg" type="xsd:string"></xsd:element>
            <xsd:element name="cancelFlightFaultMsg" type="xsd:string"></xsd:element>
            <xsd:complexType name="FlightInformations">
                <xsd:sequence>
                    <xsd:element name="flightInformation" type="tns:FlightInformation" maxOccurs="unbounded" minOccurs="0"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="expirationDateType">
                <xsd:sequence>
                    <xsd:element name="month" type="xsd:int"></xsd:element>
                    <xsd:element name="year" type="xsd:int"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:schema>
    </types>
    <message name="bookFlightRequest">
        <part name="bookingNumber" type="xsd:int"></part>
        <part name="creditCardInformation" type="tns:creditCardInformation"></part>
    </message>
    <message name="bookFlightResponse">
        <part name="result" type="xsd:boolean"></part>
    </message>
    <message name="bookFlightFault">
        <part name="msg" element="tns:bookFlightFaultMsg"></part>
    </message>
    <message name="cancelFlightRequest">
        <part name="bookingNumber" type="xsd:int"></part>
        <part name="price" type="xsd:int"></part>
        <part name="creditCardInformation" type="tns:creditCardInformation"></part>
    </message>
    <message name="cancelFlightResponse">
        <part name="result" type="xsd:boolean"></part>
    </message>
    <message name="cancelFlightFault">
        <part name="msg" element="tns:cancelFlightFaultMsg"></part>
    </message>
    <message name="getFlightRequest">
        <part name="startAirport" type="xsd:string"></part>
        <part name="destinationAirport" type="xsd:string"></part>
        <part name="date" type="xsd:date"></part>
    </message>
    <message name="getFlightResponse">
        <part name="flightInformations" type="tns:FlightInformations"></part>
    </message>
    <portType name="LameDuckWSDLPortType">
        <operation name="bookFlight">
            <input name="input2" message="tns:bookFlightRequest"></input>
            <output name="output2" message="tns:bookFlightResponse"></output>
            <fault name="fault1" message="tns:bookFlightFault"></fault>
        </operation>
        <operation name="cancelFlight">
            <input name="input3" message="tns:cancelFlightRequest"></input>
            <output name="output3" message="tns:cancelFlightResponse"></output>
            <fault name="fault1" message="tns:cancelFlightFault"></fault>
        </operation>
        <operation name="getFlight">
            <input name="input1" message="tns:getFlightRequest"></input>
            <output name="output1" message="tns:getFlightResponse"></output>
        </operation>
    </portType>
    <plnk:partnerLinkType name="LameDuckWSDL">
        <!-- A partner link type is automatically generated when a new port type is added. Partner link types are used by BPEL processes.
In a BPEL process, a partner link represents the interaction between the BPEL process and a partner service. Each partner link is associated with a partner link type.
A partner link type characterizes the conversational relationship between two services. The partner link type can have one or two roles.-->
        <plnk:role name="LameDuckWSDLPortTypeRole" portType="tns:LameDuckWSDLPortType"></plnk:role>
    </plnk:partnerLinkType>
</definitions>