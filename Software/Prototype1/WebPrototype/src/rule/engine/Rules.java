/* Generated By:JavaCC: Do not edit this line. Rules.java */
package rule.engine;

import java.util.*;

public class Rules implements RulesConstants {

    public List<Rule> parse() {
        try {
            return RULES();
        } catch (TokenMgrError e) {
            return null;
        } catch (ParseException e) {
            return null;
        }
    }

// Token related rules (conversion to objects):
  final public String IDENTIFIER() throws ParseException {
        Token identifierToken;
    identifierToken = jj_consume_token(IDENTIFIER);
          {if (true) return identifierToken.image;}
    throw new Error("Missing return statement in function");
  }

  final public int NUMBER() throws ParseException {
        Token numberToken;
    numberToken = jj_consume_token(NUMBER);
          {if (true) return Integer.parseInt(numberToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public Operator OP0() throws ParseException {
    jj_consume_token(6);
                 {if (true) return new Operator (OperatorType.OR);}
    throw new Error("Missing return statement in function");
  }

  final public Operator OP1() throws ParseException {
    jj_consume_token(7);
                 {if (true) return new Operator (OperatorType.AND);}
    throw new Error("Missing return statement in function");
  }

  final public Operator OP2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      jj_consume_token(9);
                  {if (true) return new Operator (OperatorType.EQUAL);}
      break;
    case 8:
      jj_consume_token(8);
              {if (true) return new Operator (OperatorType.GTEQUAL);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Actual grammar rules:  
  final public List<Rule> RULES() throws ParseException {
        List<Rule> rules = new ArrayList<Rule>();
        Rule rule;
    label_1:
    while (true) {
      rule = RULE();
      jj_consume_token(13);
                          rules.add(rule);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
      {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public Rule RULE() throws ParseException {
        String identifier;
        EventTrigger event;
        Expression condition;
        List<Action> actions;
    identifier = IDENTIFIER();
    jj_consume_token(14);
    jj_consume_token(16);
    event = EVENT();
    jj_consume_token(17);
    condition = EXPRESSION();
    jj_consume_token(18);
    actions = ACTIONS();
          Rule rule = new Rule();
      rule.setName(identifier);
          rule.setEvent(event);
          rule.setCondition(condition);
          rule.setActions(actions);
          {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public EventTrigger EVENT() throws ParseException {
        String identifier;
    identifier = IDENTIFIER();
          {if (true) return new EventTrigger (identifier);}
    throw new Error("Missing return statement in function");
  }

  final public Expression EXPRESSION() throws ParseException {
        Expression expression;
    expression = EXPRESSION0();
          {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EXPRESSION0() throws ParseException {
        Expression expression1;
        Expression expression2;
        Operator operator;
    expression1 = EXPRESSION1();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      operator = OP0();
      expression2 = EXPRESSION1();
        Operation operation = new Operation(expression1, expression2, operator);
        expression1 = operation;
    }
          {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EXPRESSION1() throws ParseException {
        Expression expression1;
        Expression expression2;
        Operator operator;
    expression1 = EXPRESSION2();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      operator = OP1();
      expression2 = EXPRESSION2();
        Operation operation = new Operation(expression1, expression2, operator);
        expression1 = operation;
    }
          {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EXPRESSION2() throws ParseException {
        Expression expression1;
        Expression expression2;
        Operator operator;
    expression1 = ATOMIC();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 9:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      operator = OP2();
      expression2 = ATOMIC();
        Operation operation = new Operation(expression1, expression2, operator);
        expression1 = operation;
    }
          {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ATOMIC() throws ParseException {
        Expression expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      expression = EXPRESSION();
      jj_consume_token(11);
                                              {if (true) return expression;}
      break;
    case IDENTIFIER:
      expression = ATTRIBUTE();
                                    {if (true) return expression;}
      break;
    case NUMBER:
      expression = CONSTANT();
                                    {if (true) return expression;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Attribute ATTRIBUTE() throws ParseException {
        String object;
        String slot;
    object = IDENTIFIER();
    jj_consume_token(12);
    slot = IDENTIFIER();
          {if (true) return new Attribute(object, slot);}
    throw new Error("Missing return statement in function");
  }

  final public Constant CONSTANT() throws ParseException {
        int constantValue;
    constantValue = NUMBER();
          {if (true) return new Constant(constantValue);}
    throw new Error("Missing return statement in function");
  }

  final public List<Action> ACTIONS() throws ParseException {
        List<Action> actions = new ArrayList<Action>();
        Action action;
    action = ACTION();
                          actions.add(action);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(15);
      action = ACTION();
                               actions.add(action);
    }
      {if (true) return actions;}
    throw new Error("Missing return statement in function");
  }

  final public Action ACTION() throws ParseException {
        String actorName;
        String actionName;
        List<Constant> parameters;
    actorName = IDENTIFIER();
    jj_consume_token(12);
    actionName = IDENTIFIER();
    parameters = PARAMETERS();
          {if (true) return new Action(actorName, actionName, parameters);}
    throw new Error("Missing return statement in function");
  }

  final public List<Constant> PARAMETERS() throws ParseException {
        List<Constant> parameters = new ArrayList<Constant>();
        Constant parameter;
    jj_consume_token(10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      parameter = CONSTANT();
                                       parameters.add(parameter);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 15:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        jj_consume_token(15);
        parameter = CONSTANT();
                                             parameters.add(parameter);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(11);
          {if (true) return parameters;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RulesTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x300,0x80000,0x40,0x80,0x300,0x180400,0x8000,0x8000,0x100000,};
   }

  /** Constructor with InputStream. */
  public Rules(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Rules(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RulesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Rules(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RulesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Rules(RulesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RulesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
